
main.out:     file format elf32-littlearm

Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 08 00 20 0d 01 00 00 95 5d 00 00 a1 5d 00 00     ... .....]...]..
      10:	a9 5d 00 00 b1 5d 00 00 b9 5d 00 00 00 00 00 00     .]...]...]......
	...
      2c:	c1 5d 00 00 cd 5d 00 00 00 00 00 00 d9 5d 00 00     .]...].......]..
      3c:	e5 5d 00 00 39 01 00 00 39 01 00 00 39 01 00 00     .]..9...9...9...
      4c:	fd 5d 00 00 39 01 00 00 39 01 00 00 39 01 00 00     .]..9...9...9...
      5c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      6c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      7c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      8c:	39 01 00 00 f1 5d 00 00 39 01 00 00 39 01 00 00     9....]..9...9...
      9c:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      ac:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      bc:	39 01 00 00 39 01 00 00 39 01 00 00 39 01 00 00     9...9...9...9...
      cc:	39 01 00 00 39 01 00 00 39 01 00 00 00 00 00 00     9...9...9.......
	...
      f4:	5f f8 08 f1 78 6c 00 00 00 00 00 20 fc 00 00 20     _...xl..... ... 
     104:	fc 00 00 20 74 02 00 20                             ... t.. 

0000010c <Reset_Handler>:
     10c:	2100      	movs	r1, #0
     10e:	e003      	b.n	118 <LoopCopyDataInit>

00000110 <CopyDataInit>:
     110:	4b0a      	ldr	r3, [pc, #40]	(13c <ADC1_2_IRQHandler+0x4>)
     112:	585b      	ldr	r3, [r3, r1]
     114:	5043      	str	r3, [r0, r1]
     116:	3104      	adds	r1, #4

00000118 <LoopCopyDataInit>:
     118:	4809      	ldr	r0, [pc, #36]	(140 <ADC1_2_IRQHandler+0x8>)
     11a:	4b0a      	ldr	r3, [pc, #40]	(144 <ADC1_2_IRQHandler+0xc>)
     11c:	1842      	adds	r2, r0, r1
     11e:	429a      	cmp	r2, r3
     120:	d3f6      	bcc.n	110 <CopyDataInit>
     122:	4a09      	ldr	r2, [pc, #36]	(148 <ADC1_2_IRQHandler+0x10>)
     124:	e002      	b.n	12c <LoopFillZerobss>

00000126 <FillZerobss>:
     126:	2300      	movs	r3, #0
     128:	f842 3b04 	str.w	r3, [r2], #4

0000012c <LoopFillZerobss>:
     12c:	4b07      	ldr	r3, [pc, #28]	(14c <ADC1_2_IRQHandler+0x14>)
     12e:	429a      	cmp	r2, r3
     130:	d3f9      	bcc.n	126 <FillZerobss>
     132:	f000 f963 	bl	3fc <main>
     136:	4770      	bx	lr

00000138 <ADC1_2_IRQHandler>:
     138:	e7fe      	b.n	138 <ADC1_2_IRQHandler>
     13a:	0000      	.short	0x0000
     13c:	00006c78 	.word	0x00006c78
     140:	20000000 	.word	0x20000000
     144:	200000fc 	.word	0x200000fc
     148:	200000fc 	.word	0x200000fc
     14c:	20000274 	.word	0x20000274

00000150 <printf>:
/** funky printf to USB virtual com port (64 byte string max)
 */
uint8_t usbprintfbuffer[VIRTUAL_COM_PORT_DATA_SIZE];
int printf(const char *format, ...) {

	int Nb_bytes = sprintf(usbprintfbuffer, format);
     150:	b40f      	push	{r0, r1, r2, r3}
     152:	b580      	push	{r7, lr}
     154:	b082      	sub	sp, #8
     156:	af00      	add	r7, sp, #0
     158:	480d      	ldr	r0, [pc, #52]	(190 <printf+0x40>)
     15a:	6939      	ldr	r1, [r7, #16]
     15c:	f006 fcce 	bl	6afc <sprintf>
     160:	4603      	mov	r3, r0
     162:	607b      	str	r3, [r7, #4]
	if (bDeviceState == CONFIGURED) {
     164:	4b0b      	ldr	r3, [pc, #44]	(194 <printf+0x44>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	2b05      	cmp	r3, #5
     16a:	d10a      	bne.n	182 <printf+0x32>
	  /* Write the data to the USB endpoint */
	  USB_SIL_Write(EP1_IN, usbprintfbuffer, Nb_bytes);
     16c:	687b      	ldr	r3, [r7, #4]
     16e:	f04f 0081 	mov.w	r0, #129	; 0x81
     172:	4907      	ldr	r1, [pc, #28]	(190 <printf+0x40>)
     174:	461a      	mov	r2, r3
     176:	f001 fa13 	bl	15a0 <USB_SIL_Write>
	  SetEPTxValid(ENDP1);
     17a:	f04f 0001 	mov.w	r0, #1	; 0x1
     17e:	f002 fdb5 	bl	2cec <SetEPTxValid>
	}
}
     182:	f107 0708 	add.w	r7, r7, #8	; 0x8
     186:	46bd      	mov	sp, r7
     188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     18c:	b004      	add	sp, #16
     18e:	4770      	bx	lr
     190:	20000100 	.word	0x20000100
     194:	20000268 	.word	0x20000268

00000198 <RTC_Configuration>:
/**
 * @brief  Configures the RTC.
 * @param  None
 * @retval None
 */
void RTC_Configuration(void) {
     198:	b580      	push	{r7, lr}
     19a:	af00      	add	r7, sp, #0
	/* Enable PWR and BKP clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
     19c:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
     1a0:	f04f 0101 	mov.w	r1, #1	; 0x1
     1a4:	f004 f852 	bl	424c <RCC_APB1PeriphClockCmd>

	/* Allow access to BKP Domain */
	PWR_BackupAccessCmd(ENABLE);
     1a8:	f04f 0001 	mov.w	r0, #1	; 0x1
     1ac:	f006 f980 	bl	64b0 <PWR_BackupAccessCmd>

	/* Reset Backup Domain */
	BKP_DeInit();
     1b0:	f005 ff12 	bl	5fd8 <BKP_DeInit>

	/* Enable LSE */
	RCC_LSEConfig(RCC_LSE_ON);
     1b4:	f04f 0001 	mov.w	r0, #1	; 0x1
     1b8:	f003 fef8 	bl	3fac <RCC_LSEConfig>
	/* Wait till LSE is ready */
	while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET) {
     1bc:	f04f 0041 	mov.w	r0, #65	; 0x41
     1c0:	f004 f8d0 	bl	4364 <RCC_GetFlagStatus>
     1c4:	4603      	mov	r3, r0
     1c6:	2b00      	cmp	r3, #0
     1c8:	d0f8      	beq.n	1bc <RTC_Configuration+0x24>
	}

	/* Select LSE as RTC Clock Source */
	RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
     1ca:	f44f 7080 	mov.w	r0, #256	; 0x100
     1ce:	f003 ff21 	bl	4014 <RCC_RTCCLKConfig>

	/* Enable RTC Clock */
	RCC_RTCCLKCmd(ENABLE);
     1d2:	f04f 0001 	mov.w	r0, #1	; 0x1
     1d6:	f003 ff2f 	bl	4038 <RCC_RTCCLKCmd>

	/* Wait for RTC registers synchronization */
	RTC_WaitForSynchro();
     1da:	f006 f8bb 	bl	6354 <RTC_WaitForSynchro>

	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
     1de:	f006 f8ab 	bl	6338 <RTC_WaitForLastTask>

	/* Enable the RTC Second */
	RTC_ITConfig(RTC_IT_SEC, ENABLE);
     1e2:	f04f 0001 	mov.w	r0, #1	; 0x1
     1e6:	f04f 0101 	mov.w	r1, #1	; 0x1
     1ea:	f005 ffd3 	bl	6194 <RTC_ITConfig>

	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
     1ee:	f006 f8a3 	bl	6338 <RTC_WaitForLastTask>

	/* Set RTC prescaler: set RTC period to 1sec */
	RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
     1f2:	f647 70ff 	movw	r0, #32767	; 0x7fff
     1f6:	f006 f84d 	bl	6294 <RTC_SetPrescaler>

	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
     1fa:	f006 f89d 	bl	6338 <RTC_WaitForLastTask>
}
     1fe:	46bd      	mov	sp, r7
     200:	bd80      	pop	{r7, pc}
     202:	46c0      	nop			(mov r8, r8)

00000204 <Time_Regulate>:
/**
 * @brief  Returns the time entered by user, using Hyperterminal.
 * @param  None
 * @retval Current time RTC counter value
 */
uint32_t Time_Regulate(void) {
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
	uint32_t Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
     20a:	f04f 03ff 	mov.w	r3, #255	; 0xff
     20e:	603b      	str	r3, [r7, #0]
     210:	f04f 03ff 	mov.w	r3, #255	; 0xff
     214:	607b      	str	r3, [r7, #4]
     216:	f04f 03ff 	mov.w	r3, #255	; 0xff
     21a:	60bb      	str	r3, [r7, #8]

	//printf("\r\n==============Time Settings===========");
	//printf("\r\n  Please Set Hours");

	//while (Tmp_HH == 0xFF) {
		Tmp_HH = 12; // USART_Scanf(23);
     21c:	f04f 030c 	mov.w	r3, #12	; 0xc
     220:	603b      	str	r3, [r7, #0]
	//}
	//printf(":  %d", Tmp_HH);
	//printf("\r\n  Please Set Minutes");
	//while (Tmp_MM == 0xFF) {
		Tmp_MM = 30; // USART_Scanf(59);
     222:	f04f 031e 	mov.w	r3, #30	; 0x1e
     226:	607b      	str	r3, [r7, #4]
	//}
	//printf(":  %d", Tmp_MM);
	//printf("\r\n  Please Set Seconds");
	//while (Tmp_SS == 0xFF) {
		Tmp_SS = 30; // USART_Scanf(59);
     228:	f04f 031e 	mov.w	r3, #30	; 0x1e
     22c:	60bb      	str	r3, [r7, #8]
	//}
	//printf(":  %d", Tmp_SS);

	/* Return the value to store in RTC counter register */
	return ((Tmp_HH * 3600 + Tmp_MM * 60 + Tmp_SS));
     22e:	683b      	ldr	r3, [r7, #0]
     230:	ea4f 1203 	mov.w	r2, r3, lsl #4
     234:	ea4f 1302 	mov.w	r3, r2, lsl #4
     238:	ebc2 0303 	rsb	r3, r2, r3
     23c:	ea4f 1203 	mov.w	r2, r3, lsl #4
     240:	ebc3 0102 	rsb	r1, r3, r2
     244:	687b      	ldr	r3, [r7, #4]
     246:	ea4f 0283 	mov.w	r2, r3, lsl #2
     24a:	ea4f 1302 	mov.w	r3, r2, lsl #4
     24e:	ebc2 0303 	rsb	r3, r2, r3
     252:	eb01 0203 	add.w	r2, r1, r3
     256:	68bb      	ldr	r3, [r7, #8]
     258:	4413      	add	r3, r2
}
     25a:	4618      	mov	r0, r3
     25c:	f107 070c 	add.w	r7, r7, #12	; 0xc
     260:	46bd      	mov	sp, r7
     262:	bc80      	pop	{r7}
     264:	4770      	bx	lr
     266:	46c0      	nop			(mov r8, r8)

00000268 <Time_Adjust>:
/**
 * @brief  Adjusts time.
 * @param  None
 * @retval None
 */
void Time_Adjust(void) {
     268:	b580      	push	{r7, lr}
     26a:	af00      	add	r7, sp, #0
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
     26c:	f006 f864 	bl	6338 <RTC_WaitForLastTask>
	/* Change the current time */
	RTC_SetCounter(Time_Regulate());
     270:	f7ff ffc8 	bl	204 <Time_Regulate>
     274:	4603      	mov	r3, r0
     276:	4618      	mov	r0, r3
     278:	f005 fff4 	bl	6264 <RTC_SetCounter>
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
     27c:	f006 f85c 	bl	6338 <RTC_WaitForLastTask>
}
     280:	46bd      	mov	sp, r7
     282:	bd80      	pop	{r7, pc}

00000284 <Time_Display>:
/**
 * @brief  Displays the current time.
 * @param  TimeVar: RTC counter value.
 * @retval None
 */
void Time_Display(uint32_t TimeVar) {
     284:	b580      	push	{r7, lr}
     286:	b087      	sub	sp, #28
     288:	af01      	add	r7, sp, #4
     28a:	60b8      	str	r0, [r7, #8]
	uint32_t THH = 0, TMM = 0, TSS = 0;
     28c:	f04f 0300 	mov.w	r3, #0	; 0x0
     290:	60fb      	str	r3, [r7, #12]
     292:	f04f 0300 	mov.w	r3, #0	; 0x0
     296:	613b      	str	r3, [r7, #16]
     298:	f04f 0300 	mov.w	r3, #0	; 0x0
     29c:	617b      	str	r3, [r7, #20]

	/* Compute  hours (may have rolled into date while powered down) */
	THH = (TimeVar % 86400) / 3600;
     29e:	68ba      	ldr	r2, [r7, #8]
     2a0:	4b25      	ldr	r3, [pc, #148]	(338 <Time_Display+0xb4>)
     2a2:	fba3 1302 	umull	r1, r3, r3, r2
     2a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
     2aa:	603b      	str	r3, [r7, #0]
     2ac:	4b23      	ldr	r3, [pc, #140]	(33c <Time_Display+0xb8>)
     2ae:	6839      	ldr	r1, [r7, #0]
     2b0:	fb03 f301 	mul.w	r3, r3, r1
     2b4:	ebc3 0302 	rsb	r3, r3, r2
     2b8:	603b      	str	r3, [r7, #0]
     2ba:	4b21      	ldr	r3, [pc, #132]	(340 <Time_Display+0xbc>)
     2bc:	683a      	ldr	r2, [r7, #0]
     2be:	fba3 2302 	umull	r2, r3, r3, r2
     2c2:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     2c6:	60fb      	str	r3, [r7, #12]
	/* Compute minutes */
	TMM = (TimeVar % 3600) / 60;
     2c8:	68b9      	ldr	r1, [r7, #8]
     2ca:	4b1d      	ldr	r3, [pc, #116]	(340 <Time_Display+0xbc>)
     2cc:	fba3 2301 	umull	r2, r3, r3, r1
     2d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     2d4:	607b      	str	r3, [r7, #4]
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
     2dc:	ea4f 1203 	mov.w	r2, r3, lsl #4
     2e0:	ebc3 0202 	rsb	r2, r3, r2
     2e4:	ea4f 1302 	mov.w	r3, r2, lsl #4
     2e8:	ebc2 0303 	rsb	r3, r2, r3
     2ec:	ebc3 0301 	rsb	r3, r3, r1
     2f0:	607b      	str	r3, [r7, #4]
     2f2:	4b14      	ldr	r3, [pc, #80]	(344 <Time_Display+0xc0>)
     2f4:	6879      	ldr	r1, [r7, #4]
     2f6:	fba3 1301 	umull	r1, r3, r3, r1
     2fa:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2fe:	613b      	str	r3, [r7, #16]
	/* Compute seconds */
	TSS = TimeVar % 60;
     300:	68b9      	ldr	r1, [r7, #8]
     302:	4b10      	ldr	r3, [pc, #64]	(344 <Time_Display+0xc0>)
     304:	fba3 2301 	umull	r2, r3, r3, r1
     308:	ea4f 1353 	mov.w	r3, r3, lsr #5
     30c:	ea4f 0283 	mov.w	r2, r3, lsl #2
     310:	ea4f 1302 	mov.w	r3, r2, lsl #4
     314:	ebc2 0303 	rsb	r3, r2, r3
     318:	ebc3 0301 	rsb	r3, r3, r1
     31c:	617b      	str	r3, [r7, #20]

	printf("Time: %02d:%02d:%02d\r", 0, THH, TMM, TSS);
     31e:	697b      	ldr	r3, [r7, #20]
     320:	9300      	str	r3, [sp, #0]
     322:	4809      	ldr	r0, [pc, #36]	(348 <Time_Display+0xc4>)
     324:	f04f 0100 	mov.w	r1, #0	; 0x0
     328:	68fa      	ldr	r2, [r7, #12]
     32a:	693b      	ldr	r3, [r7, #16]
     32c:	f7ff ff10 	bl	150 <printf>
}
     330:	f107 0718 	add.w	r7, r7, #24	; 0x18
     334:	46bd      	mov	sp, r7
     336:	bd80      	pop	{r7, pc}
     338:	c22e4507 	.word	0xc22e4507
     33c:	00015180 	.word	0x00015180
     340:	91a2b3c5 	.word	0x91a2b3c5
     344:	88888889 	.word	0x88888889
     348:	00006b28 	.word	0x00006b28

0000034c <rtcinit>:


void rtcinit(void) {
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0

	// enable RTC interupt routing in the NVIC
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Configure one bit for preemption priority */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
     352:	f44f 60c0 	mov.w	r0, #1536	; 0x600
     356:	f000 f88b 	bl	470 <NVIC_PriorityGroupConfig>

	/* Enable the RTC Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;
     35a:	f04f 0303 	mov.w	r3, #3	; 0x3
     35e:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     360:	f04f 0301 	mov.w	r3, #1	; 0x1
     364:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     366:	f04f 0300 	mov.w	r3, #0	; 0x0
     36a:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     36c:	f04f 0301 	mov.w	r3, #1	; 0x1
     370:	607b      	str	r3, [r7, #4]
	NVIC_Init(&NVIC_InitStructure);
     372:	463b      	mov	r3, r7
     374:	4618      	mov	r0, r3
     376:	f000 f88d 	bl	494 <NVIC_Init>


	if (BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5) {
     37a:	f04f 0004 	mov.w	r0, #4	; 0x4
     37e:	f005 febb 	bl	60f8 <BKP_ReadBackupRegister>
     382:	4603      	mov	r3, r0
     384:	461a      	mov	r2, r3
     386:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
     38a:	429a      	cmp	r2, r3
     38c:	d00a      	beq.n	3a4 <rtcinit+0x58>
		 the first time the program is executed) */

		// printf("\r\n\n RTC not yet configured....");

		/* RTC Configuration */
		RTC_Configuration();
     38e:	f7ff ff03 	bl	198 <RTC_Configuration>

		// printf("\r\n RTC configured....");

		/* Adjust time by values entred by the user on the hyperterminal */
		Time_Adjust();
     392:	f7ff ff69 	bl	268 <Time_Adjust>

		BKP_WriteBackupRegister(BKP_DR1, 0xA5A5);
     396:	f04f 0004 	mov.w	r0, #4	; 0x4
     39a:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
     39e:	f005 fe8f 	bl	60c0 <BKP_WriteBackupRegister>
     3a2:	e021      	b.n	3e8 <rtcinit+0x9c>
	} else {
		/* Check if the Power On Reset flag is set */
		if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET) {
     3a4:	f04f 007b 	mov.w	r0, #123	; 0x7b
     3a8:	f003 ffdc 	bl	4364 <RCC_GetFlagStatus>
     3ac:	4603      	mov	r3, r0
     3ae:	2b00      	cmp	r3, #0
     3b0:	d003      	beq.n	3ba <rtcinit+0x6e>
			printf("\r\n\n Power On Reset occurred....");
     3b2:	480f      	ldr	r0, [pc, #60]	(3f0 <rtcinit+0xa4>)
     3b4:	f7ff fecc 	bl	150 <printf>
     3b8:	e009      	b.n	3ce <rtcinit+0x82>
		}
		/* Check if the Pin Reset flag is set */
		else if (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET) {
     3ba:	f04f 007a 	mov.w	r0, #122	; 0x7a
     3be:	f003 ffd1 	bl	4364 <RCC_GetFlagStatus>
     3c2:	4603      	mov	r3, r0
     3c4:	2b00      	cmp	r3, #0
     3c6:	d002      	beq.n	3ce <rtcinit+0x82>
			printf("\r\n\n External Reset occurred....");
     3c8:	480a      	ldr	r0, [pc, #40]	(3f4 <rtcinit+0xa8>)
     3ca:	f7ff fec1 	bl	150 <printf>
		}

		printf("\r\n No need to configure RTC....");
     3ce:	480a      	ldr	r0, [pc, #40]	(3f8 <rtcinit+0xac>)
     3d0:	f7ff febe 	bl	150 <printf>
		/* Wait for RTC registers synchronization */
		RTC_WaitForSynchro();
     3d4:	f005 ffbe 	bl	6354 <RTC_WaitForSynchro>

		/* Enable the RTC Second */
		RTC_ITConfig(RTC_IT_SEC, ENABLE);
     3d8:	f04f 0001 	mov.w	r0, #1	; 0x1
     3dc:	f04f 0101 	mov.w	r1, #1	; 0x1
     3e0:	f005 fed8 	bl	6194 <RTC_ITConfig>
		/* Wait until last write operation on RTC registers has finished */
		RTC_WaitForLastTask();
     3e4:	f005 ffa8 	bl	6338 <RTC_WaitForLastTask>

	}
}
     3e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
     3ec:	46bd      	mov	sp, r7
     3ee:	bd80      	pop	{r7, pc}
     3f0:	00006b40 	.word	0x00006b40
     3f4:	00006b60 	.word	0x00006b60
     3f8:	00006b80 	.word	0x00006b80

000003fc <main>:
 * Description    : Main routine.
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
int main(void) {
     3fc:	b580      	push	{r7, lr}
     3fe:	af00      	add	r7, sp, #0
	Set_System();
     400:	f000 f90c 	bl	61c <Set_System>
	Set_USBClock();
     404:	f000 f982 	bl	70c <Set_USBClock>
	USB_Interrupts_Config();
     408:	f000 f9b6 	bl	778 <USB_Interrupts_Config>
	USB_Init();
     40c:	f000 fb72 	bl	af4 <USB_Init>

	rtcinit();
     410:	f7ff ff9c 	bl	34c <rtcinit>


	while (1) {
		if ((count_out != 0) && (bDeviceState == CONFIGURED)) {
     414:	4b12      	ldr	r3, [pc, #72]	(460 <main+0x64>)
     416:	681b      	ldr	r3, [r3, #0]
     418:	2b00      	cmp	r3, #0
     41a:	d00e      	beq.n	43a <main+0x3e>
     41c:	4b11      	ldr	r3, [pc, #68]	(464 <main+0x68>)
     41e:	681b      	ldr	r3, [r3, #0]
     420:	2b05      	cmp	r3, #5
     422:	d10a      	bne.n	43a <main+0x3e>
			USB_To_USART_Send_Data(&buffer_out[0], count_out);
     424:	4b0e      	ldr	r3, [pc, #56]	(460 <main+0x64>)
     426:	681b      	ldr	r3, [r3, #0]
     428:	b2db      	uxtb	r3, r3
     42a:	480f      	ldr	r0, [pc, #60]	(468 <main+0x6c>)
     42c:	4619      	mov	r1, r3
     42e:	f000 fa95 	bl	95c <USB_To_USART_Send_Data>
			count_out = 0;
     432:	4a0b      	ldr	r2, [pc, #44]	(460 <main+0x64>)
     434:	f04f 0300 	mov.w	r3, #0	; 0x0
     438:	6013      	str	r3, [r2, #0]
		}

		/* If 1s has passed */
		if ((TimeDisplay == 1) && (bDeviceState == CONFIGURED)) {
     43a:	4b0c      	ldr	r3, [pc, #48]	(46c <main+0x70>)
     43c:	681b      	ldr	r3, [r3, #0]
     43e:	2b01      	cmp	r3, #1
     440:	d1e8      	bne.n	414 <main+0x18>
     442:	4b08      	ldr	r3, [pc, #32]	(464 <main+0x68>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	2b05      	cmp	r3, #5
     448:	d1e4      	bne.n	414 <main+0x18>
			TimeDisplay = 0;
     44a:	4b08      	ldr	r3, [pc, #32]	(46c <main+0x70>)
     44c:	f04f 0200 	mov.w	r2, #0	; 0x0
     450:	601a      	str	r2, [r3, #0]
			/* Display current time */
			Time_Display(RTC_GetCounter());
     452:	f005 feed 	bl	6230 <RTC_GetCounter>
     456:	4603      	mov	r3, r0
     458:	4618      	mov	r0, r3
     45a:	f7ff ff13 	bl	284 <Time_Display>
     45e:	e7d9      	b.n	414 <main+0x18>
     460:	20000214 	.word	0x20000214
     464:	20000268 	.word	0x20000268
     468:	2000021c 	.word	0x2000021c
     46c:	200000fc 	.word	0x200000fc

00000470 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
     470:	b480      	push	{r7}
     472:	b081      	sub	sp, #4
     474:	af00      	add	r7, sp, #0
     476:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
     478:	4a05      	ldr	r2, [pc, #20]	(490 <NVIC_PriorityGroupConfig+0x20>)
     47a:	683b      	ldr	r3, [r7, #0]
     47c:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
     480:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     484:	60d3      	str	r3, [r2, #12]
}
     486:	f107 0704 	add.w	r7, r7, #4	; 0x4
     48a:	46bd      	mov	sp, r7
     48c:	bc80      	pop	{r7}
     48e:	4770      	bx	lr
     490:	e000ed00 	.word	0xe000ed00

00000494 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
     494:	b480      	push	{r7}
     496:	b084      	sub	sp, #16
     498:	af00      	add	r7, sp, #0
     49a:	6038      	str	r0, [r7, #0]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
     49c:	f04f 0300 	mov.w	r3, #0	; 0x0
     4a0:	607b      	str	r3, [r7, #4]
     4a2:	f04f 0300 	mov.w	r3, #0	; 0x0
     4a6:	60bb      	str	r3, [r7, #8]
     4a8:	f04f 030f 	mov.w	r3, #15	; 0xf
     4ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     4ae:	683b      	ldr	r3, [r7, #0]
     4b0:	685b      	ldr	r3, [r3, #4]
     4b2:	2b00      	cmp	r3, #0
     4b4:	d041      	beq.n	53a <NVIC_Init+0xa6>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
     4b6:	4b2d      	ldr	r3, [pc, #180]	(56c <NVIC_Init+0xd8>)
     4b8:	68db      	ldr	r3, [r3, #12]
     4ba:	ea6f 0303 	mvn.w	r3, r3
     4be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     4c2:	ea4f 2313 	mov.w	r3, r3, lsr #8
     4c6:	607b      	str	r3, [r7, #4]
    tmppre = (0x4 - tmppriority);
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	f1c3 0304 	rsb	r3, r3, #4	; 0x4
     4ce:	60bb      	str	r3, [r7, #8]
    tmpsub = tmpsub >> tmppriority;
     4d0:	687a      	ldr	r2, [r7, #4]
     4d2:	68fb      	ldr	r3, [r7, #12]
     4d4:	fa23 f302 	lsr.w	r3, r3, r2
     4d8:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     4da:	683b      	ldr	r3, [r7, #0]
     4dc:	785b      	ldrb	r3, [r3, #1]
     4de:	461a      	mov	r2, r3
     4e0:	68bb      	ldr	r3, [r7, #8]
     4e2:	fa02 f303 	lsl.w	r3, r2, r3
     4e6:	607b      	str	r3, [r7, #4]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     4e8:	683b      	ldr	r3, [r7, #0]
     4ea:	789b      	ldrb	r3, [r3, #2]
     4ec:	461a      	mov	r2, r3
     4ee:	68fb      	ldr	r3, [r7, #12]
     4f0:	ea02 0203 	and.w	r2, r2, r3
     4f4:	687b      	ldr	r3, [r7, #4]
     4f6:	ea43 0302 	orr.w	r3, r3, r2
     4fa:	607b      	str	r3, [r7, #4]
    tmppriority = tmppriority << 0x04;
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
     502:	607b      	str	r3, [r7, #4]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     504:	491a      	ldr	r1, [pc, #104]	(570 <NVIC_Init+0xdc>)
     506:	683b      	ldr	r3, [r7, #0]
     508:	781b      	ldrb	r3, [r3, #0]
     50a:	461a      	mov	r2, r3
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	b2db      	uxtb	r3, r3
     510:	440a      	add	r2, r1
     512:	f882 3300 	strb.w	r3, [r2, #768]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     516:	4816      	ldr	r0, [pc, #88]	(570 <NVIC_Init+0xdc>)
     518:	683b      	ldr	r3, [r7, #0]
     51a:	781b      	ldrb	r3, [r3, #0]
     51c:	ea4f 1353 	mov.w	r3, r3, lsr #5
     520:	b2db      	uxtb	r3, r3
     522:	4619      	mov	r1, r3
     524:	683b      	ldr	r3, [r7, #0]
     526:	781b      	ldrb	r3, [r3, #0]
     528:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     52c:	f04f 0301 	mov.w	r3, #1	; 0x1
     530:	fa03 f302 	lsl.w	r3, r3, r2
     534:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     538:	e013      	b.n	562 <NVIC_Init+0xce>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     53a:	f8df 0034 	ldr.w	r0, [pc, #52]	; 570 <NVIC_Init+0xdc>
     53e:	683b      	ldr	r3, [r7, #0]
     540:	781b      	ldrb	r3, [r3, #0]
     542:	ea4f 1353 	mov.w	r3, r3, lsr #5
     546:	b2db      	uxtb	r3, r3
     548:	4619      	mov	r1, r3
     54a:	683b      	ldr	r3, [r7, #0]
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     552:	f04f 0301 	mov.w	r3, #1	; 0x1
     556:	fa03 f202 	lsl.w	r2, r3, r2
     55a:	f101 0320 	add.w	r3, r1, #32	; 0x20
     55e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
     562:	f107 0710 	add.w	r7, r7, #16	; 0x10
     566:	46bd      	mov	sp, r7
     568:	bc80      	pop	{r7}
     56a:	4770      	bx	lr
     56c:	00          	.byte	0x00
     56d:	ed          	.byte	0xed
     56e:	e000      	.short	0xe000
     570:	e000e100 	.word	0xe000e100

00000574 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
     574:	b480      	push	{r7}
     576:	b082      	sub	sp, #8
     578:	af00      	add	r7, sp, #0
     57a:	6078      	str	r0, [r7, #4]
     57c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
     57e:	4907      	ldr	r1, [pc, #28]	(59c <NVIC_SetVectorTable+0x28>)
     580:	683b      	ldr	r3, [r7, #0]
     582:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     58a:	687a      	ldr	r2, [r7, #4]
     58c:	ea43 0302 	orr.w	r3, r3, r2
     590:	608b      	str	r3, [r1, #8]
}
     592:	f107 0708 	add.w	r7, r7, #8	; 0x8
     596:	46bd      	mov	sp, r7
     598:	bc80      	pop	{r7}
     59a:	4770      	bx	lr
     59c:	e000ed00 	.word	0xe000ed00

000005a0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
     5a0:	b480      	push	{r7}
     5a2:	b082      	sub	sp, #8
     5a4:	af00      	add	r7, sp, #0
     5a6:	4603      	mov	r3, r0
     5a8:	6039      	str	r1, [r7, #0]
     5aa:	713b      	strb	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
     5ac:	683b      	ldr	r3, [r7, #0]
     5ae:	2b00      	cmp	r3, #0
     5b0:	d007      	beq.n	5c2 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
     5b2:	490b      	ldr	r1, [pc, #44]	(5e0 <NVIC_SystemLPConfig+0x40>)
     5b4:	4b0a      	ldr	r3, [pc, #40]	(5e0 <NVIC_SystemLPConfig+0x40>)
     5b6:	691a      	ldr	r2, [r3, #16]
     5b8:	793b      	ldrb	r3, [r7, #4]
     5ba:	ea42 0303 	orr.w	r3, r2, r3
     5be:	610b      	str	r3, [r1, #16]
     5c0:	e008      	b.n	5d4 <NVIC_SystemLPConfig+0x34>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
     5c2:	4907      	ldr	r1, [pc, #28]	(5e0 <NVIC_SystemLPConfig+0x40>)
     5c4:	4b06      	ldr	r3, [pc, #24]	(5e0 <NVIC_SystemLPConfig+0x40>)
     5c6:	691a      	ldr	r2, [r3, #16]
     5c8:	793b      	ldrb	r3, [r7, #4]
     5ca:	ea6f 0303 	mvn.w	r3, r3
     5ce:	ea02 0303 	and.w	r3, r2, r3
     5d2:	610b      	str	r3, [r1, #16]
  }
}
     5d4:	f107 0708 	add.w	r7, r7, #8	; 0x8
     5d8:	46bd      	mov	sp, r7
     5da:	bc80      	pop	{r7}
     5dc:	4770      	bx	lr
     5de:	46c0      	nop			(mov r8, r8)
     5e0:	e000ed00 	.word	0xe000ed00

000005e4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
     5e4:	b480      	push	{r7}
     5e6:	b081      	sub	sp, #4
     5e8:	af00      	add	r7, sp, #0
     5ea:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	2b04      	cmp	r3, #4
     5f0:	d106      	bne.n	600 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
     5f2:	4a09      	ldr	r2, [pc, #36]	(618 <SysTick_CLKSourceConfig+0x34>)
     5f4:	4b08      	ldr	r3, [pc, #32]	(618 <SysTick_CLKSourceConfig+0x34>)
     5f6:	681b      	ldr	r3, [r3, #0]
     5f8:	f043 0304 	orr.w	r3, r3, #4	; 0x4
     5fc:	6013      	str	r3, [r2, #0]
     5fe:	e005      	b.n	60c <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
     600:	4a05      	ldr	r2, [pc, #20]	(618 <SysTick_CLKSourceConfig+0x34>)
     602:	4b05      	ldr	r3, [pc, #20]	(618 <SysTick_CLKSourceConfig+0x34>)
     604:	681b      	ldr	r3, [r3, #0]
     606:	f023 0304 	bic.w	r3, r3, #4	; 0x4
     60a:	6013      	str	r3, [r2, #0]
  }
}
     60c:	f107 0704 	add.w	r7, r7, #4	; 0x4
     610:	46bd      	mov	sp, r7
     612:	bc80      	pop	{r7}
     614:	4770      	bx	lr
     616:	46c0      	nop			(mov r8, r8)
     618:	e000e010 	.word	0xe000e010

0000061c <Set_System>:
* Description    : Configures Main system clocks & power
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_System(void)
{
     61c:	b580      	push	{r7, lr}
     61e:	b083      	sub	sp, #12
     620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------------------------*/
  /* RCC system reset(for debug purpose) */
  RCC_DeInit();
     622:	f003 fafb 	bl	3c1c <RCC_DeInit>

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
     626:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     62a:	f003 fb25 	bl	3c78 <RCC_HSEConfig>

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
     62e:	f003 fb53 	bl	3cd8 <RCC_WaitForHSEStartUp>
     632:	4602      	mov	r2, r0
     634:	4b33      	ldr	r3, [pc, #204]	(704 <Set_System+0xe8>)
     636:	601a      	str	r2, [r3, #0]

  if (HSEStartUpStatus == SUCCESS)
     638:	4b32      	ldr	r3, [pc, #200]	(704 <Set_System+0xe8>)
     63a:	681b      	ldr	r3, [r3, #0]
     63c:	2b01      	cmp	r3, #1
     63e:	d15f      	bne.n	700 <Set_System+0xe4>
  {
    /* Enable Prefetch Buffer */
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
     640:	f04f 0010 	mov.w	r0, #16	; 0x10
     644:	f003 ff44 	bl	44d0 <FLASH_PrefetchBufferCmd>

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);
     648:	f04f 0002 	mov.w	r0, #2	; 0x2
     64c:	f003 ff0a 	bl	4464 <FLASH_SetLatency>

    /* HCLK = SYSCLK */
    RCC_HCLKConfig(RCC_SYSCLK_Div1);
     650:	f04f 0000 	mov.w	r0, #0	; 0x0
     654:	f003 fbfc 	bl	3e50 <RCC_HCLKConfig>

    /* PCLK2 = HCLK */

    RCC_PCLK2Config(RCC_HCLK_Div1);
     658:	f04f 0000 	mov.w	r0, #0	; 0x0
     65c:	f003 fc34 	bl	3ec8 <RCC_PCLK2Config>

    /* PCLK1 = HCLK/2 */
    RCC_PCLK1Config(RCC_HCLK_Div2);
     660:	f44f 6080 	mov.w	r0, #1024	; 0x400
     664:	f003 fc12 	bl	3e8c <RCC_PCLK1Config>
    /* PLL configuration: PLLCLK = (PLL2 / 5) * 9 = 72 MHz */
    RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div5);
    RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_9);
#else
    /* PLLCLK = 8MHz * 9 = 72 MHz */
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
     668:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     66c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
     670:	f003 fb92 	bl	3d98 <RCC_PLLConfig>
#endif

    /* Enable PLL */
    RCC_PLLCmd(ENABLE);
     674:	f04f 0001 	mov.w	r0, #1	; 0x1
     678:	f003 fbb0 	bl	3ddc <RCC_PLLCmd>

    /* Wait till PLL is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
     67c:	f04f 0039 	mov.w	r0, #57	; 0x39
     680:	f003 fe70 	bl	4364 <RCC_GetFlagStatus>
     684:	4603      	mov	r3, r0
     686:	2b00      	cmp	r3, #0
     688:	d0f8      	beq.n	67c <Set_System+0x60>
    {
    }

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
     68a:	f04f 0002 	mov.w	r0, #2	; 0x2
     68e:	f003 fbb3 	bl	3df8 <RCC_SYSCLKConfig>

    /* Wait till PLL is used as system clock source */
    while(RCC_GetSYSCLKSource() != 0x08)
     692:	f003 fbcf 	bl	3e34 <RCC_GetSYSCLKSource>
     696:	4603      	mov	r3, r0
     698:	2b08      	cmp	r3, #8
     69a:	d1fa      	bne.n	692 <Set_System+0x76>
    {
    }
  }

  /* Enable USB_DISCONNECT GPIO clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_DISCONNECT, ENABLE);
     69c:	f04f 0010 	mov.w	r0, #16	; 0x10
     6a0:	f04f 0101 	mov.w	r1, #1	; 0x1
     6a4:	f003 fdb2 	bl	420c <RCC_APB2PeriphClockCmd>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     6a8:	f04f 0001 	mov.w	r0, #1	; 0x1
     6ac:	f04f 0101 	mov.w	r1, #1	; 0x1
     6b0:	f003 fdac 	bl	420c <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA, ENABLE);
     6b4:	f04f 0014 	mov.w	r0, #20	; 0x14
     6b8:	f04f 0101 	mov.w	r1, #1	; 0x1
     6bc:	f003 fda6 	bl	420c <RCC_APB2PeriphClockCmd>


  /* Configure USB pull-up pin - PC11 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
     6c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
     6c4:	803b      	strh	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     6c6:	f04f 0303 	mov.w	r3, #3	; 0x3
     6ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
     6cc:	f04f 0314 	mov.w	r3, #20	; 0x14
     6d0:	60bb      	str	r3, [r7, #8]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
     6d2:	463b      	mov	r3, r7
     6d4:	480c      	ldr	r0, [pc, #48]	(708 <Set_System+0xec>)
     6d6:	4619      	mov	r1, r3
     6d8:	f004 fbe0 	bl	4e9c <GPIO_Init>
  /* Configure status LED - PC12 */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
     6dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e0:	803b      	strh	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     6e2:	f04f 0310 	mov.w	r3, #16	; 0x10
     6e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     6e8:	f04f 0303 	mov.w	r3, #3	; 0x3
     6ec:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
     6ee:	463b      	mov	r3, r7
     6f0:	4805      	ldr	r0, [pc, #20]	(708 <Set_System+0xec>)
     6f2:	4619      	mov	r1, r3
     6f4:	f004 fbd2 	bl	4e9c <GPIO_Init>
       User can add here some code to deal with this error */

    /* Go to infinite loop */
    while (1)
    {
    }
     6f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     6fc:	46bd      	mov	sp, r7
     6fe:	bd80      	pop	{r7, pc}
     700:	e7fe      	b.n	700 <Set_System+0xe4>
     702:	46c0      	nop			(mov r8, r8)
     704:	20000140 	.word	0x20000140
     708:	40011000 	.word	0x40011000

0000070c <Set_USBClock>:
* Description    : Configures USB Clock input (48MHz)
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_USBClock(void)
{
     70c:	b580      	push	{r7, lr}
     70e:	af00      	add	r7, sp, #0

  /* Enable the USB clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_OTG_FS, ENABLE) ;
#else
  /* Select USBCLK source */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
     710:	f04f 0000 	mov.w	r0, #0	; 0x0
     714:	f003 fc1e 	bl	3f54 <RCC_USBCLKConfig>

  /* Enable the USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
     718:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
     71c:	f04f 0101 	mov.w	r1, #1	; 0x1
     720:	f003 fd94 	bl	424c <RCC_APB1PeriphClockCmd>
#endif /* STM32F10X_CL */
}
     724:	46bd      	mov	sp, r7
     726:	bd80      	pop	{r7, pc}

00000728 <Enter_LowPowerMode>:
* Description    : Power-off system clocks and power while entering suspend mode
* Input          : None.
* Return         : None.
*******************************************************************************/
void Enter_LowPowerMode(void)
{
     728:	b480      	push	{r7}
     72a:	af00      	add	r7, sp, #0
  /* Set the device state to suspend */
  bDeviceState = SUSPENDED;
     72c:	4a03      	ldr	r2, [pc, #12]	(73c <Enter_LowPowerMode+0x14>)
     72e:	f04f 0303 	mov.w	r3, #3	; 0x3
     732:	6013      	str	r3, [r2, #0]
}
     734:	46bd      	mov	sp, r7
     736:	bc80      	pop	{r7}
     738:	4770      	bx	lr
     73a:	46c0      	nop			(mov r8, r8)
     73c:	20000268 	.word	0x20000268

00000740 <Leave_LowPowerMode>:
* Description    : Restores system clocks and power while exiting suspend mode
* Input          : None.
* Return         : None.
*******************************************************************************/
void Leave_LowPowerMode(void)
{
     740:	b480      	push	{r7}
     742:	b081      	sub	sp, #4
     744:	af00      	add	r7, sp, #0
  DEVICE_INFO *pInfo = &Device_Info;
     746:	4b0a      	ldr	r3, [pc, #40]	(770 <Leave_LowPowerMode+0x30>)
     748:	603b      	str	r3, [r7, #0]

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
     74a:	683b      	ldr	r3, [r7, #0]
     74c:	7c9b      	ldrb	r3, [r3, #18]
     74e:	2b00      	cmp	r3, #0
     750:	d004      	beq.n	75c <Leave_LowPowerMode+0x1c>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
     752:	4a08      	ldr	r2, [pc, #32]	(774 <Leave_LowPowerMode+0x34>)
     754:	f04f 0305 	mov.w	r3, #5	; 0x5
     758:	6013      	str	r3, [r2, #0]
     75a:	e003      	b.n	764 <Leave_LowPowerMode+0x24>
  }
  else
  {
    bDeviceState = ATTACHED;
     75c:	4a05      	ldr	r2, [pc, #20]	(774 <Leave_LowPowerMode+0x34>)
     75e:	f04f 0301 	mov.w	r3, #1	; 0x1
     762:	6013      	str	r3, [r2, #0]
  }
}
     764:	f107 0704 	add.w	r7, r7, #4	; 0x4
     768:	46bd      	mov	sp, r7
     76a:	bc80      	pop	{r7}
     76c:	4770      	bx	lr
     76e:	46c0      	nop			(mov r8, r8)
     770:	200001d4 	.word	0x200001d4
     774:	20000268 	.word	0x20000268

00000778 <USB_Interrupts_Config>:
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
     778:	b580      	push	{r7, lr}
     77a:	b082      	sub	sp, #8
     77c:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
     77e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
     782:	f7ff fe75 	bl	470 <NVIC_PriorityGroupConfig>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
#else
  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
     786:	f04f 0314 	mov.w	r3, #20	; 0x14
     78a:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
     78c:	f04f 0300 	mov.w	r3, #0	; 0x0
     790:	707b      	strb	r3, [r7, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     792:	f04f 0300 	mov.w	r3, #0	; 0x0
     796:	70bb      	strb	r3, [r7, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     798:	f04f 0301 	mov.w	r3, #1	; 0x1
     79c:	607b      	str	r3, [r7, #4]
  NVIC_Init(&NVIC_InitStructure);
     79e:	463b      	mov	r3, r7
     7a0:	4618      	mov	r0, r3
     7a2:	f7ff fe77 	bl	494 <NVIC_Init>
#endif /* STM32F10X_CL */

  /* Enable USART Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = EVAL_COM1_IRQn;
     7a6:	f04f 0325 	mov.w	r3, #37	; 0x25
     7aa:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
     7ac:	f04f 0301 	mov.w	r3, #1	; 0x1
     7b0:	707b      	strb	r3, [r7, #1]
  NVIC_Init(&NVIC_InitStructure);
     7b2:	463b      	mov	r3, r7
     7b4:	4618      	mov	r0, r3
     7b6:	f7ff fe6d 	bl	494 <NVIC_Init>
}
     7ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
     7be:	46bd      	mov	sp, r7
     7c0:	bd80      	pop	{r7, pc}
     7c2:	46c0      	nop			(mov r8, r8)

000007c4 <USB_Cable_Config>:
* GPIOC Pin 12 is the flashing LED
* GPIOC Pin 11 is USB pullup
*
*/
void USB_Cable_Config (FunctionalState NewState)
{
     7c4:	b580      	push	{r7, lr}
     7c6:	b081      	sub	sp, #4
     7c8:	af00      	add	r7, sp, #0
     7ca:	6038      	str	r0, [r7, #0]
  if (NewState != DISABLE)
     7cc:	683b      	ldr	r3, [r7, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d005      	beq.n	7de <USB_Cable_Config+0x1a>
  {
	//GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_RESET);
    GPIO_ResetBits(GPIOC, GPIO_Pin_11);
     7d2:	4807      	ldr	r0, [pc, #28]	(7f0 <USB_Cable_Config+0x2c>)
     7d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7d8:	f004 fcc0 	bl	515c <GPIO_ResetBits>
     7dc:	e004      	b.n	7e8 <USB_Cable_Config+0x24>
  }
  else
  {
    GPIO_SetBits(GPIOC, GPIO_Pin_11);
     7de:	4804      	ldr	r0, [pc, #16]	(7f0 <USB_Cable_Config+0x2c>)
     7e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7e4:	f004 fcac 	bl	5140 <GPIO_SetBits>
    //GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
  }

}
     7e8:	f107 0704 	add.w	r7, r7, #4	; 0x4
     7ec:	46bd      	mov	sp, r7
     7ee:	bd80      	pop	{r7, pc}
     7f0:	40011000 	.word	0x40011000

000007f4 <USART_Config_Default>:
* Description    :  configure the EVAL_COM1 with default values.
* Input          :  None.
* Return         :  None.
*******************************************************************************/
void USART_Config_Default(void)
{
     7f4:	b580      	push	{r7, lr}
     7f6:	af00      	add	r7, sp, #0
        - One Stop Bit
        - Parity Odd
        - Hardware flow control desabled
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 9600;
     7f8:	4a12      	ldr	r2, [pc, #72]	(844 <USART_Config_Default+0x50>)
     7fa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     7fe:	6013      	str	r3, [r2, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     800:	4a10      	ldr	r2, [pc, #64]	(844 <USART_Config_Default+0x50>)
     802:	f04f 0300 	mov.w	r3, #0	; 0x0
     806:	8093      	strh	r3, [r2, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
     808:	4a0e      	ldr	r2, [pc, #56]	(844 <USART_Config_Default+0x50>)
     80a:	f04f 0300 	mov.w	r3, #0	; 0x0
     80e:	80d3      	strh	r3, [r2, #6]
  USART_InitStructure.USART_Parity = USART_Parity_Odd;
     810:	4a0c      	ldr	r2, [pc, #48]	(844 <USART_Config_Default+0x50>)
     812:	f44f 63c0 	mov.w	r3, #1536	; 0x600
     816:	8113      	strh	r3, [r2, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     818:	4a0a      	ldr	r2, [pc, #40]	(844 <USART_Config_Default+0x50>)
     81a:	f04f 0300 	mov.w	r3, #0	; 0x0
     81e:	8193      	strh	r3, [r2, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     820:	4a08      	ldr	r2, [pc, #32]	(844 <USART_Config_Default+0x50>)
     822:	f04f 030c 	mov.w	r3, #12	; 0xc
     826:	8153      	strh	r3, [r2, #10]

  /* Configure and enable the USART */
  USART_Init(EVAL_COM1, &USART_InitStructure);
     828:	4807      	ldr	r0, [pc, #28]	(848 <USART_Config_Default+0x54>)
     82a:	4906      	ldr	r1, [pc, #24]	(844 <USART_Config_Default+0x50>)
     82c:	f004 fe5e 	bl	54ec <USART_Init>

  /* Enable the USART Receive interrupt */
  USART_ITConfig(EVAL_COM1, USART_IT_RXNE, ENABLE);
     830:	4805      	ldr	r0, [pc, #20]	(848 <USART_Config_Default+0x54>)
     832:	f240 5125 	movw	r1, #1317	; 0x525
     836:	f04f 0201 	mov.w	r2, #1	; 0x1
     83a:	f004 ff9b 	bl	5774 <USART_ITConfig>
}
     83e:	46bd      	mov	sp, r7
     840:	bd80      	pop	{r7, pc}
     842:	46c0      	nop			(mov r8, r8)
     844:	20000144 	.word	0x20000144
     848:	40013800 	.word	0x40013800

0000084c <USART_Config>:
* Return         :  Configuration status
                    TRUE : configuration done with success
                    FALSE : configuration aborted.
*******************************************************************************/
bool USART_Config(void)
{
     84c:	b580      	push	{r7, lr}
     84e:	b084      	sub	sp, #16
     850:	af00      	add	r7, sp, #0

  /* set the Stop bit*/
  switch (linecoding.format)
     852:	4b3f      	ldr	r3, [pc, #252]	(950 <USART_Config+0x104>)
     854:	791b      	ldrb	r3, [r3, #4]
     856:	603b      	str	r3, [r7, #0]
     858:	683b      	ldr	r3, [r7, #0]
     85a:	2b01      	cmp	r3, #1
     85c:	d00a      	beq.n	874 <USART_Config+0x28>
     85e:	683b      	ldr	r3, [r7, #0]
     860:	2b02      	cmp	r3, #2
     862:	d00c      	beq.n	87e <USART_Config+0x32>
     864:	683b      	ldr	r3, [r7, #0]
     866:	2b00      	cmp	r3, #0
     868:	d10e      	bne.n	888 <USART_Config+0x3c>
  {
    case 0:
      USART_InitStructure.USART_StopBits = USART_StopBits_1;
     86a:	4b3a      	ldr	r3, [pc, #232]	(954 <USART_Config+0x108>)
     86c:	f04f 0200 	mov.w	r2, #0	; 0x0
     870:	80da      	strh	r2, [r3, #6]
     872:	e00f      	b.n	894 <USART_Config+0x48>
      break;
    case 1:
      USART_InitStructure.USART_StopBits = USART_StopBits_1_5;
     874:	4b37      	ldr	r3, [pc, #220]	(954 <USART_Config+0x108>)
     876:	f44f 5240 	mov.w	r2, #12288	; 0x3000
     87a:	80da      	strh	r2, [r3, #6]
     87c:	e00a      	b.n	894 <USART_Config+0x48>
      break;
    case 2:
      USART_InitStructure.USART_StopBits = USART_StopBits_2;
     87e:	4b35      	ldr	r3, [pc, #212]	(954 <USART_Config+0x108>)
     880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     884:	80da      	strh	r2, [r3, #6]
     886:	e005      	b.n	894 <USART_Config+0x48>
      break;
    default :
    {
      USART_Config_Default();
     888:	f7ff ffb4 	bl	7f4 <USART_Config_Default>
      return (FALSE);
     88c:	f04f 0300 	mov.w	r3, #0	; 0x0
     890:	607b      	str	r3, [r7, #4]
     892:	e056      	b.n	942 <USART_Config+0xf6>
    }
  }

  /* set the parity bit*/
  switch (linecoding.paritytype)
     894:	4b2e      	ldr	r3, [pc, #184]	(950 <USART_Config+0x104>)
     896:	795b      	ldrb	r3, [r3, #5]
     898:	60bb      	str	r3, [r7, #8]
     89a:	68bb      	ldr	r3, [r7, #8]
     89c:	2b01      	cmp	r3, #1
     89e:	d00a      	beq.n	8b6 <USART_Config+0x6a>
     8a0:	68bb      	ldr	r3, [r7, #8]
     8a2:	2b02      	cmp	r3, #2
     8a4:	d00c      	beq.n	8c0 <USART_Config+0x74>
     8a6:	68bb      	ldr	r3, [r7, #8]
     8a8:	2b00      	cmp	r3, #0
     8aa:	d10e      	bne.n	8ca <USART_Config+0x7e>
  {
    case 0:
      USART_InitStructure.USART_Parity = USART_Parity_No;
     8ac:	4b29      	ldr	r3, [pc, #164]	(954 <USART_Config+0x108>)
     8ae:	f04f 0200 	mov.w	r2, #0	; 0x0
     8b2:	811a      	strh	r2, [r3, #8]
     8b4:	e00f      	b.n	8d6 <USART_Config+0x8a>
      break;
    case 1:
      USART_InitStructure.USART_Parity = USART_Parity_Even;
     8b6:	4b27      	ldr	r3, [pc, #156]	(954 <USART_Config+0x108>)
     8b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
     8bc:	811a      	strh	r2, [r3, #8]
     8be:	e00a      	b.n	8d6 <USART_Config+0x8a>
      break;
    case 2:
      USART_InitStructure.USART_Parity = USART_Parity_Odd;
     8c0:	4b24      	ldr	r3, [pc, #144]	(954 <USART_Config+0x108>)
     8c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
     8c6:	811a      	strh	r2, [r3, #8]
     8c8:	e005      	b.n	8d6 <USART_Config+0x8a>
      break;
    default :
    {
      USART_Config_Default();
     8ca:	f7ff ff93 	bl	7f4 <USART_Config_Default>
      return (FALSE);
     8ce:	f04f 0300 	mov.w	r3, #0	; 0x0
     8d2:	607b      	str	r3, [r7, #4]
     8d4:	e035      	b.n	942 <USART_Config+0xf6>
    }
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (linecoding.datatype)
     8d6:	4b1e      	ldr	r3, [pc, #120]	(950 <USART_Config+0x104>)
     8d8:	799b      	ldrb	r3, [r3, #6]
     8da:	60fb      	str	r3, [r7, #12]
     8dc:	68fb      	ldr	r3, [r7, #12]
     8de:	2b07      	cmp	r3, #7
     8e0:	d003      	beq.n	8ea <USART_Config+0x9e>
     8e2:	68fb      	ldr	r3, [r7, #12]
     8e4:	2b08      	cmp	r3, #8
     8e6:	d005      	beq.n	8f4 <USART_Config+0xa8>
     8e8:	e012      	b.n	910 <USART_Config+0xc4>
  {
    case 0x07:
      /* With this configuration a parity (Even or Odd) should be set */
      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     8ea:	4b1a      	ldr	r3, [pc, #104]	(954 <USART_Config+0x108>)
     8ec:	f04f 0200 	mov.w	r2, #0	; 0x0
     8f0:	809a      	strh	r2, [r3, #4]
     8f2:	e013      	b.n	91c <USART_Config+0xd0>
      break;
    case 0x08:
      if (USART_InitStructure.USART_Parity == USART_Parity_No)
     8f4:	4b17      	ldr	r3, [pc, #92]	(954 <USART_Config+0x108>)
     8f6:	891b      	ldrh	r3, [r3, #8]
     8f8:	2b00      	cmp	r3, #0
     8fa:	d104      	bne.n	906 <USART_Config+0xba>
      {
        USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     8fc:	4b15      	ldr	r3, [pc, #84]	(954 <USART_Config+0x108>)
     8fe:	f04f 0200 	mov.w	r2, #0	; 0x0
     902:	809a      	strh	r2, [r3, #4]
     904:	e00a      	b.n	91c <USART_Config+0xd0>
      }
      else
      {
        USART_InitStructure.USART_WordLength = USART_WordLength_9b;
     906:	4b13      	ldr	r3, [pc, #76]	(954 <USART_Config+0x108>)
     908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     90c:	809a      	strh	r2, [r3, #4]
     90e:	e005      	b.n	91c <USART_Config+0xd0>
      }

      break;
    default :
    {
      USART_Config_Default();
     910:	f7ff ff70 	bl	7f4 <USART_Config_Default>
      return (FALSE);
     914:	f04f 0300 	mov.w	r3, #0	; 0x0
     918:	607b      	str	r3, [r7, #4]
     91a:	e012      	b.n	942 <USART_Config+0xf6>
    }
  }

  USART_InitStructure.USART_BaudRate = linecoding.bitrate;
     91c:	4b0c      	ldr	r3, [pc, #48]	(950 <USART_Config+0x104>)
     91e:	681a      	ldr	r2, [r3, #0]
     920:	4b0c      	ldr	r3, [pc, #48]	(954 <USART_Config+0x108>)
     922:	601a      	str	r2, [r3, #0]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     924:	4a0b      	ldr	r2, [pc, #44]	(954 <USART_Config+0x108>)
     926:	f04f 0300 	mov.w	r3, #0	; 0x0
     92a:	8193      	strh	r3, [r2, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     92c:	4a09      	ldr	r2, [pc, #36]	(954 <USART_Config+0x108>)
     92e:	f04f 030c 	mov.w	r3, #12	; 0xc
     932:	8153      	strh	r3, [r2, #10]

  /* Configure and enable the USART */

  USART_Init(EVAL_COM1, &USART_InitStructure);
     934:	4808      	ldr	r0, [pc, #32]	(958 <USART_Config+0x10c>)
     936:	4907      	ldr	r1, [pc, #28]	(954 <USART_Config+0x108>)
     938:	f004 fdd8 	bl	54ec <USART_Init>

  return (TRUE);
     93c:	f04f 0301 	mov.w	r3, #1	; 0x1
     940:	607b      	str	r3, [r7, #4]
     942:	687b      	ldr	r3, [r7, #4]
}
     944:	4618      	mov	r0, r3
     946:	f107 0710 	add.w	r7, r7, #16	; 0x10
     94a:	46bd      	mov	sp, r7
     94c:	bd80      	pop	{r7, pc}
     94e:	46c0      	nop			(mov r8, r8)
     950:	20000054 	.word	0x20000054
     954:	20000144 	.word	0x20000144
     958:	40013800 	.word	0x40013800

0000095c <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
     95c:	b580      	push	{r7, lr}
     95e:	b083      	sub	sp, #12
     960:	af00      	add	r7, sp, #0
     962:	6078      	str	r0, [r7, #4]
     964:	460b      	mov	r3, r1
     966:	703b      	strb	r3, [r7, #0]
    while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET);
  }

   */

  for (i = 0; i < Nb_bytes; i++) {
     968:	f04f 0300 	mov.w	r3, #0	; 0x0
     96c:	60bb      	str	r3, [r7, #8]
     96e:	e00d      	b.n	98c <USB_To_USART_Send_Data+0x30>
      mybuffer_out[i] = *(data_buffer + i) << 1;
     970:	68b9      	ldr	r1, [r7, #8]
     972:	687a      	ldr	r2, [r7, #4]
     974:	68bb      	ldr	r3, [r7, #8]
     976:	4413      	add	r3, r2
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	ea4f 0343 	mov.w	r3, r3, lsl #1
     97e:	b2db      	uxtb	r3, r3
     980:	4a0c      	ldr	r2, [pc, #48]	(9b4 <USB_To_USART_Send_Data+0x58>)
     982:	5453      	strb	r3, [r2, r1]
    while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET);
  }

   */

  for (i = 0; i < Nb_bytes; i++) {
     984:	68bb      	ldr	r3, [r7, #8]
     986:	f103 0301 	add.w	r3, r3, #1	; 0x1
     98a:	60bb      	str	r3, [r7, #8]
     98c:	783a      	ldrb	r2, [r7, #0]
     98e:	68bb      	ldr	r3, [r7, #8]
     990:	429a      	cmp	r2, r3
     992:	d8ed      	bhi.n	970 <USB_To_USART_Send_Data+0x14>
      mybuffer_out[i] = *(data_buffer + i) << 1;
  }

  /* Write the data to the USB endpoint */
  USB_SIL_Write(EP1_IN, mybuffer_out, Nb_bytes);
     994:	783b      	ldrb	r3, [r7, #0]
     996:	f04f 0081 	mov.w	r0, #129	; 0x81
     99a:	4906      	ldr	r1, [pc, #24]	(9b4 <USB_To_USART_Send_Data+0x58>)
     99c:	461a      	mov	r2, r3
     99e:	f000 fdff 	bl	15a0 <USB_SIL_Write>
  SetEPTxValid(ENDP1);
     9a2:	f04f 0001 	mov.w	r0, #1	; 0x1
     9a6:	f002 f9a1 	bl	2cec <SetEPTxValid>

}
     9aa:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9ae:	46bd      	mov	sp, r7
     9b0:	bd80      	pop	{r7, pc}
     9b2:	46c0      	nop			(mov r8, r8)
     9b4:	20000194 	.word	0x20000194

000009b8 <USART_To_USB_Send_Data>:
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USART_To_USB_Send_Data(void)
{
     9b8:	b590      	push	{r4, r7, lr}
     9ba:	af00      	add	r7, sp, #0
  if (linecoding.datatype == 7)
     9bc:	4b14      	ldr	r3, [pc, #80]	(a10 <USART_To_USB_Send_Data+0x58>)
     9be:	799b      	ldrb	r3, [r3, #6]
     9c0:	2b07      	cmp	r3, #7
     9c2:	d10b      	bne.n	9dc <USART_To_USB_Send_Data+0x24>
  {
    buffer_in[count_in] = USART_ReceiveData(EVAL_COM1) & 0x7F;
     9c4:	4b13      	ldr	r3, [pc, #76]	(a14 <USART_To_USB_Send_Data+0x5c>)
     9c6:	681c      	ldr	r4, [r3, #0]
     9c8:	4813      	ldr	r0, [pc, #76]	(a18 <USART_To_USB_Send_Data+0x60>)
     9ca:	f005 f811 	bl	59f0 <USART_ReceiveData>
     9ce:	4603      	mov	r3, r0
     9d0:	b2db      	uxtb	r3, r3
     9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9d6:	4a11      	ldr	r2, [pc, #68]	(a1c <USART_To_USB_Send_Data+0x64>)
     9d8:	5513      	strb	r3, [r2, r4]
     9da:	e00c      	b.n	9f6 <USART_To_USB_Send_Data+0x3e>
  }
  else if (linecoding.datatype == 8)
     9dc:	4b0c      	ldr	r3, [pc, #48]	(a10 <USART_To_USB_Send_Data+0x58>)
     9de:	799b      	ldrb	r3, [r3, #6]
     9e0:	2b08      	cmp	r3, #8
     9e2:	d108      	bne.n	9f6 <USART_To_USB_Send_Data+0x3e>
  {
    buffer_in[count_in] = USART_ReceiveData(EVAL_COM1);
     9e4:	4b0b      	ldr	r3, [pc, #44]	(a14 <USART_To_USB_Send_Data+0x5c>)
     9e6:	681c      	ldr	r4, [r3, #0]
     9e8:	480b      	ldr	r0, [pc, #44]	(a18 <USART_To_USB_Send_Data+0x60>)
     9ea:	f005 f801 	bl	59f0 <USART_ReceiveData>
     9ee:	4603      	mov	r3, r0
     9f0:	b2db      	uxtb	r3, r3
     9f2:	4a0a      	ldr	r2, [pc, #40]	(a1c <USART_To_USB_Send_Data+0x64>)
     9f4:	5513      	strb	r3, [r2, r4]
  }
  count_in++;
     9f6:	4b07      	ldr	r3, [pc, #28]	(a14 <USART_To_USB_Send_Data+0x5c>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	f103 0201 	add.w	r2, r3, #1	; 0x1
     9fe:	4b05      	ldr	r3, [pc, #20]	(a14 <USART_To_USB_Send_Data+0x5c>)
     a00:	601a      	str	r2, [r3, #0]

  /* Write the data to the USB endpoint */
  // USB_SIL_Write(EP1_IN, buffer_in, count_in);

#ifndef STM32F10X_CL
  SetEPTxValid(ENDP1);
     a02:	f04f 0001 	mov.w	r0, #1	; 0x1
     a06:	f002 f971 	bl	2cec <SetEPTxValid>
#endif /* STM32F10X_CL */
}
     a0a:	46bd      	mov	sp, r7
     a0c:	bd90      	pop	{r4, r7, pc}
     a0e:	46c0      	nop			(mov r8, r8)
     a10:	20000054 	.word	0x20000054
     a14:	20000218 	.word	0x20000218
     a18:	40013800 	.word	0x40013800
     a1c:	20000154 	.word	0x20000154

00000a20 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
     a20:	b480      	push	{r7}
     a22:	b083      	sub	sp, #12
     a24:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
     a26:	4b2f      	ldr	r3, [pc, #188]	(ae4 <Get_SerialNum+0xc4>)
     a28:	681b      	ldr	r3, [r3, #0]
     a2a:	603b      	str	r3, [r7, #0]
  Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
     a2c:	4b2e      	ldr	r3, [pc, #184]	(ae8 <Get_SerialNum+0xc8>)
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	607b      	str	r3, [r7, #4]
  Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
     a32:	4b2e      	ldr	r3, [pc, #184]	(aec <Get_SerialNum+0xcc>)
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	60bb      	str	r3, [r7, #8]

  if (Device_Serial0 != 0)
     a38:	683b      	ldr	r3, [r7, #0]
     a3a:	2b00      	cmp	r3, #0
     a3c:	d04d      	beq.n	ada <Get_SerialNum+0xba>
  {
    Virtual_Com_Port_StringSerial[2] = (uint8_t)(Device_Serial0 & 0x000000FF);
     a3e:	683b      	ldr	r3, [r7, #0]
     a40:	b2db      	uxtb	r3, r3
     a42:	4a2b      	ldr	r2, [pc, #172]	(af0 <Get_SerialNum+0xd0>)
     a44:	7093      	strb	r3, [r2, #2]
    Virtual_Com_Port_StringSerial[4] = (uint8_t)((Device_Serial0 & 0x0000FF00) >> 8);
     a46:	683b      	ldr	r3, [r7, #0]
     a48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     a4c:	ea4f 2313 	mov.w	r3, r3, lsr #8
     a50:	b2db      	uxtb	r3, r3
     a52:	4a27      	ldr	r2, [pc, #156]	(af0 <Get_SerialNum+0xd0>)
     a54:	7113      	strb	r3, [r2, #4]
    Virtual_Com_Port_StringSerial[6] = (uint8_t)((Device_Serial0 & 0x00FF0000) >> 16);
     a56:	683b      	ldr	r3, [r7, #0]
     a58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     a5c:	ea4f 4313 	mov.w	r3, r3, lsr #16
     a60:	b2db      	uxtb	r3, r3
     a62:	4a23      	ldr	r2, [pc, #140]	(af0 <Get_SerialNum+0xd0>)
     a64:	7193      	strb	r3, [r2, #6]
    Virtual_Com_Port_StringSerial[8] = (uint8_t)((Device_Serial0 & 0xFF000000) >> 24);
     a66:	683b      	ldr	r3, [r7, #0]
     a68:	ea4f 6313 	mov.w	r3, r3, lsr #24
     a6c:	b2db      	uxtb	r3, r3
     a6e:	4a20      	ldr	r2, [pc, #128]	(af0 <Get_SerialNum+0xd0>)
     a70:	7213      	strb	r3, [r2, #8]

    Virtual_Com_Port_StringSerial[10] = (uint8_t)(Device_Serial1 & 0x000000FF);
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	b2db      	uxtb	r3, r3
     a76:	4a1e      	ldr	r2, [pc, #120]	(af0 <Get_SerialNum+0xd0>)
     a78:	7293      	strb	r3, [r2, #10]
    Virtual_Com_Port_StringSerial[12] = (uint8_t)((Device_Serial1 & 0x0000FF00) >> 8);
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     a80:	ea4f 2313 	mov.w	r3, r3, lsr #8
     a84:	b2db      	uxtb	r3, r3
     a86:	4a1a      	ldr	r2, [pc, #104]	(af0 <Get_SerialNum+0xd0>)
     a88:	7313      	strb	r3, [r2, #12]
    Virtual_Com_Port_StringSerial[14] = (uint8_t)((Device_Serial1 & 0x00FF0000) >> 16);
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     a90:	ea4f 4313 	mov.w	r3, r3, lsr #16
     a94:	b2db      	uxtb	r3, r3
     a96:	4a16      	ldr	r2, [pc, #88]	(af0 <Get_SerialNum+0xd0>)
     a98:	7393      	strb	r3, [r2, #14]
    Virtual_Com_Port_StringSerial[16] = (uint8_t)((Device_Serial1 & 0xFF000000) >> 24);
     a9a:	687b      	ldr	r3, [r7, #4]
     a9c:	ea4f 6313 	mov.w	r3, r3, lsr #24
     aa0:	b2db      	uxtb	r3, r3
     aa2:	4a13      	ldr	r2, [pc, #76]	(af0 <Get_SerialNum+0xd0>)
     aa4:	7413      	strb	r3, [r2, #16]

    Virtual_Com_Port_StringSerial[18] = (uint8_t)(Device_Serial2 & 0x000000FF);
     aa6:	68bb      	ldr	r3, [r7, #8]
     aa8:	b2db      	uxtb	r3, r3
     aaa:	4a11      	ldr	r2, [pc, #68]	(af0 <Get_SerialNum+0xd0>)
     aac:	7493      	strb	r3, [r2, #18]
    Virtual_Com_Port_StringSerial[20] = (uint8_t)((Device_Serial2 & 0x0000FF00) >> 8);
     aae:	68bb      	ldr	r3, [r7, #8]
     ab0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     ab4:	ea4f 2313 	mov.w	r3, r3, lsr #8
     ab8:	b2db      	uxtb	r3, r3
     aba:	4a0d      	ldr	r2, [pc, #52]	(af0 <Get_SerialNum+0xd0>)
     abc:	7513      	strb	r3, [r2, #20]
    Virtual_Com_Port_StringSerial[22] = (uint8_t)((Device_Serial2 & 0x00FF0000) >> 16);
     abe:	68bb      	ldr	r3, [r7, #8]
     ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     ac4:	ea4f 4313 	mov.w	r3, r3, lsr #16
     ac8:	b2db      	uxtb	r3, r3
     aca:	4a09      	ldr	r2, [pc, #36]	(af0 <Get_SerialNum+0xd0>)
     acc:	7593      	strb	r3, [r2, #22]
    Virtual_Com_Port_StringSerial[24] = (uint8_t)((Device_Serial2 & 0xFF000000) >> 24);
     ace:	68bb      	ldr	r3, [r7, #8]
     ad0:	ea4f 6313 	mov.w	r3, r3, lsr #24
     ad4:	b2db      	uxtb	r3, r3
     ad6:	4a06      	ldr	r2, [pc, #24]	(af0 <Get_SerialNum+0xd0>)
     ad8:	7613      	strb	r3, [r2, #24]
  }
}
     ada:	f107 070c 	add.w	r7, r7, #12	; 0xc
     ade:	46bd      	mov	sp, r7
     ae0:	bc80      	pop	{r7}
     ae2:	4770      	bx	lr
     ae4:	1ffff7e8 	.word	0x1ffff7e8
     ae8:	1ffff7ec 	.word	0x1ffff7ec
     aec:	1ffff7f0 	.word	0x1ffff7f0
     af0:	20000038 	.word	0x20000038

00000af4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
     af4:	b580      	push	{r7, lr}
     af6:	af00      	add	r7, sp, #0
  pInformation = &Device_Info;
     af8:	4a09      	ldr	r2, [pc, #36]	(b20 <USB_Init+0x2c>)
     afa:	4b0a      	ldr	r3, [pc, #40]	(b24 <USB_Init+0x30>)
     afc:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
     afe:	4b08      	ldr	r3, [pc, #32]	(b20 <USB_Init+0x2c>)
     b00:	681a      	ldr	r2, [r3, #0]
     b02:	f04f 0302 	mov.w	r3, #2	; 0x2
     b06:	7413      	strb	r3, [r2, #16]
  pProperty = &Device_Property;
     b08:	4a07      	ldr	r2, [pc, #28]	(b28 <USB_Init+0x34>)
     b0a:	4b08      	ldr	r3, [pc, #32]	(b2c <USB_Init+0x38>)
     b0c:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
     b0e:	4a08      	ldr	r2, [pc, #32]	(b30 <USB_Init+0x3c>)
     b10:	4b08      	ldr	r3, [pc, #32]	(b34 <USB_Init+0x40>)
     b12:	6013      	str	r3, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
     b14:	4b04      	ldr	r3, [pc, #16]	(b28 <USB_Init+0x34>)
     b16:	681b      	ldr	r3, [r3, #0]
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	4798      	blx	r3
}
     b1c:	46bd      	mov	sp, r7
     b1e:	bd80      	pop	{r7, pc}
     b20:	200001fc 	.word	0x200001fc
     b24:	200001d4 	.word	0x200001d4
     b28:	20000200 	.word	0x20000200
     b2c:	20000060 	.word	0x20000060
     b30:	20000204 	.word	0x20000204
     b34:	20000090 	.word	0x20000090

00000b38 <USB_Istr>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void USB_Istr(void)
{
     b38:	b580      	push	{r7, lr}
     b3a:	af00      	add	r7, sp, #0

  wIstr = _GetISTR();
     b3c:	4b1e      	ldr	r3, [pc, #120]	(bb8 <USB_Istr+0x80>)
     b3e:	681b      	ldr	r3, [r3, #0]
     b40:	b29b      	uxth	r3, r3
     b42:	4a1e      	ldr	r2, [pc, #120]	(bbc <USB_Istr+0x84>)
     b44:	8013      	strh	r3, [r2, #0]

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
     b46:	4b1d      	ldr	r3, [pc, #116]	(bbc <USB_Istr+0x84>)
     b48:	881b      	ldrh	r3, [r3, #0]
     b4a:	b29b      	uxth	r3, r3
     b4c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
     b50:	4b1b      	ldr	r3, [pc, #108]	(bc0 <USB_Istr+0x88>)
     b52:	881b      	ldrh	r3, [r3, #0]
     b54:	ea02 0303 	and.w	r3, r2, r3
     b58:	2b00      	cmp	r3, #0
     b5a:	d001      	beq.n	b60 <USB_Istr+0x28>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
     b5c:	f000 f836 	bl	bcc <CTR_LP>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
     b60:	4b16      	ldr	r3, [pc, #88]	(bbc <USB_Istr+0x84>)
     b62:	881b      	ldrh	r3, [r3, #0]
     b64:	b29b      	uxth	r3, r3
     b66:	f403 6280 	and.w	r2, r3, #1024	; 0x400
     b6a:	4b15      	ldr	r3, [pc, #84]	(bc0 <USB_Istr+0x88>)
     b6c:	881b      	ldrh	r3, [r3, #0]
     b6e:	ea02 0303 	and.w	r3, r2, r3
     b72:	2b00      	cmp	r3, #0
     b74:	d006      	beq.n	b84 <USB_Istr+0x4c>
  {
    _SetISTR((uint16_t)CLR_RESET);
     b76:	4a10      	ldr	r2, [pc, #64]	(bb8 <USB_Istr+0x80>)
     b78:	f64f 33ff 	movw	r3, #64511	; 0xfbff
     b7c:	6013      	str	r3, [r2, #0]
    Device_Property.Reset();
     b7e:	4b11      	ldr	r3, [pc, #68]	(bc4 <USB_Istr+0x8c>)
     b80:	685b      	ldr	r3, [r3, #4]
     b82:	4798      	blx	r3
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
     b84:	4b0d      	ldr	r3, [pc, #52]	(bbc <USB_Istr+0x84>)
     b86:	881b      	ldrh	r3, [r3, #0]
     b88:	b29b      	uxth	r3, r3
     b8a:	f403 7200 	and.w	r2, r3, #512	; 0x200
     b8e:	4b0c      	ldr	r3, [pc, #48]	(bc0 <USB_Istr+0x88>)
     b90:	881b      	ldrh	r3, [r3, #0]
     b92:	ea02 0303 	and.w	r3, r2, r3
     b96:	2b00      	cmp	r3, #0
     b98:	d00b      	beq.n	bb2 <USB_Istr+0x7a>
  {
    _SetISTR((uint16_t)CLR_SOF);
     b9a:	4a07      	ldr	r2, [pc, #28]	(bb8 <USB_Istr+0x80>)
     b9c:	f64f 53ff 	movw	r3, #65023	; 0xfdff
     ba0:	6013      	str	r3, [r2, #0]
    bIntPackSOF++;
     ba2:	4b09      	ldr	r3, [pc, #36]	(bc8 <USB_Istr+0x90>)
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	b2db      	uxtb	r3, r3
     ba8:	f103 0301 	add.w	r3, r3, #1	; 0x1
     bac:	b2db      	uxtb	r3, r3
     bae:	4a06      	ldr	r2, [pc, #24]	(bc8 <USB_Istr+0x90>)
     bb0:	7013      	strb	r3, [r2, #0]
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
     bb2:	46bd      	mov	sp, r7
     bb4:	bd80      	pop	{r7, pc}
     bb6:	46c0      	nop			(mov r8, r8)
     bb8:	40005c44 	.word	0x40005c44
     bbc:	2000020e 	.word	0x2000020e
     bc0:	2000020a 	.word	0x2000020a
     bc4:	20000060 	.word	0x20000060
     bc8:	2000020c 	.word	0x2000020c

00000bcc <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
     bcc:	b580      	push	{r7, lr}
     bce:	b084      	sub	sp, #16
     bd0:	af00      	add	r7, sp, #0
  __IO uint16_t wEPVal = 0;
     bd2:	f04f 0300 	mov.w	r3, #0	; 0x0
     bd6:	81fb      	strh	r3, [r7, #14]
     bd8:	e182      	b.n	ee0 <CTR_LP+0x314>
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
     bda:	4bc9      	ldr	r3, [pc, #804]	(f00 <CTR_LP+0x334>)
     bdc:	881b      	ldrh	r3, [r3, #0]
     bde:	b29b      	uxth	r3, r3
     be0:	b2db      	uxtb	r3, r3
     be2:	f003 030f 	and.w	r3, r3, #15	; 0xf
     be6:	4ac7      	ldr	r2, [pc, #796]	(f04 <CTR_LP+0x338>)
     be8:	7013      	strb	r3, [r2, #0]
    if (EPindex == 0)
     bea:	4bc6      	ldr	r3, [pc, #792]	(f04 <CTR_LP+0x338>)
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2b00      	cmp	r3, #0
     bf0:	f040 8120 	bne.w	e34 <CTR_LP+0x268>

      /* save RX & TX status */
      /* and set both to NAK */


	    SaveRState = _GetENDPOINT(ENDP0);
     bf4:	4bc4      	ldr	r3, [pc, #784]	(f08 <CTR_LP+0x33c>)
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	b29b      	uxth	r3, r3
     bfa:	f8df 2310 	ldr.w	r2, [pc, #784]	; f0c <CTR_LP+0x340>
     bfe:	8013      	strh	r3, [r2, #0]
	    SaveTState = SaveRState & EPTX_STAT;
     c00:	4bc2      	ldr	r3, [pc, #776]	(f0c <CTR_LP+0x340>)
     c02:	881b      	ldrh	r3, [r3, #0]
     c04:	b29b      	uxth	r3, r3
     c06:	f003 0330 	and.w	r3, r3, #48	; 0x30
     c0a:	4ac1      	ldr	r2, [pc, #772]	(f10 <CTR_LP+0x344>)
     c0c:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
     c0e:	4bbf      	ldr	r3, [pc, #764]	(f0c <CTR_LP+0x340>)
     c10:	881b      	ldrh	r3, [r3, #0]
     c12:	b29b      	uxth	r3, r3
     c14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
     c18:	4abc      	ldr	r2, [pc, #752]	(f0c <CTR_LP+0x340>)
     c1a:	8013      	strh	r3, [r2, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
     c1c:	4bba      	ldr	r3, [pc, #744]	(f08 <CTR_LP+0x33c>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	b29b      	uxth	r3, r3
     c22:	461a      	mov	r2, r3
     c24:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
     c28:	ea02 0303 	and.w	r3, r2, r3
     c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
     c30:	f083 0320 	eor.w	r3, r3, #32	; 0x20
     c34:	49b4      	ldr	r1, [pc, #720]	(f08 <CTR_LP+0x33c>)
     c36:	b29a      	uxth	r2, r3
     c38:	4bb6      	ldr	r3, [pc, #728]	(f14 <CTR_LP+0x348>)
     c3a:	ea42 0303 	orr.w	r3, r2, r3
     c3e:	b29b      	uxth	r3, r3
     c40:	600b      	str	r3, [r1, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
     c42:	4baf      	ldr	r3, [pc, #700]	(f00 <CTR_LP+0x334>)
     c44:	881b      	ldrh	r3, [r3, #0]
     c46:	b29b      	uxth	r3, r3
     c48:	f003 0310 	and.w	r3, r3, #16	; 0x10
     c4c:	2b00      	cmp	r3, #0
     c4e:	d14a      	bne.n	ce6 <CTR_LP+0x11a>

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */


        _ClearEP_CTR_TX(ENDP0);
     c50:	49ad      	ldr	r1, [pc, #692]	(f08 <CTR_LP+0x33c>)
     c52:	4bad      	ldr	r3, [pc, #692]	(f08 <CTR_LP+0x33c>)
     c54:	681b      	ldr	r3, [r3, #0]
     c56:	b29b      	uxth	r3, r3
     c58:	461a      	mov	r2, r3
     c5a:	f648 730f 	movw	r3, #36623	; 0x8f0f
     c5e:	ea02 0303 	and.w	r3, r2, r3
     c62:	600b      	str	r3, [r1, #0]
        In0_Process();
     c64:	f001 fc72 	bl	254c <In0_Process>

           /* before terminate set Tx & Rx status */

            _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
     c68:	4ba7      	ldr	r3, [pc, #668]	(f08 <CTR_LP+0x33c>)
     c6a:	681b      	ldr	r3, [r3, #0]
     c6c:	b29b      	uxth	r3, r3
     c6e:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
     c72:	603a      	str	r2, [r7, #0]
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	ea03 0202 	and.w	r2, r3, r2
     c7a:	603a      	str	r2, [r7, #0]
     c7c:	4ba3      	ldr	r3, [pc, #652]	(f0c <CTR_LP+0x340>)
     c7e:	881b      	ldrh	r3, [r3, #0]
     c80:	b29b      	uxth	r3, r3
     c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
     c86:	2b00      	cmp	r3, #0
     c88:	d003      	beq.n	c92 <CTR_LP+0xc6>
     c8a:	683b      	ldr	r3, [r7, #0]
     c8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
     c90:	603b      	str	r3, [r7, #0]
     c92:	4b9e      	ldr	r3, [pc, #632]	(f0c <CTR_LP+0x340>)
     c94:	881b      	ldrh	r3, [r3, #0]
     c96:	b29b      	uxth	r3, r3
     c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     c9c:	2b00      	cmp	r3, #0
     c9e:	d003      	beq.n	ca8 <CTR_LP+0xdc>
     ca0:	683a      	ldr	r2, [r7, #0]
     ca2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
     ca6:	603a      	str	r2, [r7, #0]
     ca8:	4b99      	ldr	r3, [pc, #612]	(f10 <CTR_LP+0x344>)
     caa:	881b      	ldrh	r3, [r3, #0]
     cac:	b29b      	uxth	r3, r3
     cae:	f003 0310 	and.w	r3, r3, #16	; 0x10
     cb2:	2b00      	cmp	r3, #0
     cb4:	d003      	beq.n	cbe <CTR_LP+0xf2>
     cb6:	683b      	ldr	r3, [r7, #0]
     cb8:	f083 0310 	eor.w	r3, r3, #16	; 0x10
     cbc:	603b      	str	r3, [r7, #0]
     cbe:	4b94      	ldr	r3, [pc, #592]	(f10 <CTR_LP+0x344>)
     cc0:	881b      	ldrh	r3, [r3, #0]
     cc2:	b29b      	uxth	r3, r3
     cc4:	f003 0320 	and.w	r3, r3, #32	; 0x20
     cc8:	2b00      	cmp	r3, #0
     cca:	d003      	beq.n	cd4 <CTR_LP+0x108>
     ccc:	683a      	ldr	r2, [r7, #0]
     cce:	f082 0220 	eor.w	r2, r2, #32	; 0x20
     cd2:	603a      	str	r2, [r7, #0]
     cd4:	498c      	ldr	r1, [pc, #560]	(f08 <CTR_LP+0x33c>)
     cd6:	683b      	ldr	r3, [r7, #0]
     cd8:	b29a      	uxth	r2, r3
     cda:	4b8e      	ldr	r3, [pc, #568]	(f14 <CTR_LP+0x348>)
     cdc:	ea42 0303 	orr.w	r3, r2, r3
     ce0:	b29b      	uxth	r3, r3
     ce2:	600b      	str	r3, [r1, #0]
     ce4:	e108      	b.n	ef8 <CTR_LP+0x32c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
     ce6:	4b88      	ldr	r3, [pc, #544]	(f08 <CTR_LP+0x33c>)
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	b29b      	uxth	r3, r3
     cec:	81fb      	strh	r3, [r7, #14]
        
        if ((wEPVal &EP_SETUP) != 0)
     cee:	89fb      	ldrh	r3, [r7, #14]
     cf0:	b29b      	uxth	r3, r3
     cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
     cf6:	2b00      	cmp	r3, #0
     cf8:	d04a      	beq.n	d90 <CTR_LP+0x1c4>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
     cfa:	4983      	ldr	r1, [pc, #524]	(f08 <CTR_LP+0x33c>)
     cfc:	4b82      	ldr	r3, [pc, #520]	(f08 <CTR_LP+0x33c>)
     cfe:	681b      	ldr	r3, [r3, #0]
     d00:	b29b      	uxth	r3, r3
     d02:	461a      	mov	r2, r3
     d04:	f640 738f 	movw	r3, #3983	; 0xf8f
     d08:	ea02 0303 	and.w	r3, r2, r3
     d0c:	600b      	str	r3, [r1, #0]
          Setup0_Process();
     d0e:	f001 fba3 	bl	2458 <Setup0_Process>
          /* before terminate set Tx & Rx status */

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
     d12:	4b7d      	ldr	r3, [pc, #500]	(f08 <CTR_LP+0x33c>)
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	b29b      	uxth	r3, r3
     d18:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
     d1c:	607a      	str	r2, [r7, #4]
     d1e:	687a      	ldr	r2, [r7, #4]
     d20:	ea03 0202 	and.w	r2, r3, r2
     d24:	607a      	str	r2, [r7, #4]
     d26:	4b79      	ldr	r3, [pc, #484]	(f0c <CTR_LP+0x340>)
     d28:	881b      	ldrh	r3, [r3, #0]
     d2a:	b29b      	uxth	r3, r3
     d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
     d30:	2b00      	cmp	r3, #0
     d32:	d003      	beq.n	d3c <CTR_LP+0x170>
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
     d3a:	607b      	str	r3, [r7, #4]
     d3c:	4b73      	ldr	r3, [pc, #460]	(f0c <CTR_LP+0x340>)
     d3e:	881b      	ldrh	r3, [r3, #0]
     d40:	b29b      	uxth	r3, r3
     d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     d46:	2b00      	cmp	r3, #0
     d48:	d003      	beq.n	d52 <CTR_LP+0x186>
     d4a:	687a      	ldr	r2, [r7, #4]
     d4c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
     d50:	607a      	str	r2, [r7, #4]
     d52:	4b6f      	ldr	r3, [pc, #444]	(f10 <CTR_LP+0x344>)
     d54:	881b      	ldrh	r3, [r3, #0]
     d56:	b29b      	uxth	r3, r3
     d58:	f003 0310 	and.w	r3, r3, #16	; 0x10
     d5c:	2b00      	cmp	r3, #0
     d5e:	d003      	beq.n	d68 <CTR_LP+0x19c>
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	f083 0310 	eor.w	r3, r3, #16	; 0x10
     d66:	607b      	str	r3, [r7, #4]
     d68:	4b69      	ldr	r3, [pc, #420]	(f10 <CTR_LP+0x344>)
     d6a:	881b      	ldrh	r3, [r3, #0]
     d6c:	b29b      	uxth	r3, r3
     d6e:	f003 0320 	and.w	r3, r3, #32	; 0x20
     d72:	2b00      	cmp	r3, #0
     d74:	d003      	beq.n	d7e <CTR_LP+0x1b2>
     d76:	687a      	ldr	r2, [r7, #4]
     d78:	f082 0220 	eor.w	r2, r2, #32	; 0x20
     d7c:	607a      	str	r2, [r7, #4]
     d7e:	4962      	ldr	r1, [pc, #392]	(f08 <CTR_LP+0x33c>)
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	b29a      	uxth	r2, r3
     d84:	4b63      	ldr	r3, [pc, #396]	(f14 <CTR_LP+0x348>)
     d86:	ea42 0303 	orr.w	r3, r2, r3
     d8a:	b29b      	uxth	r3, r3
     d8c:	600b      	str	r3, [r1, #0]
     d8e:	e0b3      	b.n	ef8 <CTR_LP+0x32c>
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
     d90:	89fb      	ldrh	r3, [r7, #14]
     d92:	b29b      	uxth	r3, r3
     d94:	b21b      	sxth	r3, r3
     d96:	2b00      	cmp	r3, #0
     d98:	f280 80a2 	bge.w	ee0 <CTR_LP+0x314>
        {
          _ClearEP_CTR_RX(ENDP0);
     d9c:	495a      	ldr	r1, [pc, #360]	(f08 <CTR_LP+0x33c>)
     d9e:	f8df 3168 	ldr.w	r3, [pc, #360]	; f08 <CTR_LP+0x33c>
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	b29b      	uxth	r3, r3
     da6:	461a      	mov	r2, r3
     da8:	f640 738f 	movw	r3, #3983	; 0xf8f
     dac:	ea02 0303 	and.w	r3, r2, r3
     db0:	600b      	str	r3, [r1, #0]
          Out0_Process();
     db2:	f001 fc17 	bl	25e4 <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
     db6:	4b54      	ldr	r3, [pc, #336]	(f08 <CTR_LP+0x33c>)
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	b29b      	uxth	r3, r3
     dbc:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
     dc0:	60ba      	str	r2, [r7, #8]
     dc2:	68ba      	ldr	r2, [r7, #8]
     dc4:	ea03 0202 	and.w	r2, r3, r2
     dc8:	60ba      	str	r2, [r7, #8]
     dca:	4b50      	ldr	r3, [pc, #320]	(f0c <CTR_LP+0x340>)
     dcc:	881b      	ldrh	r3, [r3, #0]
     dce:	b29b      	uxth	r3, r3
     dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
     dd4:	2b00      	cmp	r3, #0
     dd6:	d003      	beq.n	de0 <CTR_LP+0x214>
     dd8:	68bb      	ldr	r3, [r7, #8]
     dda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
     dde:	60bb      	str	r3, [r7, #8]
     de0:	4b4a      	ldr	r3, [pc, #296]	(f0c <CTR_LP+0x340>)
     de2:	881b      	ldrh	r3, [r3, #0]
     de4:	b29b      	uxth	r3, r3
     de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     dea:	2b00      	cmp	r3, #0
     dec:	d003      	beq.n	df6 <CTR_LP+0x22a>
     dee:	68ba      	ldr	r2, [r7, #8]
     df0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
     df4:	60ba      	str	r2, [r7, #8]
     df6:	4b46      	ldr	r3, [pc, #280]	(f10 <CTR_LP+0x344>)
     df8:	881b      	ldrh	r3, [r3, #0]
     dfa:	b29b      	uxth	r3, r3
     dfc:	f003 0310 	and.w	r3, r3, #16	; 0x10
     e00:	2b00      	cmp	r3, #0
     e02:	d003      	beq.n	e0c <CTR_LP+0x240>
     e04:	68bb      	ldr	r3, [r7, #8]
     e06:	f083 0310 	eor.w	r3, r3, #16	; 0x10
     e0a:	60bb      	str	r3, [r7, #8]
     e0c:	4b40      	ldr	r3, [pc, #256]	(f10 <CTR_LP+0x344>)
     e0e:	881b      	ldrh	r3, [r3, #0]
     e10:	b29b      	uxth	r3, r3
     e12:	f003 0320 	and.w	r3, r3, #32	; 0x20
     e16:	2b00      	cmp	r3, #0
     e18:	d003      	beq.n	e22 <CTR_LP+0x256>
     e1a:	68ba      	ldr	r2, [r7, #8]
     e1c:	f082 0220 	eor.w	r2, r2, #32	; 0x20
     e20:	60ba      	str	r2, [r7, #8]
     e22:	4939      	ldr	r1, [pc, #228]	(f08 <CTR_LP+0x33c>)
     e24:	68bb      	ldr	r3, [r7, #8]
     e26:	b29a      	uxth	r2, r3
     e28:	4b3a      	ldr	r3, [pc, #232]	(f14 <CTR_LP+0x348>)
     e2a:	ea42 0303 	orr.w	r3, r2, r3
     e2e:	b29b      	uxth	r3, r3
     e30:	600b      	str	r3, [r1, #0]
     e32:	e061      	b.n	ef8 <CTR_LP+0x32c>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
     e34:	4b33      	ldr	r3, [pc, #204]	(f04 <CTR_LP+0x338>)
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	ea4f 0383 	mov.w	r3, r3, lsl #2
     e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     e40:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
     e44:	681b      	ldr	r3, [r3, #0]
     e46:	b29b      	uxth	r3, r3
     e48:	81fb      	strh	r3, [r7, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
     e4a:	89fb      	ldrh	r3, [r7, #14]
     e4c:	b29b      	uxth	r3, r3
     e4e:	b21b      	sxth	r3, r3
     e50:	2b00      	cmp	r3, #0
     e52:	da1f      	bge.n	e94 <CTR_LP+0x2c8>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
     e54:	4b2b      	ldr	r3, [pc, #172]	(f04 <CTR_LP+0x338>)
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	ea4f 0383 	mov.w	r3, r3, lsl #2
     e5c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
     e60:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
     e64:	4b27      	ldr	r3, [pc, #156]	(f04 <CTR_LP+0x338>)
     e66:	781b      	ldrb	r3, [r3, #0]
     e68:	ea4f 0383 	mov.w	r3, r3, lsl #2
     e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     e70:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	b29b      	uxth	r3, r3
     e78:	461a      	mov	r2, r3
     e7a:	f640 738f 	movw	r3, #3983	; 0xf8f
     e7e:	ea02 0303 	and.w	r3, r2, r3
     e82:	600b      	str	r3, [r1, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
     e84:	4b1f      	ldr	r3, [pc, #124]	(f04 <CTR_LP+0x338>)
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     e8c:	4b22      	ldr	r3, [pc, #136]	(f18 <CTR_LP+0x34c>)
     e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     e92:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
     e94:	89fb      	ldrh	r3, [r7, #14]
     e96:	b29b      	uxth	r3, r3
     e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
     e9c:	2b00      	cmp	r3, #0
     e9e:	d01f      	beq.n	ee0 <CTR_LP+0x314>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
     ea0:	4b18      	ldr	r3, [pc, #96]	(f04 <CTR_LP+0x338>)
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     ea8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
     eac:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
     eb0:	4b14      	ldr	r3, [pc, #80]	(f04 <CTR_LP+0x338>)
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     ebc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
     ec0:	681b      	ldr	r3, [r3, #0]
     ec2:	b29b      	uxth	r3, r3
     ec4:	461a      	mov	r2, r3
     ec6:	f648 730f 	movw	r3, #36623	; 0x8f0f
     eca:	ea02 0303 	and.w	r3, r2, r3
     ece:	600b      	str	r3, [r1, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
     ed0:	4b0c      	ldr	r3, [pc, #48]	(f04 <CTR_LP+0x338>)
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     ed8:	4b10      	ldr	r3, [pc, #64]	(f1c <CTR_LP+0x350>)
     eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     ede:	4798      	blx	r3
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
     ee0:	4b0f      	ldr	r3, [pc, #60]	(f20 <CTR_LP+0x354>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	b29b      	uxth	r3, r3
     ee6:	4a06      	ldr	r2, [pc, #24]	(f00 <CTR_LP+0x334>)
     ee8:	8013      	strh	r3, [r2, #0]
     eea:	4b05      	ldr	r3, [pc, #20]	(f00 <CTR_LP+0x334>)
     eec:	881b      	ldrh	r3, [r3, #0]
     eee:	b29b      	uxth	r3, r3
     ef0:	b21b      	sxth	r3, r3
     ef2:	2b00      	cmp	r3, #0
     ef4:	f6ff ae71 	blt.w	bda <CTR_LP+0xe>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
     ef8:	f107 0710 	add.w	r7, r7, #16	; 0x10
     efc:	46bd      	mov	sp, r7
     efe:	bd80      	pop	{r7, pc}
     f00:	2000020e 	.word	0x2000020e
     f04:	200001f8 	.word	0x200001f8
     f08:	40005c00 	.word	0x40005c00
     f0c:	20000210 	.word	0x20000210
     f10:	20000212 	.word	0x20000212
     f14:	ffff8080 	.word	0xffff8080
     f18:	2000001c 	.word	0x2000001c
     f1c:	20000000 	.word	0x20000000
     f20:	40005c44 	.word	0x40005c44

00000f24 <CTR_HP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_HP(void)
{
     f24:	b580      	push	{r7, lr}
     f26:	b081      	sub	sp, #4
     f28:	af00      	add	r7, sp, #0
  uint32_t wEPVal = 0;
     f2a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f2e:	603b      	str	r3, [r7, #0]
     f30:	e061      	b.n	ff6 <CTR_HP+0xd2>

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
     f32:	4a38      	ldr	r2, [pc, #224]	(1014 <CTR_HP+0xf0>)
     f34:	f647 73ff 	movw	r3, #32767	; 0x7fff
     f38:	6013      	str	r3, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
     f3a:	4b37      	ldr	r3, [pc, #220]	(1018 <CTR_HP+0xf4>)
     f3c:	881b      	ldrh	r3, [r3, #0]
     f3e:	b29b      	uxth	r3, r3
     f40:	b2db      	uxtb	r3, r3
     f42:	f003 030f 	and.w	r3, r3, #15	; 0xf
     f46:	4a35      	ldr	r2, [pc, #212]	(101c <CTR_HP+0xf8>)
     f48:	7013      	strb	r3, [r2, #0]
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
     f4a:	4b34      	ldr	r3, [pc, #208]	(101c <CTR_HP+0xf8>)
     f4c:	781b      	ldrb	r3, [r3, #0]
     f4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     f52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     f56:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	b29b      	uxth	r3, r3
     f5e:	603b      	str	r3, [r7, #0]
    if ((wEPVal & EP_CTR_RX) != 0)
     f60:	683b      	ldr	r3, [r7, #0]
     f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     f66:	2b00      	cmp	r3, #0
     f68:	d020      	beq.n	fac <CTR_HP+0x88>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
     f6a:	4b2c      	ldr	r3, [pc, #176]	(101c <CTR_HP+0xf8>)
     f6c:	781b      	ldrb	r3, [r3, #0]
     f6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     f72:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
     f76:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
     f7a:	4b28      	ldr	r3, [pc, #160]	(101c <CTR_HP+0xf8>)
     f7c:	781b      	ldrb	r3, [r3, #0]
     f7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     f86:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	b29b      	uxth	r3, r3
     f8e:	461a      	mov	r2, r3
     f90:	f640 738f 	movw	r3, #3983	; 0xf8f
     f94:	ea02 0303 	and.w	r3, r2, r3
     f98:	600b      	str	r3, [r1, #0]

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
     f9a:	4b20      	ldr	r3, [pc, #128]	(101c <CTR_HP+0xf8>)
     f9c:	781b      	ldrb	r3, [r3, #0]
     f9e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     fa2:	4b1f      	ldr	r3, [pc, #124]	(1020 <CTR_HP+0xfc>)
     fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     fa8:	4798      	blx	r3
     faa:	e024      	b.n	ff6 <CTR_HP+0xd2>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
     fac:	683b      	ldr	r3, [r7, #0]
     fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
     fb2:	2b00      	cmp	r3, #0
     fb4:	d01f      	beq.n	ff6 <CTR_HP+0xd2>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
     fb6:	4b19      	ldr	r3, [pc, #100]	(101c <CTR_HP+0xf8>)
     fb8:	781b      	ldrb	r3, [r3, #0]
     fba:	ea4f 0383 	mov.w	r3, r3, lsl #2
     fbe:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
     fc2:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
     fc6:	4b15      	ldr	r3, [pc, #84]	(101c <CTR_HP+0xf8>)
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	ea4f 0383 	mov.w	r3, r3, lsl #2
     fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     fd2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
     fd6:	681b      	ldr	r3, [r3, #0]
     fd8:	b29b      	uxth	r3, r3
     fda:	461a      	mov	r2, r3
     fdc:	f648 730f 	movw	r3, #36623	; 0x8f0f
     fe0:	ea02 0303 	and.w	r3, r2, r3
     fe4:	600b      	str	r3, [r1, #0]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
     fe6:	4b0d      	ldr	r3, [pc, #52]	(101c <CTR_HP+0xf8>)
     fe8:	781b      	ldrb	r3, [r3, #0]
     fea:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     fee:	4b0d      	ldr	r3, [pc, #52]	(1024 <CTR_HP+0x100>)
     ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     ff4:	4798      	blx	r3
*******************************************************************************/
void CTR_HP(void)
{
  uint32_t wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
     ff6:	4b07      	ldr	r3, [pc, #28]	(1014 <CTR_HP+0xf0>)
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	b29b      	uxth	r3, r3
     ffc:	4a06      	ldr	r2, [pc, #24]	(1018 <CTR_HP+0xf4>)
     ffe:	8013      	strh	r3, [r2, #0]
    1000:	4b05      	ldr	r3, [pc, #20]	(1018 <CTR_HP+0xf4>)
    1002:	881b      	ldrh	r3, [r3, #0]
    1004:	b29b      	uxth	r3, r3
    1006:	b21b      	sxth	r3, r3
    1008:	2b00      	cmp	r3, #0
    100a:	db92      	blt.n	f32 <CTR_HP+0xe>


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
    100c:	f107 0704 	add.w	r7, r7, #4	; 0x4
    1010:	46bd      	mov	sp, r7
    1012:	bd80      	pop	{r7, pc}
    1014:	40005c44 	.word	0x40005c44
    1018:	2000020e 	.word	0x2000020e
    101c:	200001f8 	.word	0x200001f8
    1020:	2000001c 	.word	0x2000001c
    1024:	20000000 	.word	0x20000000

00001028 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
    1028:	b480      	push	{r7}
    102a:	b088      	sub	sp, #32
    102c:	af00      	add	r7, sp, #0
    102e:	60b8      	str	r0, [r7, #8]
    1030:	460b      	mov	r3, r1
    1032:	80bb      	strh	r3, [r7, #4]
    1034:	4613      	mov	r3, r2
    1036:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
    1038:	883b      	ldrh	r3, [r7, #0]
    103a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    103e:	ea4f 0363 	mov.w	r3, r3, asr #1
    1042:	60fb      	str	r3, [r7, #12]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
    1044:	88bb      	ldrh	r3, [r7, #4]
    1046:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    104a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    104e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1052:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0; i--)
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	613b      	str	r3, [r7, #16]
    1058:	e023      	b.n	10a2 <UserToPMABufferCopy+0x7a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    105a:	68bb      	ldr	r3, [r7, #8]
    105c:	781b      	ldrb	r3, [r3, #0]
    105e:	617b      	str	r3, [r7, #20]
    pbUsrBuf++;
    1060:	68bb      	ldr	r3, [r7, #8]
    1062:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1066:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    1068:	68bb      	ldr	r3, [r7, #8]
    106a:	781b      	ldrb	r3, [r3, #0]
    106c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1070:	461a      	mov	r2, r3
    1072:	697b      	ldr	r3, [r7, #20]
    1074:	ea42 0303 	orr.w	r3, r2, r3
    1078:	61bb      	str	r3, [r7, #24]
    *pdwVal++ = temp2;
    107a:	69bb      	ldr	r3, [r7, #24]
    107c:	b29b      	uxth	r3, r3
    107e:	69fa      	ldr	r2, [r7, #28]
    1080:	8013      	strh	r3, [r2, #0]
    1082:	69fb      	ldr	r3, [r7, #28]
    1084:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1088:	61fb      	str	r3, [r7, #28]
    pdwVal++;
    108a:	69fb      	ldr	r3, [r7, #28]
    108c:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1090:	61fb      	str	r3, [r7, #28]
    pbUsrBuf++;
    1092:	68bb      	ldr	r3, [r7, #8]
    1094:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1098:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
    109a:	693b      	ldr	r3, [r7, #16]
    109c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    10a0:	613b      	str	r3, [r7, #16]
    10a2:	693b      	ldr	r3, [r7, #16]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d1d8      	bne.n	105a <UserToPMABufferCopy+0x32>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
    10a8:	f107 0720 	add.w	r7, r7, #32	; 0x20
    10ac:	46bd      	mov	sp, r7
    10ae:	bc80      	pop	{r7}
    10b0:	4770      	bx	lr
    10b2:	46c0      	nop			(mov r8, r8)

000010b4 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
    10b4:	b480      	push	{r7}
    10b6:	b086      	sub	sp, #24
    10b8:	af00      	add	r7, sp, #0
    10ba:	60b8      	str	r0, [r7, #8]
    10bc:	460b      	mov	r3, r1
    10be:	80bb      	strh	r3, [r7, #4]
    10c0:	4613      	mov	r3, r2
    10c2:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
    10c4:	883b      	ldrh	r3, [r7, #0]
    10c6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    10ca:	ea4f 0363 	mov.w	r3, r3, asr #1
    10ce:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
    10d0:	88bb      	ldrh	r3, [r7, #4]
    10d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    10d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    10da:	ea4f 0343 	mov.w	r3, r3, lsl #1
    10de:	617b      	str	r3, [r7, #20]
  for (i = n; i != 0; i--)
    10e0:	68fb      	ldr	r3, [r7, #12]
    10e2:	613b      	str	r3, [r7, #16]
    10e4:	e014      	b.n	1110 <PMAToUserBufferCopy+0x5c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    10e6:	68ba      	ldr	r2, [r7, #8]
    10e8:	697b      	ldr	r3, [r7, #20]
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	b29b      	uxth	r3, r3
    10ee:	8013      	strh	r3, [r2, #0]
    10f0:	68bb      	ldr	r3, [r7, #8]
    10f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    10f6:	60bb      	str	r3, [r7, #8]
    10f8:	697b      	ldr	r3, [r7, #20]
    10fa:	f103 0304 	add.w	r3, r3, #4	; 0x4
    10fe:	617b      	str	r3, [r7, #20]
    pbUsrBuf++;
    1100:	68bb      	ldr	r3, [r7, #8]
    1102:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1106:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
    1108:	693b      	ldr	r3, [r7, #16]
    110a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    110e:	613b      	str	r3, [r7, #16]
    1110:	693b      	ldr	r3, [r7, #16]
    1112:	2b00      	cmp	r3, #0
    1114:	d1e7      	bne.n	10e6 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
    1116:	f107 0718 	add.w	r7, r7, #24	; 0x18
    111a:	46bd      	mov	sp, r7
    111c:	bc80      	pop	{r7}
    111e:	4770      	bx	lr

00001120 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback(void)
{
    1120:	b480      	push	{r7}
    1122:	af00      	add	r7, sp, #0
  count_in = 0;
    1124:	4a03      	ldr	r2, [pc, #12]	(1134 <EP1_IN_Callback+0x14>)
    1126:	f04f 0300 	mov.w	r3, #0	; 0x0
    112a:	6013      	str	r3, [r2, #0]
}
    112c:	46bd      	mov	sp, r7
    112e:	bc80      	pop	{r7}
    1130:	4770      	bx	lr
    1132:	46c0      	nop			(mov r8, r8)
    1134:	20000218 	.word	0x20000218

00001138 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
    1138:	b580      	push	{r7, lr}
    113a:	af00      	add	r7, sp, #0
  /* Get the received data buffer and update the counter */
  count_out = USB_SIL_Read(EP3_OUT, buffer_out);
    113c:	f04f 0003 	mov.w	r0, #3	; 0x3
    1140:	4905      	ldr	r1, [pc, #20]	(1158 <EP3_OUT_Callback+0x20>)
    1142:	f000 fa53 	bl	15ec <USB_SIL_Read>
    1146:	4602      	mov	r2, r0
    1148:	4b04      	ldr	r3, [pc, #16]	(115c <EP3_OUT_Callback+0x24>)
    114a:	601a      	str	r2, [r3, #0]

  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
    114c:	f04f 0003 	mov.w	r0, #3	; 0x3
    1150:	f001 fe00 	bl	2d54 <SetEPRxValid>

}
    1154:	46bd      	mov	sp, r7
    1156:	bd80      	pop	{r7, pc}
    1158:	2000021c 	.word	0x2000021c
    115c:	20000214 	.word	0x20000214

00001160 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
    1160:	b580      	push	{r7, lr}
    1162:	af00      	add	r7, sp, #0

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
    1164:	f7ff fc5c 	bl	a20 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
    1168:	4b08      	ldr	r3, [pc, #32]	(118c <Virtual_Com_Port_init+0x2c>)
    116a:	681a      	ldr	r2, [r3, #0]
    116c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1170:	7493      	strb	r3, [r2, #18]

  /* Connect the device */
  PowerOn();
    1172:	f001 faeb 	bl	274c <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
    1176:	f000 f9f9 	bl	156c <USB_SIL_Init>

  /* configure the USART to the default settings */
  USART_Config_Default();
    117a:	f7ff fb3b 	bl	7f4 <USART_Config_Default>

  bDeviceState = UNCONNECTED;
    117e:	4a04      	ldr	r2, [pc, #16]	(1190 <Virtual_Com_Port_init+0x30>)
    1180:	f04f 0300 	mov.w	r3, #0	; 0x0
    1184:	6013      	str	r3, [r2, #0]
}
    1186:	46bd      	mov	sp, r7
    1188:	bd80      	pop	{r7, pc}
    118a:	46c0      	nop			(mov r8, r8)
    118c:	200001fc 	.word	0x200001fc
    1190:	20000268 	.word	0x20000268

00001194 <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
    1194:	b580      	push	{r7, lr}
    1196:	af00      	add	r7, sp, #0
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
    1198:	4b49      	ldr	r3, [pc, #292]	(12c0 <Virtual_Com_Port_Reset+0x12c>)
    119a:	681a      	ldr	r2, [r3, #0]
    119c:	f04f 0300 	mov.w	r3, #0	; 0x0
    11a0:	7493      	strb	r3, [r2, #18]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
    11a2:	4b47      	ldr	r3, [pc, #284]	(12c0 <Virtual_Com_Port_Reset+0x12c>)
    11a4:	681a      	ldr	r2, [r3, #0]
    11a6:	4b47      	ldr	r3, [pc, #284]	(12c4 <Virtual_Com_Port_Reset+0x130>)
    11a8:	79db      	ldrb	r3, [r3, #7]
    11aa:	7453      	strb	r3, [r2, #17]

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
    11ac:	4b44      	ldr	r3, [pc, #272]	(12c0 <Virtual_Com_Port_Reset+0x12c>)
    11ae:	681a      	ldr	r2, [r3, #0]
    11b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    11b4:	74d3      	strb	r3, [r2, #19]

  /* Init EP3 OUT as Bulk endpoint */
  OTG_DEV_EP_Init(EP3_OUT, OTG_DEV_EP_TYPE_BULK, VIRTUAL_COM_PORT_DATA_SIZE);
#else

  SetBTABLE(BTABLE_ADDRESS);
    11b6:	f04f 0000 	mov.w	r0, #0	; 0x0
    11ba:	f001 fc2d 	bl	2a18 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
    11be:	f04f 0000 	mov.w	r0, #0	; 0x0
    11c2:	f44f 7100 	mov.w	r1, #512	; 0x200
    11c6:	f001 fc71 	bl	2aac <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
    11ca:	f04f 0000 	mov.w	r0, #0	; 0x0
    11ce:	f04f 0110 	mov.w	r1, #16	; 0x10
    11d2:	f001 fcaf 	bl	2b34 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    11d6:	f04f 0000 	mov.w	r0, #0	; 0x0
    11da:	f04f 0140 	mov.w	r1, #64	; 0x40
    11de:	f002 f883 	bl	32e8 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
    11e2:	f04f 0000 	mov.w	r0, #0	; 0x0
    11e6:	f04f 0180 	mov.w	r1, #128	; 0x80
    11ea:	f002 f857 	bl	329c <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
    11ee:	f04f 0000 	mov.w	r0, #0	; 0x0
    11f2:	f001 fe3d 	bl	2e70 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
    11f6:	4b34      	ldr	r3, [pc, #208]	(12c8 <Virtual_Com_Port_Reset+0x134>)
    11f8:	f893 302c 	ldrb.w	r3, [r3, #44]
    11fc:	f04f 0000 	mov.w	r0, #0	; 0x0
    1200:	4619      	mov	r1, r3
    1202:	f002 f92b 	bl	345c <SetEPRxCount>
  SetEPRxValid(ENDP0);
    1206:	f04f 0000 	mov.w	r0, #0	; 0x0
    120a:	f001 fda3 	bl	2d54 <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
    120e:	f04f 0001 	mov.w	r0, #1	; 0x1
    1212:	f04f 0100 	mov.w	r1, #0	; 0x0
    1216:	f001 fc49 	bl	2aac <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
    121a:	f04f 0001 	mov.w	r0, #1	; 0x1
    121e:	f04f 01c0 	mov.w	r1, #192	; 0xc0
    1222:	f002 f83b 	bl	329c <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
    1226:	f04f 0001 	mov.w	r0, #1	; 0x1
    122a:	f04f 0120 	mov.w	r1, #32	; 0x20
    122e:	f001 fc81 	bl	2b34 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
    1232:	f04f 0001 	mov.w	r0, #1	; 0x1
    1236:	f04f 0100 	mov.w	r1, #0	; 0x0
    123a:	f001 fcbb 	bl	2bb4 <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
    123e:	f04f 0002 	mov.w	r0, #2	; 0x2
    1242:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    1246:	f001 fc31 	bl	2aac <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
    124a:	f04f 0002 	mov.w	r0, #2	; 0x2
    124e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1252:	f002 f823 	bl	329c <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
    1256:	f04f 0002 	mov.w	r0, #2	; 0x2
    125a:	f04f 0100 	mov.w	r1, #0	; 0x0
    125e:	f001 fca9 	bl	2bb4 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
    1262:	f04f 0002 	mov.w	r0, #2	; 0x2
    1266:	f04f 0120 	mov.w	r1, #32	; 0x20
    126a:	f001 fc63 	bl	2b34 <SetEPTxStatus>

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
    126e:	f04f 0003 	mov.w	r0, #3	; 0x3
    1272:	f04f 0100 	mov.w	r1, #0	; 0x0
    1276:	f001 fc19 	bl	2aac <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
    127a:	f04f 0003 	mov.w	r0, #3	; 0x3
    127e:	f44f 7188 	mov.w	r1, #272	; 0x110
    1282:	f002 f831 	bl	32e8 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
    1286:	f04f 0003 	mov.w	r0, #3	; 0x3
    128a:	f04f 0140 	mov.w	r1, #64	; 0x40
    128e:	f002 f8e5 	bl	345c <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
    1292:	f04f 0003 	mov.w	r0, #3	; 0x3
    1296:	f44f 5140 	mov.w	r1, #12288	; 0x3000
    129a:	f001 fc8b 	bl	2bb4 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
    129e:	f04f 0003 	mov.w	r0, #3	; 0x3
    12a2:	f04f 0100 	mov.w	r1, #0	; 0x0
    12a6:	f001 fc45 	bl	2b34 <SetEPTxStatus>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
    12aa:	f04f 0000 	mov.w	r0, #0	; 0x0
    12ae:	f001 fa01 	bl	26b4 <SetDeviceAddress>
#endif /* STM32F10X_CL */

  bDeviceState = ATTACHED;
    12b2:	4a06      	ldr	r2, [pc, #24]	(12cc <Virtual_Com_Port_Reset+0x138>)
    12b4:	f04f 0301 	mov.w	r3, #1	; 0x1
    12b8:	6013      	str	r3, [r2, #0]
}
    12ba:	46bd      	mov	sp, r7
    12bc:	bd80      	pop	{r7, pc}
    12be:	46c0      	nop			(mov r8, r8)
    12c0:	200001fc 	.word	0x200001fc
    12c4:	00006bb2 	.word	0x00006bb2
    12c8:	20000060 	.word	0x20000060
    12cc:	20000268 	.word	0x20000268

000012d0 <Virtual_Com_Port_SetConfiguration>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
    12d0:	b480      	push	{r7}
    12d2:	b081      	sub	sp, #4
    12d4:	af00      	add	r7, sp, #0
  DEVICE_INFO *pInfo = &Device_Info;
    12d6:	4b07      	ldr	r3, [pc, #28]	(12f4 <Virtual_Com_Port_SetConfiguration+0x24>)
    12d8:	603b      	str	r3, [r7, #0]

  if (pInfo->Current_Configuration != 0)
    12da:	683b      	ldr	r3, [r7, #0]
    12dc:	7c9b      	ldrb	r3, [r3, #18]
    12de:	2b00      	cmp	r3, #0
    12e0:	d003      	beq.n	12ea <Virtual_Com_Port_SetConfiguration+0x1a>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
    12e2:	4a05      	ldr	r2, [pc, #20]	(12f8 <Virtual_Com_Port_SetConfiguration+0x28>)
    12e4:	f04f 0305 	mov.w	r3, #5	; 0x5
    12e8:	6013      	str	r3, [r2, #0]
  }
}
    12ea:	f107 0704 	add.w	r7, r7, #4	; 0x4
    12ee:	46bd      	mov	sp, r7
    12f0:	bc80      	pop	{r7}
    12f2:	4770      	bx	lr
    12f4:	200001d4 	.word	0x200001d4
    12f8:	20000268 	.word	0x20000268

000012fc <Virtual_Com_Port_SetDeviceAddress>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
    12fc:	b480      	push	{r7}
    12fe:	af00      	add	r7, sp, #0
  bDeviceState = ADDRESSED;
    1300:	4a03      	ldr	r2, [pc, #12]	(1310 <Virtual_Com_Port_SetDeviceAddress+0x14>)
    1302:	f04f 0304 	mov.w	r3, #4	; 0x4
    1306:	6013      	str	r3, [r2, #0]
}
    1308:	46bd      	mov	sp, r7
    130a:	bc80      	pop	{r7}
    130c:	4770      	bx	lr
    130e:	46c0      	nop			(mov r8, r8)
    1310:	20000268 	.word	0x20000268

00001314 <Virtual_Com_Port_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
    1314:	b580      	push	{r7, lr}
    1316:	af00      	add	r7, sp, #0
	// configute the physical UART using a lineconfig send over USB
  if (Request == SET_LINE_CODING)
    1318:	4b05      	ldr	r3, [pc, #20]	(1330 <Virtual_Com_Port_Status_In+0x1c>)
    131a:	781b      	ldrb	r3, [r3, #0]
    131c:	2b20      	cmp	r3, #32
    131e:	d105      	bne.n	132c <Virtual_Com_Port_Status_In+0x18>
  {
    USART_Config();
    1320:	f7ff fa94 	bl	84c <USART_Config>
    Request = 0;
    1324:	4b02      	ldr	r3, [pc, #8]	(1330 <Virtual_Com_Port_Status_In+0x1c>)
    1326:	f04f 0200 	mov.w	r2, #0	; 0x0
    132a:	701a      	strb	r2, [r3, #0]
  }
}
    132c:	46bd      	mov	sp, r7
    132e:	bd80      	pop	{r7, pc}
    1330:	2000025c 	.word	0x2000025c

00001334 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
    1334:	b480      	push	{r7}
    1336:	af00      	add	r7, sp, #0
    1338:	46bd      	mov	sp, r7
    133a:	bc80      	pop	{r7}
    133c:	4770      	bx	lr
    133e:	46c0      	nop			(mov r8, r8)

00001340 <Virtual_Com_Port_Data_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
    1340:	b580      	push	{r7, lr}
    1342:	b083      	sub	sp, #12
    1344:	af00      	add	r7, sp, #0
    1346:	4603      	mov	r3, r0
    1348:	713b      	strb	r3, [r7, #4]
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
    134a:	f04f 0300 	mov.w	r3, #0	; 0x0
    134e:	60bb      	str	r3, [r7, #8]

  if (RequestNo == GET_LINE_CODING)
    1350:	793b      	ldrb	r3, [r7, #4]
    1352:	2b21      	cmp	r3, #33
    1354:	d109      	bne.n	136a <Virtual_Com_Port_Data_Setup+0x2a>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    1356:	4b1b      	ldr	r3, [pc, #108]	(13c4 <Virtual_Com_Port_Data_Setup+0x84>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1360:	2b21      	cmp	r3, #33
    1362:	d112      	bne.n	138a <Virtual_Com_Port_Data_Setup+0x4a>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    1364:	4b18      	ldr	r3, [pc, #96]	(13c8 <Virtual_Com_Port_Data_Setup+0x88>)
    1366:	60bb      	str	r3, [r7, #8]
    1368:	e00f      	b.n	138a <Virtual_Com_Port_Data_Setup+0x4a>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
    136a:	793b      	ldrb	r3, [r7, #4]
    136c:	2b20      	cmp	r3, #32
    136e:	d10c      	bne.n	138a <Virtual_Com_Port_Data_Setup+0x4a>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    1370:	4b14      	ldr	r3, [pc, #80]	(13c4 <Virtual_Com_Port_Data_Setup+0x84>)
    1372:	681b      	ldr	r3, [r3, #0]
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    137a:	2b21      	cmp	r3, #33
    137c:	d101      	bne.n	1382 <Virtual_Com_Port_Data_Setup+0x42>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    137e:	4b13      	ldr	r3, [pc, #76]	(13cc <Virtual_Com_Port_Data_Setup+0x8c>)
    1380:	60bb      	str	r3, [r7, #8]
    }
    Request = SET_LINE_CODING;
    1382:	4b13      	ldr	r3, [pc, #76]	(13d0 <Virtual_Com_Port_Data_Setup+0x90>)
    1384:	f04f 0220 	mov.w	r2, #32	; 0x20
    1388:	701a      	strb	r2, [r3, #0]
  }

  if (CopyRoutine == NULL)
    138a:	68bb      	ldr	r3, [r7, #8]
    138c:	2b00      	cmp	r3, #0
    138e:	d103      	bne.n	1398 <Virtual_Com_Port_Data_Setup+0x58>
  {
    return USB_UNSUPPORT;
    1390:	f04f 0302 	mov.w	r3, #2	; 0x2
    1394:	603b      	str	r3, [r7, #0]
    1396:	e00f      	b.n	13b8 <Virtual_Com_Port_Data_Setup+0x78>
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
    1398:	4b0a      	ldr	r3, [pc, #40]	(13c4 <Virtual_Com_Port_Data_Setup+0x84>)
    139a:	681a      	ldr	r2, [r3, #0]
    139c:	68bb      	ldr	r3, [r7, #8]
    139e:	6213      	str	r3, [r2, #32]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
    13a0:	4b08      	ldr	r3, [pc, #32]	(13c4 <Virtual_Com_Port_Data_Setup+0x84>)
    13a2:	681a      	ldr	r2, [r3, #0]
    13a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    13a8:	8353      	strh	r3, [r2, #26]
  (*CopyRoutine)(0);
    13aa:	68bb      	ldr	r3, [r7, #8]
    13ac:	f04f 0000 	mov.w	r0, #0	; 0x0
    13b0:	4798      	blx	r3
  return USB_SUCCESS;
    13b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    13b6:	603b      	str	r3, [r7, #0]
    13b8:	683b      	ldr	r3, [r7, #0]
}
    13ba:	4618      	mov	r0, r3
    13bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    13c0:	46bd      	mov	sp, r7
    13c2:	bd80      	pop	{r7, pc}
    13c4:	200001fc 	.word	0x200001fc
    13c8:	000014f5 	.word	0x000014f5
    13cc:	00001531 	.word	0x00001531
    13d0:	2000025c 	.word	0x2000025c

000013d4 <Virtual_Com_Port_NoData_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{
    13d4:	b480      	push	{r7}
    13d6:	b082      	sub	sp, #8
    13d8:	af00      	add	r7, sp, #0
    13da:	4603      	mov	r3, r0
    13dc:	713b      	strb	r3, [r7, #4]

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    13de:	4b0f      	ldr	r3, [pc, #60]	(141c <Virtual_Com_Port_NoData_Setup+0x48>)
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    13e8:	2b21      	cmp	r3, #33
    13ea:	d10d      	bne.n	1408 <Virtual_Com_Port_NoData_Setup+0x34>
  {
    if (RequestNo == SET_COMM_FEATURE)
    13ec:	793b      	ldrb	r3, [r7, #4]
    13ee:	2b02      	cmp	r3, #2
    13f0:	d103      	bne.n	13fa <Virtual_Com_Port_NoData_Setup+0x26>
    {
      return USB_SUCCESS;
    13f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    13f6:	603b      	str	r3, [r7, #0]
    13f8:	e009      	b.n	140e <Virtual_Com_Port_NoData_Setup+0x3a>
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
    13fa:	793b      	ldrb	r3, [r7, #4]
    13fc:	2b22      	cmp	r3, #34
    13fe:	d103      	bne.n	1408 <Virtual_Com_Port_NoData_Setup+0x34>
    {
      return USB_SUCCESS;
    1400:	f04f 0300 	mov.w	r3, #0	; 0x0
    1404:	603b      	str	r3, [r7, #0]
    1406:	e002      	b.n	140e <Virtual_Com_Port_NoData_Setup+0x3a>
    }
  }

  return USB_UNSUPPORT;
    1408:	f04f 0302 	mov.w	r3, #2	; 0x2
    140c:	603b      	str	r3, [r7, #0]
    140e:	683b      	ldr	r3, [r7, #0]
}
    1410:	4618      	mov	r0, r3
    1412:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1416:	46bd      	mov	sp, r7
    1418:	bc80      	pop	{r7}
    141a:	4770      	bx	lr
    141c:	200001fc 	.word	0x200001fc

00001420 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
    1420:	b580      	push	{r7, lr}
    1422:	b081      	sub	sp, #4
    1424:	af00      	add	r7, sp, #0
    1426:	4603      	mov	r3, r0
    1428:	803b      	strh	r3, [r7, #0]
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
    142a:	883b      	ldrh	r3, [r7, #0]
    142c:	4618      	mov	r0, r3
    142e:	4904      	ldr	r1, [pc, #16]	(1440 <Virtual_Com_Port_GetDeviceDescriptor+0x20>)
    1430:	f000 fc3e 	bl	1cb0 <Standard_GetDescriptorData>
    1434:	4603      	mov	r3, r0
}
    1436:	4618      	mov	r0, r3
    1438:	f107 0704 	add.w	r7, r7, #4	; 0x4
    143c:	46bd      	mov	sp, r7
    143e:	bd80      	pop	{r7, pc}
    1440:	200000b4 	.word	0x200000b4

00001444 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
    1444:	b580      	push	{r7, lr}
    1446:	b081      	sub	sp, #4
    1448:	af00      	add	r7, sp, #0
    144a:	4603      	mov	r3, r0
    144c:	803b      	strh	r3, [r7, #0]
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
    144e:	883b      	ldrh	r3, [r7, #0]
    1450:	4618      	mov	r0, r3
    1452:	4904      	ldr	r1, [pc, #16]	(1464 <Virtual_Com_Port_GetConfigDescriptor+0x20>)
    1454:	f000 fc2c 	bl	1cb0 <Standard_GetDescriptorData>
    1458:	4603      	mov	r3, r0
}
    145a:	4618      	mov	r0, r3
    145c:	f107 0704 	add.w	r7, r7, #4	; 0x4
    1460:	46bd      	mov	sp, r7
    1462:	bd80      	pop	{r7, pc}
    1464:	200000bc 	.word	0x200000bc

00001468 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
    1468:	b580      	push	{r7, lr}
    146a:	b083      	sub	sp, #12
    146c:	af00      	add	r7, sp, #0
    146e:	4603      	mov	r3, r0
    1470:	80bb      	strh	r3, [r7, #4]
  uint8_t wValue0 = pInformation->USBwValue0;
    1472:	4b0e      	ldr	r3, [pc, #56]	(14ac <Virtual_Com_Port_GetStringDescriptor+0x44>)
    1474:	681b      	ldr	r3, [r3, #0]
    1476:	795b      	ldrb	r3, [r3, #5]
    1478:	72fb      	strb	r3, [r7, #11]
  if (wValue0 > 4)
    147a:	7afb      	ldrb	r3, [r7, #11]
    147c:	2b04      	cmp	r3, #4
    147e:	d903      	bls.n	1488 <Virtual_Com_Port_GetStringDescriptor+0x20>
  {
    return NULL;
    1480:	f04f 0300 	mov.w	r3, #0	; 0x0
    1484:	603b      	str	r3, [r7, #0]
    1486:	e00b      	b.n	14a0 <Virtual_Com_Port_GetStringDescriptor+0x38>
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
    1488:	88b9      	ldrh	r1, [r7, #4]
    148a:	7afb      	ldrb	r3, [r7, #11]
    148c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    1490:	4b07      	ldr	r3, [pc, #28]	(14b0 <Virtual_Com_Port_GetStringDescriptor+0x48>)
    1492:	4413      	add	r3, r2
    1494:	4608      	mov	r0, r1
    1496:	4619      	mov	r1, r3
    1498:	f000 fc0a 	bl	1cb0 <Standard_GetDescriptorData>
    149c:	4603      	mov	r3, r0
    149e:	603b      	str	r3, [r7, #0]
    14a0:	683b      	ldr	r3, [r7, #0]
  }
}
    14a2:	4618      	mov	r0, r3
    14a4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14a8:	46bd      	mov	sp, r7
    14aa:	bd80      	pop	{r7, pc}
    14ac:	200001fc 	.word	0x200001fc
    14b0:	200000c4 	.word	0x200000c4

000014b4 <Virtual_Com_Port_Get_Interface_Setting>:
* Input2         : uint8_t: AlternateSetting : Alternate Setting number.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
    14b4:	b480      	push	{r7}
    14b6:	b083      	sub	sp, #12
    14b8:	af00      	add	r7, sp, #0
    14ba:	4603      	mov	r3, r0
    14bc:	460a      	mov	r2, r1
    14be:	723b      	strb	r3, [r7, #8]
    14c0:	4613      	mov	r3, r2
    14c2:	713b      	strb	r3, [r7, #4]
  if (AlternateSetting > 0)
    14c4:	793b      	ldrb	r3, [r7, #4]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d003      	beq.n	14d2 <Virtual_Com_Port_Get_Interface_Setting+0x1e>
  {
    return USB_UNSUPPORT;
    14ca:	f04f 0302 	mov.w	r3, #2	; 0x2
    14ce:	603b      	str	r3, [r7, #0]
    14d0:	e009      	b.n	14e6 <Virtual_Com_Port_Get_Interface_Setting+0x32>
  }
  else if (Interface > 1)
    14d2:	7a3b      	ldrb	r3, [r7, #8]
    14d4:	2b01      	cmp	r3, #1
    14d6:	d903      	bls.n	14e0 <Virtual_Com_Port_Get_Interface_Setting+0x2c>
  {
    return USB_UNSUPPORT;
    14d8:	f04f 0302 	mov.w	r3, #2	; 0x2
    14dc:	603b      	str	r3, [r7, #0]
    14de:	e002      	b.n	14e6 <Virtual_Com_Port_Get_Interface_Setting+0x32>
  }
  return USB_SUCCESS;
    14e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    14e4:	603b      	str	r3, [r7, #0]
    14e6:	683b      	ldr	r3, [r7, #0]
}
    14e8:	4618      	mov	r0, r3
    14ea:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14ee:	46bd      	mov	sp, r7
    14f0:	bc80      	pop	{r7}
    14f2:	4770      	bx	lr

000014f4 <Virtual_Com_Port_GetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Inecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
    14f4:	b480      	push	{r7}
    14f6:	b082      	sub	sp, #8
    14f8:	af00      	add	r7, sp, #0
    14fa:	4603      	mov	r3, r0
    14fc:	80bb      	strh	r3, [r7, #4]
  if (Length == 0)
    14fe:	88bb      	ldrh	r3, [r7, #4]
    1500:	2b00      	cmp	r3, #0
    1502:	d108      	bne.n	1516 <Virtual_Com_Port_GetLineCoding+0x22>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    1504:	4b08      	ldr	r3, [pc, #32]	(1528 <Virtual_Com_Port_GetLineCoding+0x34>)
    1506:	681a      	ldr	r2, [r3, #0]
    1508:	f04f 0308 	mov.w	r3, #8	; 0x8
    150c:	8313      	strh	r3, [r2, #24]
    return NULL;
    150e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1512:	603b      	str	r3, [r7, #0]
    1514:	e001      	b.n	151a <Virtual_Com_Port_GetLineCoding+0x26>
  }
  return(uint8_t *)&linecoding;
    1516:	4b05      	ldr	r3, [pc, #20]	(152c <Virtual_Com_Port_GetLineCoding+0x38>)
    1518:	603b      	str	r3, [r7, #0]
    151a:	683b      	ldr	r3, [r7, #0]
}
    151c:	4618      	mov	r0, r3
    151e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1522:	46bd      	mov	sp, r7
    1524:	bc80      	pop	{r7}
    1526:	4770      	bx	lr
    1528:	200001fc 	.word	0x200001fc
    152c:	20000054 	.word	0x20000054

00001530 <Virtual_Com_Port_SetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
    1530:	b480      	push	{r7}
    1532:	b082      	sub	sp, #8
    1534:	af00      	add	r7, sp, #0
    1536:	4603      	mov	r3, r0
    1538:	80bb      	strh	r3, [r7, #4]
  if (Length == 0)
    153a:	88bb      	ldrh	r3, [r7, #4]
    153c:	2b00      	cmp	r3, #0
    153e:	d108      	bne.n	1552 <Virtual_Com_Port_SetLineCoding+0x22>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    1540:	4b08      	ldr	r3, [pc, #32]	(1564 <Virtual_Com_Port_SetLineCoding+0x34>)
    1542:	681a      	ldr	r2, [r3, #0]
    1544:	f04f 0308 	mov.w	r3, #8	; 0x8
    1548:	8313      	strh	r3, [r2, #24]
    return NULL;
    154a:	f04f 0300 	mov.w	r3, #0	; 0x0
    154e:	603b      	str	r3, [r7, #0]
    1550:	e001      	b.n	1556 <Virtual_Com_Port_SetLineCoding+0x26>
  }
  return(uint8_t *)&linecoding;
    1552:	4b05      	ldr	r3, [pc, #20]	(1568 <Virtual_Com_Port_SetLineCoding+0x38>)
    1554:	603b      	str	r3, [r7, #0]
    1556:	683b      	ldr	r3, [r7, #0]
}
    1558:	4618      	mov	r0, r3
    155a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    155e:	46bd      	mov	sp, r7
    1560:	bc80      	pop	{r7}
    1562:	4770      	bx	lr
    1564:	200001fc 	.word	0x200001fc
    1568:	20000054 	.word	0x20000054

0000156c <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
    156c:	b480      	push	{r7}
    156e:	af00      	add	r7, sp, #0
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
    1570:	4a08      	ldr	r2, [pc, #32]	(1594 <USB_SIL_Init+0x28>)
    1572:	f04f 0300 	mov.w	r3, #0	; 0x0
    1576:	6013      	str	r3, [r2, #0]
  wInterrupt_Mask = IMR_MSK;
    1578:	4a07      	ldr	r2, [pc, #28]	(1598 <USB_SIL_Init+0x2c>)
    157a:	f44f 4306 	mov.w	r3, #34304	; 0x8600
    157e:	8013      	strh	r3, [r2, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
    1580:	4a06      	ldr	r2, [pc, #24]	(159c <USB_SIL_Init+0x30>)
    1582:	4b05      	ldr	r3, [pc, #20]	(1598 <USB_SIL_Init+0x2c>)
    1584:	881b      	ldrh	r3, [r3, #0]
    1586:	6013      	str	r3, [r2, #0]
  /* Perform OTG Device initialization procedure (including EP0 init) */
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
    1588:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    158c:	4618      	mov	r0, r3
    158e:	46bd      	mov	sp, r7
    1590:	bc80      	pop	{r7}
    1592:	4770      	bx	lr
    1594:	40005c44 	.word	0x40005c44
    1598:	2000020a 	.word	0x2000020a
    159c:	40005c40 	.word	0x40005c40

000015a0 <USB_SIL_Write>:
*                  - wBufferSize: Number of data to be written (in bytes).
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	b083      	sub	sp, #12
    15a4:	af00      	add	r7, sp, #0
    15a6:	4603      	mov	r3, r0
    15a8:	6079      	str	r1, [r7, #4]
    15aa:	603a      	str	r2, [r7, #0]
    15ac:	723b      	strb	r3, [r7, #8]
#ifndef STM32F10X_CL

  /* Use the memory interface function to write to the selected endpoint */
  UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
    15ae:	7a3b      	ldrb	r3, [r7, #8]
    15b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    15b4:	4618      	mov	r0, r3
    15b6:	f001 febd 	bl	3334 <GetEPTxAddr>
    15ba:	4603      	mov	r3, r0
    15bc:	461a      	mov	r2, r3
    15be:	683b      	ldr	r3, [r7, #0]
    15c0:	b29b      	uxth	r3, r3
    15c2:	6878      	ldr	r0, [r7, #4]
    15c4:	4611      	mov	r1, r2
    15c6:	461a      	mov	r2, r3
    15c8:	f7ff fd2e 	bl	1028 <UserToPMABufferCopy>

  /* Update the data length in the control register */
  SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
    15cc:	7a3b      	ldrb	r3, [r7, #8]
    15ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    15d2:	683b      	ldr	r3, [r7, #0]
    15d4:	b29b      	uxth	r3, r3
    15d6:	4610      	mov	r0, r2
    15d8:	4619      	mov	r1, r3
    15da:	f001 fee7 	bl	33ac <SetEPTxCount>
   /* Use the PCD interface layer function to write to the selected endpoint */
   OTGD_FS_PCD_EP_Write (bEpAddr, pBufferPointer, wBufferSize); 
   
#endif /* STM32F10X_CL */

  return 0;
    15de:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    15e2:	4618      	mov	r0, r3
    15e4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    15e8:	46bd      	mov	sp, r7
    15ea:	bd80      	pop	{r7, pc}

000015ec <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
    15ec:	b580      	push	{r7, lr}
    15ee:	b083      	sub	sp, #12
    15f0:	af00      	add	r7, sp, #0
    15f2:	4603      	mov	r3, r0
    15f4:	6039      	str	r1, [r7, #0]
    15f6:	713b      	strb	r3, [r7, #4]
  uint32_t DataLength = 0;
    15f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    15fc:	60bb      	str	r3, [r7, #8]

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
    15fe:	793b      	ldrb	r3, [r7, #4]
    1600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1604:	4618      	mov	r0, r3
    1606:	f001 ff9b 	bl	3540 <GetEPRxCount>
    160a:	4603      	mov	r3, r0
    160c:	60bb      	str	r3, [r7, #8]
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
    160e:	793b      	ldrb	r3, [r7, #4]
    1610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1614:	4618      	mov	r0, r3
    1616:	f001 feab 	bl	3370 <GetEPRxAddr>
    161a:	4603      	mov	r3, r0
    161c:	461a      	mov	r2, r3
    161e:	68bb      	ldr	r3, [r7, #8]
    1620:	b29b      	uxth	r3, r3
    1622:	6838      	ldr	r0, [r7, #0]
    1624:	4611      	mov	r1, r2
    1626:	461a      	mov	r2, r3
    1628:	f7ff fd44 	bl	10b4 <PMAToUserBufferCopy>
  OTGD_FS_PCD_EP_Read (bEpAddr, pBufferPointer, DataLength);
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
    162c:	68bb      	ldr	r3, [r7, #8]
}
    162e:	4618      	mov	r0, r3
    1630:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1634:	46bd      	mov	sp, r7
    1636:	bd80      	pop	{r7, pc}

00001638 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
    1638:	b580      	push	{r7, lr}
    163a:	b082      	sub	sp, #8
    163c:	af00      	add	r7, sp, #0
    163e:	4603      	mov	r3, r0
    1640:	80bb      	strh	r3, [r7, #4]
  if (Length == 0)
    1642:	88bb      	ldrh	r3, [r7, #4]
    1644:	2b00      	cmp	r3, #0
    1646:	d108      	bne.n	165a <Standard_GetConfiguration+0x22>
  {
    pInformation->Ctrl_Info.Usb_wLength =
    1648:	4b0b      	ldr	r3, [pc, #44]	(1678 <Standard_GetConfiguration+0x40>)
    164a:	681a      	ldr	r2, [r3, #0]
    164c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1650:	8313      	strh	r3, [r2, #24]
      sizeof(pInformation->Current_Configuration);
    return 0;
    1652:	f04f 0300 	mov.w	r3, #0	; 0x0
    1656:	603b      	str	r3, [r7, #0]
    1658:	e008      	b.n	166c <Standard_GetConfiguration+0x34>
  }
  pUser_Standard_Requests->User_GetConfiguration();
    165a:	4b08      	ldr	r3, [pc, #32]	(167c <Standard_GetConfiguration+0x44>)
    165c:	681b      	ldr	r3, [r3, #0]
    165e:	681b      	ldr	r3, [r3, #0]
    1660:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
    1662:	4b05      	ldr	r3, [pc, #20]	(1678 <Standard_GetConfiguration+0x40>)
    1664:	681b      	ldr	r3, [r3, #0]
    1666:	f103 0312 	add.w	r3, r3, #18	; 0x12
    166a:	603b      	str	r3, [r7, #0]
    166c:	683b      	ldr	r3, [r7, #0]
}
    166e:	4618      	mov	r0, r3
    1670:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1674:	46bd      	mov	sp, r7
    1676:	bd80      	pop	{r7, pc}
    1678:	200001fc 	.word	0x200001fc
    167c:	20000204 	.word	0x20000204

00001680 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
    1680:	b580      	push	{r7, lr}
    1682:	b081      	sub	sp, #4
    1684:	af00      	add	r7, sp, #0

  if ((pInformation->USBwValue0 <=
    1686:	4b14      	ldr	r3, [pc, #80]	(16d8 <Standard_SetConfiguration+0x58>)
    1688:	681b      	ldr	r3, [r3, #0]
    168a:	795a      	ldrb	r2, [r3, #5]
    168c:	4b13      	ldr	r3, [pc, #76]	(16dc <Standard_SetConfiguration+0x5c>)
    168e:	785b      	ldrb	r3, [r3, #1]
    1690:	429a      	cmp	r2, r3
    1692:	d817      	bhi.n	16c4 <Standard_SetConfiguration+0x44>
    1694:	4b10      	ldr	r3, [pc, #64]	(16d8 <Standard_SetConfiguration+0x58>)
    1696:	681b      	ldr	r3, [r3, #0]
    1698:	791b      	ldrb	r3, [r3, #4]
    169a:	2b00      	cmp	r3, #0
    169c:	d112      	bne.n	16c4 <Standard_SetConfiguration+0x44>
    169e:	4b0e      	ldr	r3, [pc, #56]	(16d8 <Standard_SetConfiguration+0x58>)
    16a0:	681b      	ldr	r3, [r3, #0]
    16a2:	891b      	ldrh	r3, [r3, #8]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d10d      	bne.n	16c4 <Standard_SetConfiguration+0x44>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
    16a8:	4b0b      	ldr	r3, [pc, #44]	(16d8 <Standard_SetConfiguration+0x58>)
    16aa:	681a      	ldr	r2, [r3, #0]
    16ac:	4b0a      	ldr	r3, [pc, #40]	(16d8 <Standard_SetConfiguration+0x58>)
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	795b      	ldrb	r3, [r3, #5]
    16b2:	7493      	strb	r3, [r2, #18]
    pUser_Standard_Requests->User_SetConfiguration();
    16b4:	4b0a      	ldr	r3, [pc, #40]	(16e0 <Standard_SetConfiguration+0x60>)
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	685b      	ldr	r3, [r3, #4]
    16ba:	4798      	blx	r3
    return USB_SUCCESS;
    16bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    16c0:	603b      	str	r3, [r7, #0]
    16c2:	e002      	b.n	16ca <Standard_SetConfiguration+0x4a>
  }
  else
  {
    return USB_UNSUPPORT;
    16c4:	f04f 0302 	mov.w	r3, #2	; 0x2
    16c8:	603b      	str	r3, [r7, #0]
    16ca:	683b      	ldr	r3, [r7, #0]
  }
}
    16cc:	4618      	mov	r0, r3
    16ce:	f107 0704 	add.w	r7, r7, #4	; 0x4
    16d2:	46bd      	mov	sp, r7
    16d4:	bd80      	pop	{r7, pc}
    16d6:	46c0      	nop			(mov r8, r8)
    16d8:	200001fc 	.word	0x200001fc
    16dc:	2000005c 	.word	0x2000005c
    16e0:	20000204 	.word	0x20000204

000016e4 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
    16e4:	b580      	push	{r7, lr}
    16e6:	b082      	sub	sp, #8
    16e8:	af00      	add	r7, sp, #0
    16ea:	4603      	mov	r3, r0
    16ec:	80bb      	strh	r3, [r7, #4]
  if (Length == 0)
    16ee:	88bb      	ldrh	r3, [r7, #4]
    16f0:	2b00      	cmp	r3, #0
    16f2:	d108      	bne.n	1706 <Standard_GetInterface+0x22>
  {
    pInformation->Ctrl_Info.Usb_wLength =
    16f4:	4b0b      	ldr	r3, [pc, #44]	(1724 <Standard_GetInterface+0x40>)
    16f6:	681a      	ldr	r2, [r3, #0]
    16f8:	f04f 0301 	mov.w	r3, #1	; 0x1
    16fc:	8313      	strh	r3, [r2, #24]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
    16fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    1702:	603b      	str	r3, [r7, #0]
    1704:	e008      	b.n	1718 <Standard_GetInterface+0x34>
  }
  pUser_Standard_Requests->User_GetInterface();
    1706:	4b08      	ldr	r3, [pc, #32]	(1728 <Standard_GetInterface+0x44>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	689b      	ldr	r3, [r3, #8]
    170c:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
    170e:	4b05      	ldr	r3, [pc, #20]	(1724 <Standard_GetInterface+0x40>)
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	f103 0314 	add.w	r3, r3, #20	; 0x14
    1716:	603b      	str	r3, [r7, #0]
    1718:	683b      	ldr	r3, [r7, #0]
}
    171a:	4618      	mov	r0, r3
    171c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1720:	46bd      	mov	sp, r7
    1722:	bd80      	pop	{r7, pc}
    1724:	200001fc 	.word	0x200001fc
    1728:	20000204 	.word	0x20000204

0000172c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
    172c:	b590      	push	{r4, r7, lr}
    172e:	b082      	sub	sp, #8
    1730:	af00      	add	r7, sp, #0
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
    1732:	4b22      	ldr	r3, [pc, #136]	(17bc <Standard_SetInterface+0x90>)
    1734:	681b      	ldr	r3, [r3, #0]
    1736:	699c      	ldr	r4, [r3, #24]
    1738:	4b21      	ldr	r3, [pc, #132]	(17c0 <Standard_SetInterface+0x94>)
    173a:	681b      	ldr	r3, [r3, #0]
    173c:	7a5b      	ldrb	r3, [r3, #9]
    173e:	461a      	mov	r2, r3
    1740:	4b1f      	ldr	r3, [pc, #124]	(17c0 <Standard_SetInterface+0x94>)
    1742:	681b      	ldr	r3, [r3, #0]
    1744:	795b      	ldrb	r3, [r3, #5]
    1746:	4610      	mov	r0, r2
    1748:	4619      	mov	r1, r3
    174a:	47a0      	blx	r4
    174c:	4603      	mov	r3, r0
    174e:	607b      	str	r3, [r7, #4]

  if (pInformation->Current_Configuration != 0)
    1750:	4b1b      	ldr	r3, [pc, #108]	(17c0 <Standard_SetInterface+0x94>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	7c9b      	ldrb	r3, [r3, #18]
    1756:	2b00      	cmp	r3, #0
    1758:	d027      	beq.n	17aa <Standard_SetInterface+0x7e>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	2b00      	cmp	r3, #0
    175e:	d109      	bne.n	1774 <Standard_SetInterface+0x48>
    1760:	4b17      	ldr	r3, [pc, #92]	(17c0 <Standard_SetInterface+0x94>)
    1762:	681b      	ldr	r3, [r3, #0]
    1764:	7a1b      	ldrb	r3, [r3, #8]
    1766:	2b00      	cmp	r3, #0
    1768:	d104      	bne.n	1774 <Standard_SetInterface+0x48>
    176a:	4b15      	ldr	r3, [pc, #84]	(17c0 <Standard_SetInterface+0x94>)
    176c:	681b      	ldr	r3, [r3, #0]
    176e:	791b      	ldrb	r3, [r3, #4]
    1770:	2b00      	cmp	r3, #0
    1772:	d003      	beq.n	177c <Standard_SetInterface+0x50>
        || (pInformation->USBwValue1 != 0))
    {
      return  USB_UNSUPPORT;
    1774:	f04f 0302 	mov.w	r3, #2	; 0x2
    1778:	603b      	str	r3, [r7, #0]
    177a:	e019      	b.n	17b0 <Standard_SetInterface+0x84>
    }
    else if (Re == USB_SUCCESS)
    177c:	687b      	ldr	r3, [r7, #4]
    177e:	2b00      	cmp	r3, #0
    1780:	d113      	bne.n	17aa <Standard_SetInterface+0x7e>
    {
      pUser_Standard_Requests->User_SetInterface();
    1782:	4b10      	ldr	r3, [pc, #64]	(17c4 <Standard_SetInterface+0x98>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	68db      	ldr	r3, [r3, #12]
    1788:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
    178a:	4b0d      	ldr	r3, [pc, #52]	(17c0 <Standard_SetInterface+0x94>)
    178c:	681a      	ldr	r2, [r3, #0]
    178e:	4b0c      	ldr	r3, [pc, #48]	(17c0 <Standard_SetInterface+0x94>)
    1790:	681b      	ldr	r3, [r3, #0]
    1792:	7a5b      	ldrb	r3, [r3, #9]
    1794:	74d3      	strb	r3, [r2, #19]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
    1796:	4b0a      	ldr	r3, [pc, #40]	(17c0 <Standard_SetInterface+0x94>)
    1798:	681a      	ldr	r2, [r3, #0]
    179a:	4b09      	ldr	r3, [pc, #36]	(17c0 <Standard_SetInterface+0x94>)
    179c:	681b      	ldr	r3, [r3, #0]
    179e:	795b      	ldrb	r3, [r3, #5]
    17a0:	7513      	strb	r3, [r2, #20]
      return USB_SUCCESS;
    17a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    17a6:	603b      	str	r3, [r7, #0]
    17a8:	e002      	b.n	17b0 <Standard_SetInterface+0x84>
    }

  }

  return USB_UNSUPPORT;
    17aa:	f04f 0302 	mov.w	r3, #2	; 0x2
    17ae:	603b      	str	r3, [r7, #0]
    17b0:	683b      	ldr	r3, [r7, #0]
}
    17b2:	4618      	mov	r0, r3
    17b4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    17b8:	46bd      	mov	sp, r7
    17ba:	bd90      	pop	{r4, r7, pc}
    17bc:	20000200 	.word	0x20000200
    17c0:	200001fc 	.word	0x200001fc
    17c4:	20000204 	.word	0x20000204

000017c8 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b083      	sub	sp, #12
    17cc:	af00      	add	r7, sp, #0
    17ce:	4603      	mov	r3, r0
    17d0:	80bb      	strh	r3, [r7, #4]
  if (Length == 0)
    17d2:	88bb      	ldrh	r3, [r7, #4]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d108      	bne.n	17ea <Standard_GetStatus+0x22>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    17d8:	4b4b      	ldr	r3, [pc, #300]	(1908 <Standard_GetStatus+0x140>)
    17da:	681a      	ldr	r2, [r3, #0]
    17dc:	f04f 0302 	mov.w	r3, #2	; 0x2
    17e0:	8313      	strh	r3, [r2, #24]
    return 0;
    17e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    17e6:	603b      	str	r3, [r7, #0]
    17e8:	e088      	b.n	18fc <Standard_GetStatus+0x134>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
    17ea:	4a48      	ldr	r2, [pc, #288]	(190c <Standard_GetStatus+0x144>)
    17ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    17f0:	8013      	strh	r3, [r2, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    17f2:	4b45      	ldr	r3, [pc, #276]	(1908 <Standard_GetStatus+0x140>)
    17f4:	681b      	ldr	r3, [r3, #0]
    17f6:	781b      	ldrb	r3, [r3, #0]
    17f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    17fc:	2b00      	cmp	r3, #0
    17fe:	d12a      	bne.n	1856 <Standard_GetStatus+0x8e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
    1800:	4b41      	ldr	r3, [pc, #260]	(1908 <Standard_GetStatus+0x140>)
    1802:	681b      	ldr	r3, [r3, #0]
    1804:	7c5b      	ldrb	r3, [r3, #17]
    1806:	727b      	strb	r3, [r7, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    1808:	7a7b      	ldrb	r3, [r7, #9]
    180a:	f003 0320 	and.w	r3, r3, #32	; 0x20
    180e:	2b00      	cmp	r3, #0
    1810:	d007      	beq.n	1822 <Standard_GetStatus+0x5a>
    {
      SetBit(StatusInfo0, 1);
    1812:	4b3e      	ldr	r3, [pc, #248]	(190c <Standard_GetStatus+0x144>)
    1814:	781b      	ldrb	r3, [r3, #0]
    1816:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    181a:	b2db      	uxtb	r3, r3
    181c:	4a3b      	ldr	r2, [pc, #236]	(190c <Standard_GetStatus+0x144>)
    181e:	7013      	strb	r3, [r2, #0]
    1820:	e005      	b.n	182e <Standard_GetStatus+0x66>
    }
    else
    {
      ClrBit(StatusInfo0, 1);
    1822:	4b3a      	ldr	r3, [pc, #232]	(190c <Standard_GetStatus+0x144>)
    1824:	781b      	ldrb	r3, [r3, #0]
    1826:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    182a:	4a38      	ldr	r2, [pc, #224]	(190c <Standard_GetStatus+0x144>)
    182c:	7013      	strb	r3, [r2, #0]
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
    182e:	7a7b      	ldrb	r3, [r7, #9]
    1830:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1834:	2b00      	cmp	r3, #0
    1836:	d007      	beq.n	1848 <Standard_GetStatus+0x80>
    {
      SetBit(StatusInfo0, 0);
    1838:	4b34      	ldr	r3, [pc, #208]	(190c <Standard_GetStatus+0x144>)
    183a:	781b      	ldrb	r3, [r3, #0]
    183c:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    1840:	b2db      	uxtb	r3, r3
    1842:	4a32      	ldr	r2, [pc, #200]	(190c <Standard_GetStatus+0x144>)
    1844:	7013      	strb	r3, [r2, #0]
    1846:	e053      	b.n	18f0 <Standard_GetStatus+0x128>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
    1848:	4b30      	ldr	r3, [pc, #192]	(190c <Standard_GetStatus+0x144>)
    184a:	781b      	ldrb	r3, [r3, #0]
    184c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1850:	4a2e      	ldr	r2, [pc, #184]	(190c <Standard_GetStatus+0x144>)
    1852:	7013      	strb	r3, [r2, #0]
    1854:	e04c      	b.n	18f0 <Standard_GetStatus+0x128>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    1856:	4b2c      	ldr	r3, [pc, #176]	(1908 <Standard_GetStatus+0x140>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	781b      	ldrb	r3, [r3, #0]
    185c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1860:	2b01      	cmp	r3, #1
    1862:	d102      	bne.n	186a <Standard_GetStatus+0xa2>
  {
    return (uint8_t *)&StatusInfo;
    1864:	4b29      	ldr	r3, [pc, #164]	(190c <Standard_GetStatus+0x144>)
    1866:	603b      	str	r3, [r7, #0]
    1868:	e048      	b.n	18fc <Standard_GetStatus+0x134>
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    186a:	4b27      	ldr	r3, [pc, #156]	(1908 <Standard_GetStatus+0x140>)
    186c:	681b      	ldr	r3, [r3, #0]
    186e:	781b      	ldrb	r3, [r3, #0]
    1870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1874:	2b02      	cmp	r3, #2
    1876:	d137      	bne.n	18e8 <Standard_GetStatus+0x120>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
    1878:	4b23      	ldr	r3, [pc, #140]	(1908 <Standard_GetStatus+0x140>)
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	7a5b      	ldrb	r3, [r3, #9]
    187e:	72fb      	strb	r3, [r7, #11]

    Related_Endpoint = (wIndex0 & 0x0f);
    1880:	7afb      	ldrb	r3, [r7, #11]
    1882:	f003 030f 	and.w	r3, r3, #15	; 0xf
    1886:	72bb      	strb	r3, [r7, #10]
    if (ValBit(wIndex0, 7))
    1888:	7afb      	ldrb	r3, [r7, #11]
    188a:	b25b      	sxtb	r3, r3
    188c:	2b00      	cmp	r3, #0
    188e:	da14      	bge.n	18ba <Standard_GetStatus+0xf2>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
    1890:	7abb      	ldrb	r3, [r7, #10]
    1892:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    189a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	b29b      	uxth	r3, r3
    18a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
    18a6:	2b10      	cmp	r3, #16
    18a8:	d122      	bne.n	18f0 <Standard_GetStatus+0x128>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
    18aa:	4b18      	ldr	r3, [pc, #96]	(190c <Standard_GetStatus+0x144>)
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    18b2:	b2db      	uxtb	r3, r3
    18b4:	4a15      	ldr	r2, [pc, #84]	(190c <Standard_GetStatus+0x144>)
    18b6:	7013      	strb	r3, [r2, #0]
    18b8:	e01a      	b.n	18f0 <Standard_GetStatus+0x128>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
    18ba:	7abb      	ldrb	r3, [r7, #10]
    18bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    18c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    18c4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	b29b      	uxth	r3, r3
    18cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    18d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    18d4:	d10c      	bne.n	18f0 <Standard_GetStatus+0x128>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
    18d6:	4b0d      	ldr	r3, [pc, #52]	(190c <Standard_GetStatus+0x144>)
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    18de:	b2db      	uxtb	r3, r3
    18e0:	f8df 2028 	ldr.w	r2, [pc, #40]	; 190c <Standard_GetStatus+0x144>
    18e4:	7013      	strb	r3, [r2, #0]
    18e6:	e003      	b.n	18f0 <Standard_GetStatus+0x128>
    }

  }
  else
  {
    return NULL;
    18e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    18ec:	603b      	str	r3, [r7, #0]
    18ee:	e005      	b.n	18fc <Standard_GetStatus+0x134>
  }
  pUser_Standard_Requests->User_GetStatus();
    18f0:	4b07      	ldr	r3, [pc, #28]	(1910 <Standard_GetStatus+0x148>)
    18f2:	681b      	ldr	r3, [r3, #0]
    18f4:	691b      	ldr	r3, [r3, #16]
    18f6:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
    18f8:	4b04      	ldr	r3, [pc, #16]	(190c <Standard_GetStatus+0x144>)
    18fa:	603b      	str	r3, [r7, #0]
    18fc:	683b      	ldr	r3, [r7, #0]
}
    18fe:	4618      	mov	r0, r3
    1900:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1904:	46bd      	mov	sp, r7
    1906:	bd80      	pop	{r7, pc}
    1908:	200001fc 	.word	0x200001fc
    190c:	20000264 	.word	0x20000264
    1910:	20000204 	.word	0x20000204

00001914 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
    1914:	b580      	push	{r7, lr}
    1916:	b089      	sub	sp, #36
    1918:	af00      	add	r7, sp, #0
  uint32_t     Type_Rec = Type_Recipient;
    191a:	4b83      	ldr	r3, [pc, #524]	(1b28 <Standard_ClearFeature+0x214>)
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	781b      	ldrb	r3, [r3, #0]
    1920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1924:	60fb      	str	r3, [r7, #12]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	2b00      	cmp	r3, #0
    192a:	d10b      	bne.n	1944 <Standard_ClearFeature+0x30>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    192c:	4b7e      	ldr	r3, [pc, #504]	(1b28 <Standard_ClearFeature+0x214>)
    192e:	681a      	ldr	r2, [r3, #0]
    1930:	4b7d      	ldr	r3, [pc, #500]	(1b28 <Standard_ClearFeature+0x214>)
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	7c5b      	ldrb	r3, [r3, #17]
    1936:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    193a:	7453      	strb	r3, [r2, #17]
    return USB_SUCCESS;
    193c:	f04f 0100 	mov.w	r1, #0	; 0x0
    1940:	6039      	str	r1, [r7, #0]
    1942:	e0ea      	b.n	1b1a <Standard_ClearFeature+0x206>
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    1944:	68fb      	ldr	r3, [r7, #12]
    1946:	2b02      	cmp	r3, #2
    1948:	f040 80e4 	bne.w	1b14 <Standard_ClearFeature+0x200>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
    194c:	4b76      	ldr	r3, [pc, #472]	(1b28 <Standard_ClearFeature+0x214>)
    194e:	681b      	ldr	r3, [r3, #0]
    1950:	889b      	ldrh	r3, [r3, #4]
    1952:	2b00      	cmp	r3, #0
    1954:	d105      	bne.n	1962 <Standard_ClearFeature+0x4e>
    1956:	f8df 31d0 	ldr.w	r3, [pc, #464]	; 1b28 <Standard_ClearFeature+0x214>
    195a:	681b      	ldr	r3, [r3, #0]
    195c:	7a1b      	ldrb	r3, [r3, #8]
    195e:	2b00      	cmp	r3, #0
    1960:	d003      	beq.n	196a <Standard_ClearFeature+0x56>
        || (pInformation->USBwIndex1 != 0))
    {
      return USB_UNSUPPORT;
    1962:	f04f 0202 	mov.w	r2, #2	; 0x2
    1966:	603a      	str	r2, [r7, #0]
    1968:	e0d7      	b.n	1b1a <Standard_ClearFeature+0x206>
    }

    pDev = &Device_Table;
    196a:	4b70      	ldr	r3, [pc, #448]	(1b2c <Standard_ClearFeature+0x218>)
    196c:	617b      	str	r3, [r7, #20]
    wIndex0 = pInformation->USBwIndex0;
    196e:	4b6e      	ldr	r3, [pc, #440]	(1b28 <Standard_ClearFeature+0x214>)
    1970:	681b      	ldr	r3, [r3, #0]
    1972:	7a5b      	ldrb	r3, [r3, #9]
    1974:	61fb      	str	r3, [r7, #28]
    rEP = wIndex0 & ~0x80;
    1976:	69fb      	ldr	r3, [r7, #28]
    1978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    197c:	623b      	str	r3, [r7, #32]
    Related_Endpoint = ENDP0 + rEP;
    197e:	6a3b      	ldr	r3, [r7, #32]
    1980:	61bb      	str	r3, [r7, #24]

    if (ValBit(pInformation->USBwIndex0, 7))
    1982:	4b69      	ldr	r3, [pc, #420]	(1b28 <Standard_ClearFeature+0x214>)
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	7a5b      	ldrb	r3, [r3, #9]
    1988:	b25b      	sxtb	r3, r3
    198a:	2b00      	cmp	r3, #0
    198c:	da0c      	bge.n	19a8 <Standard_ClearFeature+0x94>
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
    198e:	69bb      	ldr	r3, [r7, #24]
    1990:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1998:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    199c:	681b      	ldr	r3, [r3, #0]
    199e:	b29b      	uxth	r3, r3
    19a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    19a4:	613b      	str	r3, [r7, #16]
    19a6:	e00b      	b.n	19c0 <Standard_ClearFeature+0xac>
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    19a8:	69bb      	ldr	r3, [r7, #24]
    19aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    19ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    19b2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	b29b      	uxth	r3, r3
    19ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    19be:	613b      	str	r3, [r7, #16]
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
    19c0:	697b      	ldr	r3, [r7, #20]
    19c2:	781b      	ldrb	r3, [r3, #0]
    19c4:	461a      	mov	r2, r3
    19c6:	6a3b      	ldr	r3, [r7, #32]
    19c8:	429a      	cmp	r2, r3
    19ca:	d907      	bls.n	19dc <Standard_ClearFeature+0xc8>
    19cc:	693b      	ldr	r3, [r7, #16]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d004      	beq.n	19dc <Standard_ClearFeature+0xc8>
    19d2:	4b55      	ldr	r3, [pc, #340]	(1b28 <Standard_ClearFeature+0x214>)
    19d4:	681b      	ldr	r3, [r3, #0]
    19d6:	7c9b      	ldrb	r3, [r3, #18]
    19d8:	2b00      	cmp	r3, #0
    19da:	d103      	bne.n	19e4 <Standard_ClearFeature+0xd0>
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
    19dc:	f04f 0302 	mov.w	r3, #2	; 0x2
    19e0:	603b      	str	r3, [r7, #0]
    19e2:	e09a      	b.n	1b1a <Standard_ClearFeature+0x206>
    }


    if (wIndex0 & 0x80)
    19e4:	69fb      	ldr	r3, [r7, #28]
    19e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    19ea:	2b00      	cmp	r3, #0
    19ec:	d019      	beq.n	1a22 <Standard_ClearFeature+0x10e>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
    19ee:	69bb      	ldr	r3, [r7, #24]
    19f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    19f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    19f8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    19fc:	681b      	ldr	r3, [r3, #0]
    19fe:	b29b      	uxth	r3, r3
    1a00:	f003 0330 	and.w	r3, r3, #48	; 0x30
    1a04:	2b10      	cmp	r3, #16
    1a06:	d17d      	bne.n	1b04 <Standard_ClearFeature+0x1f0>
      {
      #ifndef STM32F10X_CL
        ClearDTOG_TX(Related_Endpoint);
    1a08:	69bb      	ldr	r3, [r7, #24]
    1a0a:	b2db      	uxtb	r3, r3
    1a0c:	4618      	mov	r0, r3
    1a0e:	f001 fbd3 	bl	31b8 <ClearDTOG_TX>
      #endif /* STM32F10X_CL */
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
    1a12:	69bb      	ldr	r3, [r7, #24]
    1a14:	b2db      	uxtb	r3, r3
    1a16:	4618      	mov	r0, r3
    1a18:	f04f 0130 	mov.w	r1, #48	; 0x30
    1a1c:	f001 f88a 	bl	2b34 <SetEPTxStatus>
    1a20:	e070      	b.n	1b04 <Standard_ClearFeature+0x1f0>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
    1a22:	69bb      	ldr	r3, [r7, #24]
    1a24:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1a2c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    1a30:	681b      	ldr	r3, [r3, #0]
    1a32:	b29b      	uxth	r3, r3
    1a34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    1a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    1a3c:	d162      	bne.n	1b04 <Standard_ClearFeature+0x1f0>
      {
        if (Related_Endpoint == ENDP0)
    1a3e:	69bb      	ldr	r3, [r7, #24]
    1a40:	2b00      	cmp	r3, #0
    1a42:	d132      	bne.n	1aaa <Standard_ClearFeature+0x196>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
    1a44:	69bb      	ldr	r3, [r7, #24]
    1a46:	b2db      	uxtb	r3, r3
    1a48:	461a      	mov	r2, r3
    1a4a:	4b39      	ldr	r3, [pc, #228]	(1b30 <Standard_ClearFeature+0x21c>)
    1a4c:	f893 302c 	ldrb.w	r3, [r3, #44]
    1a50:	4610      	mov	r0, r2
    1a52:	4619      	mov	r1, r3
    1a54:	f001 fd02 	bl	345c <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
    1a58:	69bb      	ldr	r3, [r7, #24]
    1a5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1a62:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    1a66:	681b      	ldr	r3, [r3, #0]
    1a68:	b29b      	uxth	r3, r3
    1a6a:	607b      	str	r3, [r7, #4]
    1a6c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
    1a70:	6879      	ldr	r1, [r7, #4]
    1a72:	ea01 0303 	and.w	r3, r1, r3
    1a76:	607b      	str	r3, [r7, #4]
    1a78:	687a      	ldr	r2, [r7, #4]
    1a7a:	f482 5380 	eor.w	r3, r2, #4096	; 0x1000
    1a7e:	b29b      	uxth	r3, r3
    1a80:	607b      	str	r3, [r7, #4]
    1a82:	6879      	ldr	r1, [r7, #4]
    1a84:	f481 5300 	eor.w	r3, r1, #8192	; 0x2000
    1a88:	b29b      	uxth	r3, r3
    1a8a:	607b      	str	r3, [r7, #4]
    1a8c:	69bb      	ldr	r3, [r7, #24]
    1a8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a92:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    1a96:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    1a9a:	f8df 3098 	ldr.w	r3, [pc, #152]	; 1b34 <Standard_ClearFeature+0x220>
    1a9e:	6879      	ldr	r1, [r7, #4]
    1aa0:	ea41 0303 	orr.w	r3, r1, r3
    1aa4:	b29b      	uxth	r3, r3
    1aa6:	6013      	str	r3, [r2, #0]
    1aa8:	e02c      	b.n	1b04 <Standard_ClearFeature+0x1f0>
        }
        else
        {
        #ifndef STM32F10X_CL
          ClearDTOG_RX(Related_Endpoint);
    1aaa:	69bb      	ldr	r3, [r7, #24]
    1aac:	b2db      	uxtb	r3, r3
    1aae:	4618      	mov	r0, r3
    1ab0:	f001 fb50 	bl	3154 <ClearDTOG_RX>
        #endif /* STM32F10X_CL */
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
    1ab4:	69bb      	ldr	r3, [r7, #24]
    1ab6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1aba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1abe:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    1ac2:	681b      	ldr	r3, [r3, #0]
    1ac4:	b29b      	uxth	r3, r3
    1ac6:	60bb      	str	r3, [r7, #8]
    1ac8:	f64b 738f 	movw	r3, #49039	; 0xbf8f
    1acc:	68ba      	ldr	r2, [r7, #8]
    1ace:	ea02 0303 	and.w	r3, r2, r3
    1ad2:	60bb      	str	r3, [r7, #8]
    1ad4:	68b9      	ldr	r1, [r7, #8]
    1ad6:	f481 5380 	eor.w	r3, r1, #4096	; 0x1000
    1ada:	b29b      	uxth	r3, r3
    1adc:	60bb      	str	r3, [r7, #8]
    1ade:	68ba      	ldr	r2, [r7, #8]
    1ae0:	f482 5300 	eor.w	r3, r2, #8192	; 0x2000
    1ae4:	b29b      	uxth	r3, r3
    1ae6:	60bb      	str	r3, [r7, #8]
    1ae8:	69bb      	ldr	r3, [r7, #24]
    1aea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1aee:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    1af2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    1af6:	f8df 303c 	ldr.w	r3, [pc, #60]	; 1b34 <Standard_ClearFeature+0x220>
    1afa:	68b9      	ldr	r1, [r7, #8]
    1afc:	ea41 0303 	orr.w	r3, r1, r3
    1b00:	b29b      	uxth	r3, r3
    1b02:	6013      	str	r3, [r2, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
    1b04:	4b0c      	ldr	r3, [pc, #48]	(1b38 <Standard_ClearFeature+0x224>)
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	695b      	ldr	r3, [r3, #20]
    1b0a:	4798      	blx	r3
    return USB_SUCCESS;
    1b0c:	f04f 0200 	mov.w	r2, #0	; 0x0
    1b10:	603a      	str	r2, [r7, #0]
    1b12:	e002      	b.n	1b1a <Standard_ClearFeature+0x206>
  }

  return USB_UNSUPPORT;
    1b14:	f04f 0302 	mov.w	r3, #2	; 0x2
    1b18:	603b      	str	r3, [r7, #0]
    1b1a:	683b      	ldr	r3, [r7, #0]
}
    1b1c:	4618      	mov	r0, r3
    1b1e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	46c0      	nop			(mov r8, r8)
    1b28:	200001fc 	.word	0x200001fc
    1b2c:	2000005c 	.word	0x2000005c
    1b30:	20000060 	.word	0x20000060
    1b34:	ffff8080 	.word	0xffff8080
    1b38:	20000204 	.word	0x20000204

00001b3c <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b087      	sub	sp, #28
    1b40:	af00      	add	r7, sp, #0
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
    1b42:	4b4b      	ldr	r3, [pc, #300]	(1c70 <Standard_SetEndPointFeature+0x134>)
    1b44:	681b      	ldr	r3, [r3, #0]
    1b46:	7a5b      	ldrb	r3, [r3, #9]
    1b48:	60fb      	str	r3, [r7, #12]
  rEP = wIndex0 & ~0x80;
    1b4a:	68fb      	ldr	r3, [r7, #12]
    1b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1b50:	617b      	str	r3, [r7, #20]
  Related_Endpoint = ENDP0 + rEP;
    1b52:	697b      	ldr	r3, [r7, #20]
    1b54:	613b      	str	r3, [r7, #16]

  if (ValBit(pInformation->USBwIndex0, 7))
    1b56:	4b46      	ldr	r3, [pc, #280]	(1c70 <Standard_SetEndPointFeature+0x134>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	7a5b      	ldrb	r3, [r3, #9]
    1b5c:	b25b      	sxtb	r3, r3
    1b5e:	2b00      	cmp	r3, #0
    1b60:	da0c      	bge.n	1b7c <Standard_SetEndPointFeature+0x40>
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
    1b62:	693b      	ldr	r3, [r7, #16]
    1b64:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1b6c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    1b70:	681b      	ldr	r3, [r3, #0]
    1b72:	b29b      	uxth	r3, r3
    1b74:	f003 0330 	and.w	r3, r3, #48	; 0x30
    1b78:	61bb      	str	r3, [r7, #24]
    1b7a:	e00b      	b.n	1b94 <Standard_SetEndPointFeature+0x58>
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
    1b7c:	693b      	ldr	r3, [r7, #16]
    1b7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1b82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1b86:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	b29b      	uxth	r3, r3
    1b8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    1b92:	61bb      	str	r3, [r7, #24]
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
    1b94:	4b37      	ldr	r3, [pc, #220]	(1c74 <Standard_SetEndPointFeature+0x138>)
    1b96:	781b      	ldrb	r3, [r3, #0]
    1b98:	461a      	mov	r2, r3
    1b9a:	693b      	ldr	r3, [r7, #16]
    1b9c:	429a      	cmp	r2, r3
    1b9e:	d90c      	bls.n	1bba <Standard_SetEndPointFeature+0x7e>
    1ba0:	4b33      	ldr	r3, [pc, #204]	(1c70 <Standard_SetEndPointFeature+0x134>)
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	889b      	ldrh	r3, [r3, #4]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d107      	bne.n	1bba <Standard_SetEndPointFeature+0x7e>
    1baa:	69bb      	ldr	r3, [r7, #24]
    1bac:	2b00      	cmp	r3, #0
    1bae:	d004      	beq.n	1bba <Standard_SetEndPointFeature+0x7e>
    1bb0:	4b2f      	ldr	r3, [pc, #188]	(1c70 <Standard_SetEndPointFeature+0x134>)
    1bb2:	681b      	ldr	r3, [r3, #0]
    1bb4:	7c9b      	ldrb	r3, [r3, #18]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d103      	bne.n	1bc2 <Standard_SetEndPointFeature+0x86>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
    1bba:	f04f 0102 	mov.w	r1, #2	; 0x2
    1bbe:	6039      	str	r1, [r7, #0]
    1bc0:	e050      	b.n	1c64 <Standard_SetEndPointFeature+0x128>
  }
  else
  {
    if (wIndex0 & 0x80)
    1bc2:	68fb      	ldr	r3, [r7, #12]
    1bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d022      	beq.n	1c12 <Standard_SetEndPointFeature+0xd6>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
    1bcc:	693b      	ldr	r3, [r7, #16]
    1bce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1bd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1bd6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	b29b      	uxth	r3, r3
    1bde:	607b      	str	r3, [r7, #4]
    1be0:	f648 73bf 	movw	r3, #36799	; 0x8fbf
    1be4:	687a      	ldr	r2, [r7, #4]
    1be6:	ea02 0303 	and.w	r3, r2, r3
    1bea:	607b      	str	r3, [r7, #4]
    1bec:	6879      	ldr	r1, [r7, #4]
    1bee:	f081 0310 	eor.w	r3, r1, #16	; 0x10
    1bf2:	b29b      	uxth	r3, r3
    1bf4:	607b      	str	r3, [r7, #4]
    1bf6:	693b      	ldr	r3, [r7, #16]
    1bf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1bfc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    1c00:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    1c04:	4b1c      	ldr	r3, [pc, #112]	(1c78 <Standard_SetEndPointFeature+0x13c>)
    1c06:	6879      	ldr	r1, [r7, #4]
    1c08:	ea41 0303 	orr.w	r3, r1, r3
    1c0c:	b29b      	uxth	r3, r3
    1c0e:	6013      	str	r3, [r2, #0]
    1c10:	e021      	b.n	1c56 <Standard_SetEndPointFeature+0x11a>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    1c12:	693b      	ldr	r3, [r7, #16]
    1c14:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1c1c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    1c20:	681b      	ldr	r3, [r3, #0]
    1c22:	b29b      	uxth	r3, r3
    1c24:	60bb      	str	r3, [r7, #8]
    1c26:	f64b 738f 	movw	r3, #49039	; 0xbf8f
    1c2a:	68ba      	ldr	r2, [r7, #8]
    1c2c:	ea02 0303 	and.w	r3, r2, r3
    1c30:	60bb      	str	r3, [r7, #8]
    1c32:	68b9      	ldr	r1, [r7, #8]
    1c34:	f481 5380 	eor.w	r3, r1, #4096	; 0x1000
    1c38:	b29b      	uxth	r3, r3
    1c3a:	60bb      	str	r3, [r7, #8]
    1c3c:	693b      	ldr	r3, [r7, #16]
    1c3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c42:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    1c46:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    1c4a:	4b0b      	ldr	r3, [pc, #44]	(1c78 <Standard_SetEndPointFeature+0x13c>)
    1c4c:	68b9      	ldr	r1, [r7, #8]
    1c4e:	ea41 0303 	orr.w	r3, r1, r3
    1c52:	b29b      	uxth	r3, r3
    1c54:	6013      	str	r3, [r2, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
    1c56:	4b09      	ldr	r3, [pc, #36]	(1c7c <Standard_SetEndPointFeature+0x140>)
    1c58:	681b      	ldr	r3, [r3, #0]
    1c5a:	699b      	ldr	r3, [r3, #24]
    1c5c:	4798      	blx	r3
  return USB_SUCCESS;
    1c5e:	f04f 0200 	mov.w	r2, #0	; 0x0
    1c62:	603a      	str	r2, [r7, #0]
    1c64:	683b      	ldr	r3, [r7, #0]
}
    1c66:	4618      	mov	r0, r3
    1c68:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    1c6c:	46bd      	mov	sp, r7
    1c6e:	bd80      	pop	{r7, pc}
    1c70:	200001fc 	.word	0x200001fc
    1c74:	2000005c 	.word	0x2000005c
    1c78:	ffff8080 	.word	0xffff8080
    1c7c:	20000204 	.word	0x20000204

00001c80 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
    1c80:	b580      	push	{r7, lr}
    1c82:	af00      	add	r7, sp, #0
  SetBit(pInformation->Current_Feature, 5);
    1c84:	4b08      	ldr	r3, [pc, #32]	(1ca8 <Standard_SetDeviceFeature+0x28>)
    1c86:	681a      	ldr	r2, [r3, #0]
    1c88:	4b07      	ldr	r3, [pc, #28]	(1ca8 <Standard_SetDeviceFeature+0x28>)
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	7c5b      	ldrb	r3, [r3, #17]
    1c8e:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    1c92:	b2db      	uxtb	r3, r3
    1c94:	7453      	strb	r3, [r2, #17]
  pUser_Standard_Requests->User_SetDeviceFeature();
    1c96:	4b05      	ldr	r3, [pc, #20]	(1cac <Standard_SetDeviceFeature+0x2c>)
    1c98:	681b      	ldr	r3, [r3, #0]
    1c9a:	69db      	ldr	r3, [r3, #28]
    1c9c:	4798      	blx	r3
  return USB_SUCCESS;
    1c9e:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    1ca2:	4618      	mov	r0, r3
    1ca4:	46bd      	mov	sp, r7
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	200001fc 	.word	0x200001fc
    1cac:	20000204 	.word	0x20000204

00001cb0 <Standard_GetDescriptorData>:
* Return         : Address of a part of the descriptor pointed by the Usb_
*                  wOffset The buffer pointed by this address contains at least
*                  Length bytes.
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
    1cb0:	b480      	push	{r7}
    1cb2:	b084      	sub	sp, #16
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	4603      	mov	r3, r0
    1cb8:	6079      	str	r1, [r7, #4]
    1cba:	813b      	strh	r3, [r7, #8]
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
    1cbc:	4b10      	ldr	r3, [pc, #64]	(1d00 <Standard_GetDescriptorData+0x50>)
    1cbe:	681b      	ldr	r3, [r3, #0]
    1cc0:	8b5b      	ldrh	r3, [r3, #26]
    1cc2:	60fb      	str	r3, [r7, #12]
  if (Length == 0)
    1cc4:	893b      	ldrh	r3, [r7, #8]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d10d      	bne.n	1ce6 <Standard_GetDescriptorData+0x36>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    1cca:	4b0d      	ldr	r3, [pc, #52]	(1d00 <Standard_GetDescriptorData+0x50>)
    1ccc:	6819      	ldr	r1, [r3, #0]
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	889a      	ldrh	r2, [r3, #4]
    1cd2:	68fb      	ldr	r3, [r7, #12]
    1cd4:	b29b      	uxth	r3, r3
    1cd6:	ebc3 0302 	rsb	r3, r3, r2
    1cda:	b29b      	uxth	r3, r3
    1cdc:	830b      	strh	r3, [r1, #24]
    return 0;
    1cde:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ce2:	603b      	str	r3, [r7, #0]
    1ce4:	e004      	b.n	1cf0 <Standard_GetDescriptorData+0x40>
  }

  return pDesc->Descriptor + wOffset;
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	681a      	ldr	r2, [r3, #0]
    1cea:	68fb      	ldr	r3, [r7, #12]
    1cec:	4413      	add	r3, r2
    1cee:	603b      	str	r3, [r7, #0]
    1cf0:	683b      	ldr	r3, [r7, #0]
}
    1cf2:	4618      	mov	r0, r3
    1cf4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    1cf8:	46bd      	mov	sp, r7
    1cfa:	bc80      	pop	{r7}
    1cfc:	4770      	bx	lr
    1cfe:	46c0      	nop			(mov r8, r8)
    1d00:	200001fc 	.word	0x200001fc

00001d04 <DataStageOut>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageOut(void)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	b084      	sub	sp, #16
    1d08:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
    1d0a:	4b41      	ldr	r3, [pc, #260]	(1e10 <DataStageOut+0x10c>)
    1d0c:	681b      	ldr	r3, [r3, #0]
    1d0e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    1d12:	603b      	str	r3, [r7, #0]
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
    1d14:	683b      	ldr	r3, [r7, #0]
    1d16:	881b      	ldrh	r3, [r3, #0]
    1d18:	607b      	str	r3, [r7, #4]

  if (pEPinfo->CopyData && save_rLength)
    1d1a:	683b      	ldr	r3, [r7, #0]
    1d1c:	689b      	ldr	r3, [r3, #8]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d031      	beq.n	1d86 <DataStageOut+0x82>
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	2b00      	cmp	r3, #0
    1d26:	d02e      	beq.n	1d86 <DataStageOut+0x82>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
    1d28:	683b      	ldr	r3, [r7, #0]
    1d2a:	889b      	ldrh	r3, [r3, #4]
    1d2c:	60fb      	str	r3, [r7, #12]
    if (Length > save_rLength)
    1d2e:	68fa      	ldr	r2, [r7, #12]
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	429a      	cmp	r2, r3
    1d34:	d901      	bls.n	1d3a <DataStageOut+0x36>
    {
      Length = save_rLength;
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	60fb      	str	r3, [r7, #12]
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    1d3a:	683b      	ldr	r3, [r7, #0]
    1d3c:	689a      	ldr	r2, [r3, #8]
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	b29b      	uxth	r3, r3
    1d42:	4618      	mov	r0, r3
    1d44:	4790      	blx	r2
    1d46:	4603      	mov	r3, r0
    1d48:	60bb      	str	r3, [r7, #8]
    pEPinfo->Usb_rLength -= Length;
    1d4a:	683b      	ldr	r3, [r7, #0]
    1d4c:	881a      	ldrh	r2, [r3, #0]
    1d4e:	68fb      	ldr	r3, [r7, #12]
    1d50:	b29b      	uxth	r3, r3
    1d52:	ebc3 0302 	rsb	r3, r3, r2
    1d56:	b29b      	uxth	r3, r3
    1d58:	683a      	ldr	r2, [r7, #0]
    1d5a:	8013      	strh	r3, [r2, #0]
    pEPinfo->Usb_rOffset += Length;
    1d5c:	683b      	ldr	r3, [r7, #0]
    1d5e:	885a      	ldrh	r2, [r3, #2]
    1d60:	68fb      	ldr	r3, [r7, #12]
    1d62:	b29b      	uxth	r3, r3
    1d64:	4413      	add	r3, r2
    1d66:	b29b      	uxth	r3, r3
    1d68:	683a      	ldr	r2, [r7, #0]
    1d6a:	8053      	strh	r3, [r2, #2]

  #ifdef STM32F10X_CL  
    OTGD_FS_PCD_EP_Read(ENDP0, Buffer, Length); 
  #else  
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
    1d6c:	f04f 0000 	mov.w	r0, #0	; 0x0
    1d70:	f001 fafe 	bl	3370 <GetEPRxAddr>
    1d74:	4603      	mov	r3, r0
    1d76:	461a      	mov	r2, r3
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	b29b      	uxth	r3, r3
    1d7c:	68b8      	ldr	r0, [r7, #8]
    1d7e:	4611      	mov	r1, r2
    1d80:	461a      	mov	r2, r3
    1d82:	f7ff f997 	bl	10b4 <PMAToUserBufferCopy>
  #endif  /* STM32F10X_CL */
  }

  if (pEPinfo->Usb_rLength != 0)
    1d86:	683b      	ldr	r3, [r7, #0]
    1d88:	881b      	ldrh	r3, [r3, #0]
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d00d      	beq.n	1daa <DataStageOut+0xa6>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    1d8e:	4a21      	ldr	r2, [pc, #132]	(1e14 <DataStageOut+0x110>)
    1d90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    1d94:	8013      	strh	r3, [r2, #0]
    SetEPTxCount(ENDP0, 0);
    1d96:	f04f 0000 	mov.w	r0, #0	; 0x0
    1d9a:	f04f 0100 	mov.w	r1, #0	; 0x0
    1d9e:	f001 fb05 	bl	33ac <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
    1da2:	4a1d      	ldr	r2, [pc, #116]	(1e18 <DataStageOut+0x114>)
    1da4:	f04f 0330 	mov.w	r3, #48	; 0x30
    1da8:	8013      	strh	r3, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
    1daa:	683b      	ldr	r3, [r7, #0]
    1dac:	881a      	ldrh	r2, [r3, #0]
    1dae:	683b      	ldr	r3, [r7, #0]
    1db0:	889b      	ldrh	r3, [r3, #4]
    1db2:	429a      	cmp	r2, r3
    1db4:	d305      	bcc.n	1dc2 <DataStageOut+0xbe>
  {
    pInformation->ControlState = OUT_DATA;
    1db6:	4b16      	ldr	r3, [pc, #88]	(1e10 <DataStageOut+0x10c>)
    1db8:	681a      	ldr	r2, [r3, #0]
    1dba:	f04f 0303 	mov.w	r3, #3	; 0x3
    1dbe:	7413      	strb	r3, [r2, #16]
    1dc0:	e022      	b.n	1e08 <DataStageOut+0x104>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    1dc2:	683b      	ldr	r3, [r7, #0]
    1dc4:	881b      	ldrh	r3, [r3, #0]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d005      	beq.n	1dd6 <DataStageOut+0xd2>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    1dca:	4b11      	ldr	r3, [pc, #68]	(1e10 <DataStageOut+0x10c>)
    1dcc:	681a      	ldr	r2, [r3, #0]
    1dce:	f04f 0305 	mov.w	r3, #5	; 0x5
    1dd2:	7413      	strb	r3, [r2, #16]
    1dd4:	e018      	b.n	1e08 <DataStageOut+0x104>
    }
    else if (pEPinfo->Usb_rLength == 0)
    1dd6:	683b      	ldr	r3, [r7, #0]
    1dd8:	881b      	ldrh	r3, [r3, #0]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d114      	bne.n	1e08 <DataStageOut+0x104>
    {
      pInformation->ControlState = WAIT_STATUS_IN;
    1dde:	4b0c      	ldr	r3, [pc, #48]	(1e10 <DataStageOut+0x10c>)
    1de0:	681a      	ldr	r2, [r3, #0]
    1de2:	f04f 0306 	mov.w	r3, #6	; 0x6
    1de6:	7413      	strb	r3, [r2, #16]
      USB_StatusIn();
    1de8:	4b0c      	ldr	r3, [pc, #48]	(1e1c <DataStageOut+0x118>)
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	b29b      	uxth	r3, r3
    1dee:	461a      	mov	r2, r3
    1df0:	4b0b      	ldr	r3, [pc, #44]	(1e20 <DataStageOut+0x11c>)
    1df2:	4413      	add	r3, r2
    1df4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1df8:	461a      	mov	r2, r3
    1dfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    1dfe:	6013      	str	r3, [r2, #0]
    1e00:	4a05      	ldr	r2, [pc, #20]	(1e18 <DataStageOut+0x114>)
    1e02:	f04f 0330 	mov.w	r3, #48	; 0x30
    1e06:	8013      	strh	r3, [r2, #0]
    }
  }
}
    1e08:	f107 0710 	add.w	r7, r7, #16	; 0x10
    1e0c:	46bd      	mov	sp, r7
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	200001fc 	.word	0x200001fc
    1e14:	20000210 	.word	0x20000210
    1e18:	20000212 	.word	0x20000212
    1e1c:	40005c50 	.word	0x40005c50
    1e20:	20003002 	.word	0x20003002

00001e24 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b086      	sub	sp, #24
    1e28:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
    1e2a:	4b45      	ldr	r3, [pc, #276]	(1f40 <DataStageIn+0x11c>)
    1e2c:	681b      	ldr	r3, [r3, #0]
    1e2e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    1e32:	607b      	str	r3, [r7, #4]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	881b      	ldrh	r3, [r3, #0]
    1e38:	60bb      	str	r3, [r7, #8]
  uint32_t ControlState = pInformation->ControlState;
    1e3a:	4b41      	ldr	r3, [pc, #260]	(1f40 <DataStageIn+0x11c>)
    1e3c:	681b      	ldr	r3, [r3, #0]
    1e3e:	7c1b      	ldrb	r3, [r3, #16]
    1e40:	60fb      	str	r3, [r7, #12]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
    1e42:	68bb      	ldr	r3, [r7, #8]
    1e44:	2b00      	cmp	r3, #0
    1e46:	d126      	bne.n	1e96 <DataStageIn+0x72>
    1e48:	68fb      	ldr	r3, [r7, #12]
    1e4a:	2b04      	cmp	r3, #4
    1e4c:	d123      	bne.n	1e96 <DataStageIn+0x72>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    1e4e:	4b3d      	ldr	r3, [pc, #244]	(1f44 <DataStageIn+0x120>)
    1e50:	681b      	ldr	r3, [r3, #0]
    1e52:	2b01      	cmp	r3, #1
    1e54:	d117      	bne.n	1e86 <DataStageIn+0x62>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
    1e56:	4b3c      	ldr	r3, [pc, #240]	(1f48 <DataStageIn+0x124>)
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	b29b      	uxth	r3, r3
    1e5c:	461a      	mov	r2, r3
    1e5e:	4b3b      	ldr	r3, [pc, #236]	(1f4c <DataStageIn+0x128>)
    1e60:	4413      	add	r3, r2
    1e62:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1e66:	461a      	mov	r2, r3
    1e68:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e6c:	6013      	str	r3, [r2, #0]
    1e6e:	4a38      	ldr	r2, [pc, #224]	(1f50 <DataStageIn+0x12c>)
    1e70:	f04f 0330 	mov.w	r3, #48	; 0x30
    1e74:	8013      	strh	r3, [r2, #0]
      ControlState = LAST_IN_DATA;
    1e76:	f04f 0304 	mov.w	r3, #4	; 0x4
    1e7a:	60fb      	str	r3, [r7, #12]
      Data_Mul_MaxPacketSize = FALSE;
    1e7c:	4a31      	ldr	r2, [pc, #196]	(1f44 <DataStageIn+0x120>)
    1e7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e82:	6013      	str	r3, [r2, #0]
    1e84:	e052      	b.n	1f2c <DataStageIn+0x108>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
    1e86:	f04f 0307 	mov.w	r3, #7	; 0x7
    1e8a:	60fb      	str	r3, [r7, #12]
    #ifdef STM32F10X_CL      
      OTGD_FS_PCD_EP_Read (ENDP0, 0, 0);
    #endif  /* STM32F10X_CL */ 
    
    #ifndef STM32F10X_CL 
      vSetEPTxStatus(EP_TX_STALL);
    1e8c:	4a30      	ldr	r2, [pc, #192]	(1f50 <DataStageIn+0x12c>)
    1e8e:	f04f 0310 	mov.w	r3, #16	; 0x10
    1e92:	8013      	strh	r3, [r2, #0]
    1e94:	e04a      	b.n	1f2c <DataStageIn+0x108>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	889b      	ldrh	r3, [r3, #4]
    1e9a:	617b      	str	r3, [r7, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
    1e9c:	68ba      	ldr	r2, [r7, #8]
    1e9e:	697b      	ldr	r3, [r7, #20]
    1ea0:	429a      	cmp	r2, r3
    1ea2:	d803      	bhi.n	1eac <DataStageIn+0x88>
    1ea4:	f04f 0304 	mov.w	r3, #4	; 0x4
    1ea8:	603b      	str	r3, [r7, #0]
    1eaa:	e002      	b.n	1eb2 <DataStageIn+0x8e>
    1eac:	f04f 0302 	mov.w	r3, #2	; 0x2
    1eb0:	603b      	str	r3, [r7, #0]
    1eb2:	683b      	ldr	r3, [r7, #0]
    1eb4:	60fb      	str	r3, [r7, #12]

  if (Length > save_wLength)
    1eb6:	697a      	ldr	r2, [r7, #20]
    1eb8:	68bb      	ldr	r3, [r7, #8]
    1eba:	429a      	cmp	r2, r3
    1ebc:	d901      	bls.n	1ec2 <DataStageIn+0x9e>
  {
    Length = save_wLength;
    1ebe:	68bb      	ldr	r3, [r7, #8]
    1ec0:	617b      	str	r3, [r7, #20]
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	689a      	ldr	r2, [r3, #8]
    1ec6:	697b      	ldr	r3, [r7, #20]
    1ec8:	b29b      	uxth	r3, r3
    1eca:	4618      	mov	r0, r3
    1ecc:	4790      	blx	r2
    1ece:	4603      	mov	r3, r0
    1ed0:	613b      	str	r3, [r7, #16]

#ifdef STM32F10X_CL
  OTGD_FS_PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
    1ed2:	f04f 0000 	mov.w	r0, #0	; 0x0
    1ed6:	f001 fa2d 	bl	3334 <GetEPTxAddr>
    1eda:	4603      	mov	r3, r0
    1edc:	461a      	mov	r2, r3
    1ede:	697b      	ldr	r3, [r7, #20]
    1ee0:	b29b      	uxth	r3, r3
    1ee2:	6938      	ldr	r0, [r7, #16]
    1ee4:	4611      	mov	r1, r2
    1ee6:	461a      	mov	r2, r3
    1ee8:	f7ff f89e 	bl	1028 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
    1eec:	697b      	ldr	r3, [r7, #20]
    1eee:	b29b      	uxth	r3, r3
    1ef0:	f04f 0000 	mov.w	r0, #0	; 0x0
    1ef4:	4619      	mov	r1, r3
    1ef6:	f001 fa59 	bl	33ac <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	881a      	ldrh	r2, [r3, #0]
    1efe:	697b      	ldr	r3, [r7, #20]
    1f00:	b29b      	uxth	r3, r3
    1f02:	ebc3 0302 	rsb	r3, r3, r2
    1f06:	b29b      	uxth	r3, r3
    1f08:	687a      	ldr	r2, [r7, #4]
    1f0a:	8013      	strh	r3, [r2, #0]
  pEPinfo->Usb_wOffset += Length;
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	885a      	ldrh	r2, [r3, #2]
    1f10:	697b      	ldr	r3, [r7, #20]
    1f12:	b29b      	uxth	r3, r3
    1f14:	4413      	add	r3, r2
    1f16:	b29b      	uxth	r3, r3
    1f18:	687a      	ldr	r2, [r7, #4]
    1f1a:	8053      	strh	r3, [r2, #2]
  vSetEPTxStatus(EP_TX_VALID);
    1f1c:	4a0c      	ldr	r2, [pc, #48]	(1f50 <DataStageIn+0x12c>)
    1f1e:	f04f 0330 	mov.w	r3, #48	; 0x30
    1f22:	8013      	strh	r3, [r2, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
    1f24:	4a0b      	ldr	r2, [pc, #44]	(1f54 <DataStageIn+0x130>)
    1f26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    1f2a:	8013      	strh	r3, [r2, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
    1f2c:	4b04      	ldr	r3, [pc, #16]	(1f40 <DataStageIn+0x11c>)
    1f2e:	681a      	ldr	r2, [r3, #0]
    1f30:	68fb      	ldr	r3, [r7, #12]
    1f32:	b2db      	uxtb	r3, r3
    1f34:	7413      	strb	r3, [r2, #16]
}
    1f36:	f107 0718 	add.w	r7, r7, #24	; 0x18
    1f3a:	46bd      	mov	sp, r7
    1f3c:	bd80      	pop	{r7, pc}
    1f3e:	46c0      	nop			(mov r8, r8)
    1f40:	200001fc 	.word	0x200001fc
    1f44:	20000260 	.word	0x20000260
    1f48:	40005c50 	.word	0x40005c50
    1f4c:	20003002 	.word	0x20003002
    1f50:	20000212 	.word	0x20000212
    1f54:	20000210 	.word	0x20000210

00001f58 <NoData_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	b083      	sub	sp, #12
    1f5c:	af00      	add	r7, sp, #0
  RESULT Result = USB_UNSUPPORT;
    1f5e:	f04f 0302 	mov.w	r3, #2	; 0x2
    1f62:	603b      	str	r3, [r7, #0]
  uint32_t RequestNo = pInformation->USBbRequest;
    1f64:	4b65      	ldr	r3, [pc, #404]	(20fc <NoData_Setup0+0x1a4>)
    1f66:	681b      	ldr	r3, [r3, #0]
    1f68:	785b      	ldrb	r3, [r3, #1]
    1f6a:	607b      	str	r3, [r7, #4]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    1f6c:	4b63      	ldr	r3, [pc, #396]	(20fc <NoData_Setup0+0x1a4>)
    1f6e:	681b      	ldr	r3, [r3, #0]
    1f70:	781b      	ldrb	r3, [r3, #0]
    1f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1f76:	2b00      	cmp	r3, #0
    1f78:	d161      	bne.n	203e <NoData_Setup0+0xe6>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	2b09      	cmp	r3, #9
    1f7e:	d104      	bne.n	1f8a <NoData_Setup0+0x32>
    {
      Result = Standard_SetConfiguration();
    1f80:	f7ff fb7e 	bl	1680 <Standard_SetConfiguration>
    1f84:	4603      	mov	r3, r0
    1f86:	603b      	str	r3, [r7, #0]
    1f88:	e082      	b.n	2090 <NoData_Setup0+0x138>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	2b05      	cmp	r3, #5
    1f8e:	d11c      	bne.n	1fca <NoData_Setup0+0x72>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
    1f90:	4b5a      	ldr	r3, [pc, #360]	(20fc <NoData_Setup0+0x1a4>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	795b      	ldrb	r3, [r3, #5]
    1f96:	b25b      	sxtb	r3, r3
    1f98:	2b00      	cmp	r3, #0
    1f9a:	db0e      	blt.n	1fba <NoData_Setup0+0x62>
    1f9c:	4b57      	ldr	r3, [pc, #348]	(20fc <NoData_Setup0+0x1a4>)
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	791b      	ldrb	r3, [r3, #4]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d109      	bne.n	1fba <NoData_Setup0+0x62>
    1fa6:	4b55      	ldr	r3, [pc, #340]	(20fc <NoData_Setup0+0x1a4>)
    1fa8:	681b      	ldr	r3, [r3, #0]
    1faa:	891b      	ldrh	r3, [r3, #8]
    1fac:	2b00      	cmp	r3, #0
    1fae:	d104      	bne.n	1fba <NoData_Setup0+0x62>
    1fb0:	4b52      	ldr	r3, [pc, #328]	(20fc <NoData_Setup0+0x1a4>)
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	7c9b      	ldrb	r3, [r3, #18]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d003      	beq.n	1fc2 <NoData_Setup0+0x6a>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
    1fba:	f04f 0308 	mov.w	r3, #8	; 0x8
    1fbe:	60bb      	str	r3, [r7, #8]
    1fc0:	e093      	b.n	20ea <NoData_Setup0+0x192>
        goto exit_NoData_Setup0;
      }
      else
      {
        Result = USB_SUCCESS;
    1fc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    1fc6:	603b      	str	r3, [r7, #0]
    1fc8:	e062      	b.n	2090 <NoData_Setup0+0x138>
         SetDeviceAddress(pInformation->USBwValue0);
      #endif  /* STM32F10X_CL */
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    1fca:	687b      	ldr	r3, [r7, #4]
    1fcc:	2b03      	cmp	r3, #3
    1fce:	d119      	bne.n	2004 <NoData_Setup0+0xac>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
    1fd0:	4b4a      	ldr	r3, [pc, #296]	(20fc <NoData_Setup0+0x1a4>)
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	795b      	ldrb	r3, [r3, #5]
    1fd6:	2b01      	cmp	r3, #1
    1fd8:	d110      	bne.n	1ffc <NoData_Setup0+0xa4>
    1fda:	4b48      	ldr	r3, [pc, #288]	(20fc <NoData_Setup0+0x1a4>)
    1fdc:	681b      	ldr	r3, [r3, #0]
    1fde:	891b      	ldrh	r3, [r3, #8]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d10b      	bne.n	1ffc <NoData_Setup0+0xa4>
    1fe4:	4b45      	ldr	r3, [pc, #276]	(20fc <NoData_Setup0+0x1a4>)
    1fe6:	681b      	ldr	r3, [r3, #0]
    1fe8:	7c5b      	ldrb	r3, [r3, #17]
    1fea:	f003 0320 	and.w	r3, r3, #32	; 0x20
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d004      	beq.n	1ffc <NoData_Setup0+0xa4>
          && (pInformation->USBwIndex == 0)
          && (ValBit(pInformation->Current_Feature, 5)))
      {
        Result = Standard_SetDeviceFeature();
    1ff2:	f7ff fe45 	bl	1c80 <Standard_SetDeviceFeature>
    1ff6:	4603      	mov	r3, r0
    1ff8:	603b      	str	r3, [r7, #0]
    1ffa:	e049      	b.n	2090 <NoData_Setup0+0x138>
      }
      else
      {
        Result = USB_UNSUPPORT;
    1ffc:	f04f 0302 	mov.w	r3, #2	; 0x2
    2000:	603b      	str	r3, [r7, #0]
    2002:	e045      	b.n	2090 <NoData_Setup0+0x138>
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	2b01      	cmp	r3, #1
    2008:	d142      	bne.n	2090 <NoData_Setup0+0x138>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
    200a:	4b3c      	ldr	r3, [pc, #240]	(20fc <NoData_Setup0+0x1a4>)
    200c:	681b      	ldr	r3, [r3, #0]
    200e:	795b      	ldrb	r3, [r3, #5]
    2010:	2b01      	cmp	r3, #1
    2012:	d110      	bne.n	2036 <NoData_Setup0+0xde>
    2014:	4b39      	ldr	r3, [pc, #228]	(20fc <NoData_Setup0+0x1a4>)
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	891b      	ldrh	r3, [r3, #8]
    201a:	2b00      	cmp	r3, #0
    201c:	d10b      	bne.n	2036 <NoData_Setup0+0xde>
    201e:	4b37      	ldr	r3, [pc, #220]	(20fc <NoData_Setup0+0x1a4>)
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	7c5b      	ldrb	r3, [r3, #17]
    2024:	f003 0320 	and.w	r3, r3, #32	; 0x20
    2028:	2b00      	cmp	r3, #0
    202a:	d004      	beq.n	2036 <NoData_Setup0+0xde>
          && pInformation->USBwIndex == 0
          && ValBit(pInformation->Current_Feature, 5))
      {
        Result = Standard_ClearFeature();
    202c:	f7ff fc72 	bl	1914 <Standard_ClearFeature>
    2030:	4603      	mov	r3, r0
    2032:	603b      	str	r3, [r7, #0]
    2034:	e02c      	b.n	2090 <NoData_Setup0+0x138>
      }
      else
      {
        Result = USB_UNSUPPORT;
    2036:	f04f 0302 	mov.w	r3, #2	; 0x2
    203a:	603b      	str	r3, [r7, #0]
    203c:	e028      	b.n	2090 <NoData_Setup0+0x138>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    203e:	4b2f      	ldr	r3, [pc, #188]	(20fc <NoData_Setup0+0x1a4>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2048:	2b01      	cmp	r3, #1
    204a:	d107      	bne.n	205c <NoData_Setup0+0x104>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
    204c:	687b      	ldr	r3, [r7, #4]
    204e:	2b0b      	cmp	r3, #11
    2050:	d11e      	bne.n	2090 <NoData_Setup0+0x138>
    {
      Result = Standard_SetInterface();
    2052:	f7ff fb6b 	bl	172c <Standard_SetInterface>
    2056:	4603      	mov	r3, r0
    2058:	603b      	str	r3, [r7, #0]
    205a:	e019      	b.n	2090 <NoData_Setup0+0x138>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    205c:	4b27      	ldr	r3, [pc, #156]	(20fc <NoData_Setup0+0x1a4>)
    205e:	681b      	ldr	r3, [r3, #0]
    2060:	781b      	ldrb	r3, [r3, #0]
    2062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2066:	2b02      	cmp	r3, #2
    2068:	d10f      	bne.n	208a <NoData_Setup0+0x132>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	2b01      	cmp	r3, #1
    206e:	d104      	bne.n	207a <NoData_Setup0+0x122>
    {
      Result = Standard_ClearFeature();
    2070:	f7ff fc50 	bl	1914 <Standard_ClearFeature>
    2074:	4603      	mov	r3, r0
    2076:	603b      	str	r3, [r7, #0]
    2078:	e00a      	b.n	2090 <NoData_Setup0+0x138>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
    207a:	687b      	ldr	r3, [r7, #4]
    207c:	2b03      	cmp	r3, #3
    207e:	d107      	bne.n	2090 <NoData_Setup0+0x138>
    {
      Result = Standard_SetEndPointFeature();
    2080:	f7ff fd5c 	bl	1b3c <Standard_SetEndPointFeature>
    2084:	4603      	mov	r3, r0
    2086:	603b      	str	r3, [r7, #0]
    2088:	e002      	b.n	2090 <NoData_Setup0+0x138>
    }
  }
  else
  {
    Result = USB_UNSUPPORT;
    208a:	f04f 0302 	mov.w	r3, #2	; 0x2
    208e:	603b      	str	r3, [r7, #0]
  }


  if (Result != USB_SUCCESS)
    2090:	683b      	ldr	r3, [r7, #0]
    2092:	2b00      	cmp	r3, #0
    2094:	d00f      	beq.n	20b6 <NoData_Setup0+0x15e>
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    2096:	4b1a      	ldr	r3, [pc, #104]	(2100 <NoData_Setup0+0x1a8>)
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	695a      	ldr	r2, [r3, #20]
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	b2db      	uxtb	r3, r3
    20a0:	4618      	mov	r0, r3
    20a2:	4790      	blx	r2
    20a4:	4603      	mov	r3, r0
    20a6:	603b      	str	r3, [r7, #0]
    if (Result == USB_NOT_READY)
    20a8:	683b      	ldr	r3, [r7, #0]
    20aa:	2b03      	cmp	r3, #3
    20ac:	d103      	bne.n	20b6 <NoData_Setup0+0x15e>
    {
      ControlState = PAUSE;
    20ae:	f04f 0309 	mov.w	r3, #9	; 0x9
    20b2:	60bb      	str	r3, [r7, #8]
    20b4:	e019      	b.n	20ea <NoData_Setup0+0x192>
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
    20b6:	683b      	ldr	r3, [r7, #0]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d003      	beq.n	20c4 <NoData_Setup0+0x16c>
  {
    ControlState = STALLED;
    20bc:	f04f 0308 	mov.w	r3, #8	; 0x8
    20c0:	60bb      	str	r3, [r7, #8]
    20c2:	e012      	b.n	20ea <NoData_Setup0+0x192>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
    20c4:	f04f 0306 	mov.w	r3, #6	; 0x6
    20c8:	60bb      	str	r3, [r7, #8]

  USB_StatusIn();
    20ca:	4b0e      	ldr	r3, [pc, #56]	(2104 <NoData_Setup0+0x1ac>)
    20cc:	681b      	ldr	r3, [r3, #0]
    20ce:	b29b      	uxth	r3, r3
    20d0:	461a      	mov	r2, r3
    20d2:	4b0d      	ldr	r3, [pc, #52]	(2108 <NoData_Setup0+0x1b0>)
    20d4:	4413      	add	r3, r2
    20d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    20da:	461a      	mov	r2, r3
    20dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    20e0:	6013      	str	r3, [r2, #0]
    20e2:	4a0a      	ldr	r2, [pc, #40]	(210c <NoData_Setup0+0x1b4>)
    20e4:	f04f 0330 	mov.w	r3, #48	; 0x30
    20e8:	8013      	strh	r3, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
    20ea:	4b04      	ldr	r3, [pc, #16]	(20fc <NoData_Setup0+0x1a4>)
    20ec:	681a      	ldr	r2, [r3, #0]
    20ee:	68bb      	ldr	r3, [r7, #8]
    20f0:	b2db      	uxtb	r3, r3
    20f2:	7413      	strb	r3, [r2, #16]
  return;
}
    20f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20f8:	46bd      	mov	sp, r7
    20fa:	bd80      	pop	{r7, pc}
    20fc:	200001fc 	.word	0x200001fc
    2100:	20000200 	.word	0x20000200
    2104:	40005c50 	.word	0x40005c50
    2108:	20003002 	.word	0x20003002
    210c:	20000212 	.word	0x20000212

00002110 <Data_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Data_Setup0(void)
{
    2110:	b580      	push	{r7, lr}
    2112:	b089      	sub	sp, #36
    2114:	af00      	add	r7, sp, #0
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
    2116:	4bc8      	ldr	r3, [pc, #800]	(2438 <Data_Setup0+0x328>)
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	785b      	ldrb	r3, [r3, #1]
    211c:	60fb      	str	r3, [r7, #12]
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
    211e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2122:	607b      	str	r3, [r7, #4]
  wOffset = 0;
    2124:	f04f 0300 	mov.w	r3, #0	; 0x0
    2128:	61bb      	str	r3, [r7, #24]

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
    212a:	68fb      	ldr	r3, [r7, #12]
    212c:	2b06      	cmp	r3, #6
    212e:	d12a      	bne.n	2186 <Data_Setup0+0x76>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    2130:	4bc1      	ldr	r3, [pc, #772]	(2438 <Data_Setup0+0x328>)
    2132:	681b      	ldr	r3, [r3, #0]
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    213a:	2b00      	cmp	r3, #0
    213c:	f040 80dd 	bne.w	22fa <Data_Setup0+0x1ea>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
    2140:	4bbd      	ldr	r3, [pc, #756]	(2438 <Data_Setup0+0x328>)
    2142:	681b      	ldr	r3, [r3, #0]
    2144:	791b      	ldrb	r3, [r3, #4]
    2146:	f887 3023 	strb.w	r3, [r7, #35]
      if (wValue1 == DEVICE_DESCRIPTOR)
    214a:	f897 3023 	ldrb.w	r3, [r7, #35]
    214e:	2b01      	cmp	r3, #1
    2150:	d105      	bne.n	215e <Data_Setup0+0x4e>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
    2152:	f8df 32e8 	ldr.w	r3, [pc, #744]	; 243c <Data_Setup0+0x32c>
    2156:	681b      	ldr	r3, [r3, #0]
    2158:	69db      	ldr	r3, [r3, #28]
    215a:	607b      	str	r3, [r7, #4]
    215c:	e0cd      	b.n	22fa <Data_Setup0+0x1ea>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
    215e:	f897 3023 	ldrb.w	r3, [r7, #35]
    2162:	2b02      	cmp	r3, #2
    2164:	d104      	bne.n	2170 <Data_Setup0+0x60>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
    2166:	4bb5      	ldr	r3, [pc, #724]	(243c <Data_Setup0+0x32c>)
    2168:	681b      	ldr	r3, [r3, #0]
    216a:	6a1b      	ldr	r3, [r3, #32]
    216c:	607b      	str	r3, [r7, #4]
    216e:	e0c4      	b.n	22fa <Data_Setup0+0x1ea>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
    2170:	f897 3023 	ldrb.w	r3, [r7, #35]
    2174:	2b03      	cmp	r3, #3
    2176:	f040 80c0 	bne.w	22fa <Data_Setup0+0x1ea>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
    217a:	f8df 32c0 	ldr.w	r3, [pc, #704]	; 243c <Data_Setup0+0x32c>
    217e:	681b      	ldr	r3, [r3, #0]
    2180:	6a5b      	ldr	r3, [r3, #36]
    2182:	607b      	str	r3, [r7, #4]
    2184:	e0b9      	b.n	22fa <Data_Setup0+0x1ea>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
    2186:	68fb      	ldr	r3, [r7, #12]
    2188:	2b00      	cmp	r3, #0
    218a:	d17c      	bne.n	2286 <Data_Setup0+0x176>
    218c:	4baa      	ldr	r3, [pc, #680]	(2438 <Data_Setup0+0x328>)
    218e:	681b      	ldr	r3, [r3, #0]
    2190:	889b      	ldrh	r3, [r3, #4]
    2192:	2b00      	cmp	r3, #0
    2194:	d177      	bne.n	2286 <Data_Setup0+0x176>
    2196:	4ba8      	ldr	r3, [pc, #672]	(2438 <Data_Setup0+0x328>)
    2198:	681b      	ldr	r3, [r3, #0]
    219a:	899b      	ldrh	r3, [r3, #12]
    219c:	2b02      	cmp	r3, #2
    219e:	d172      	bne.n	2286 <Data_Setup0+0x176>
    21a0:	4ba5      	ldr	r3, [pc, #660]	(2438 <Data_Setup0+0x328>)
    21a2:	681b      	ldr	r3, [r3, #0]
    21a4:	7a1b      	ldrb	r3, [r3, #8]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d16d      	bne.n	2286 <Data_Setup0+0x176>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    21aa:	4ba3      	ldr	r3, [pc, #652]	(2438 <Data_Setup0+0x328>)
    21ac:	681b      	ldr	r3, [r3, #0]
    21ae:	781b      	ldrb	r3, [r3, #0]
    21b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    21b4:	2b00      	cmp	r3, #0
    21b6:	d107      	bne.n	21c8 <Data_Setup0+0xb8>
    21b8:	4b9f      	ldr	r3, [pc, #636]	(2438 <Data_Setup0+0x328>)
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	891b      	ldrh	r3, [r3, #8]
    21be:	2b00      	cmp	r3, #0
    21c0:	d102      	bne.n	21c8 <Data_Setup0+0xb8>
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
    21c2:	4b9f      	ldr	r3, [pc, #636]	(2440 <Data_Setup0+0x330>)
    21c4:	607b      	str	r3, [r7, #4]
    21c6:	e098      	b.n	22fa <Data_Setup0+0x1ea>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    21c8:	4b9b      	ldr	r3, [pc, #620]	(2438 <Data_Setup0+0x328>)
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    21d2:	2b01      	cmp	r3, #1
    21d4:	d116      	bne.n	2204 <Data_Setup0+0xf4>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
    21d6:	4b99      	ldr	r3, [pc, #612]	(243c <Data_Setup0+0x32c>)
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	699a      	ldr	r2, [r3, #24]
    21dc:	4b96      	ldr	r3, [pc, #600]	(2438 <Data_Setup0+0x328>)
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	7a5b      	ldrb	r3, [r3, #9]
    21e2:	4618      	mov	r0, r3
    21e4:	f04f 0100 	mov.w	r1, #0	; 0x0
    21e8:	4790      	blx	r2
    21ea:	4603      	mov	r3, r0
    21ec:	2b00      	cmp	r3, #0
    21ee:	f040 8084 	bne.w	22fa <Data_Setup0+0x1ea>
    21f2:	4b91      	ldr	r3, [pc, #580]	(2438 <Data_Setup0+0x328>)
    21f4:	681b      	ldr	r3, [r3, #0]
    21f6:	7c9b      	ldrb	r3, [r3, #18]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d07e      	beq.n	22fa <Data_Setup0+0x1ea>
          && (pInformation->Current_Configuration != 0))
      {
        CopyRoutine = Standard_GetStatus;
    21fc:	f8df 3240 	ldr.w	r3, [pc, #576]	; 2440 <Data_Setup0+0x330>
    2200:	607b      	str	r3, [r7, #4]
    2202:	e07a      	b.n	22fa <Data_Setup0+0x1ea>
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    2204:	4b8c      	ldr	r3, [pc, #560]	(2438 <Data_Setup0+0x328>)
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	781b      	ldrb	r3, [r3, #0]
    220a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    220e:	2b02      	cmp	r3, #2
    2210:	d173      	bne.n	22fa <Data_Setup0+0x1ea>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
    2212:	4b89      	ldr	r3, [pc, #548]	(2438 <Data_Setup0+0x328>)
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	7a5b      	ldrb	r3, [r3, #9]
    2218:	f003 030f 	and.w	r3, r3, #15	; 0xf
    221c:	613b      	str	r3, [r7, #16]
      Reserved = pInformation->USBwIndex0 & 0x70;
    221e:	4b86      	ldr	r3, [pc, #536]	(2438 <Data_Setup0+0x328>)
    2220:	681b      	ldr	r3, [r3, #0]
    2222:	7a5b      	ldrb	r3, [r3, #9]
    2224:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2228:	617b      	str	r3, [r7, #20]

      if (ValBit(pInformation->USBwIndex0, 7))
    222a:	4b83      	ldr	r3, [pc, #524]	(2438 <Data_Setup0+0x328>)
    222c:	681b      	ldr	r3, [r3, #0]
    222e:	7a5b      	ldrb	r3, [r3, #9]
    2230:	b25b      	sxtb	r3, r3
    2232:	2b00      	cmp	r3, #0
    2234:	da0c      	bge.n	2250 <Data_Setup0+0x140>
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
    2236:	693b      	ldr	r3, [r7, #16]
    2238:	ea4f 0383 	mov.w	r3, r3, lsl #2
    223c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2240:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	b29b      	uxth	r3, r3
    2248:	f003 0330 	and.w	r3, r3, #48	; 0x30
    224c:	61fb      	str	r3, [r7, #28]
    224e:	e00b      	b.n	2268 <Data_Setup0+0x158>
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
    2250:	693b      	ldr	r3, [r7, #16]
    2252:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2256:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    225a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    225e:	681b      	ldr	r3, [r3, #0]
    2260:	b29b      	uxth	r3, r3
    2262:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    2266:	61fb      	str	r3, [r7, #28]
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
    2268:	4b76      	ldr	r3, [pc, #472]	(2444 <Data_Setup0+0x334>)
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	461a      	mov	r2, r3
    226e:	693b      	ldr	r3, [r7, #16]
    2270:	429a      	cmp	r2, r3
    2272:	d942      	bls.n	22fa <Data_Setup0+0x1ea>
    2274:	697b      	ldr	r3, [r7, #20]
    2276:	2b00      	cmp	r3, #0
    2278:	d13f      	bne.n	22fa <Data_Setup0+0x1ea>
    227a:	69fb      	ldr	r3, [r7, #28]
    227c:	2b00      	cmp	r3, #0
    227e:	d03c      	beq.n	22fa <Data_Setup0+0x1ea>
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
    2280:	4b6f      	ldr	r3, [pc, #444]	(2440 <Data_Setup0+0x330>)
    2282:	607b      	str	r3, [r7, #4]
    2284:	e039      	b.n	22fa <Data_Setup0+0x1ea>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
    2286:	68fb      	ldr	r3, [r7, #12]
    2288:	2b08      	cmp	r3, #8
    228a:	d109      	bne.n	22a0 <Data_Setup0+0x190>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    228c:	4b6a      	ldr	r3, [pc, #424]	(2438 <Data_Setup0+0x328>)
    228e:	681b      	ldr	r3, [r3, #0]
    2290:	781b      	ldrb	r3, [r3, #0]
    2292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2296:	2b00      	cmp	r3, #0
    2298:	d12f      	bne.n	22fa <Data_Setup0+0x1ea>
    {
      CopyRoutine = Standard_GetConfiguration;
    229a:	4b6b      	ldr	r3, [pc, #428]	(2448 <Data_Setup0+0x338>)
    229c:	607b      	str	r3, [r7, #4]
    229e:	e02c      	b.n	22fa <Data_Setup0+0x1ea>
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
    22a0:	68fb      	ldr	r3, [r7, #12]
    22a2:	2b0a      	cmp	r3, #10
    22a4:	d129      	bne.n	22fa <Data_Setup0+0x1ea>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    22a6:	4b64      	ldr	r3, [pc, #400]	(2438 <Data_Setup0+0x328>)
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	781b      	ldrb	r3, [r3, #0]
    22ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22b0:	2b01      	cmp	r3, #1
    22b2:	d122      	bne.n	22fa <Data_Setup0+0x1ea>
    22b4:	4b60      	ldr	r3, [pc, #384]	(2438 <Data_Setup0+0x328>)
    22b6:	681b      	ldr	r3, [r3, #0]
    22b8:	7c9b      	ldrb	r3, [r3, #18]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d01d      	beq.n	22fa <Data_Setup0+0x1ea>
    22be:	4b5e      	ldr	r3, [pc, #376]	(2438 <Data_Setup0+0x328>)
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	889b      	ldrh	r3, [r3, #4]
    22c4:	2b00      	cmp	r3, #0
    22c6:	d118      	bne.n	22fa <Data_Setup0+0x1ea>
    22c8:	4b5b      	ldr	r3, [pc, #364]	(2438 <Data_Setup0+0x328>)
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	7a1b      	ldrb	r3, [r3, #8]
    22ce:	2b00      	cmp	r3, #0
    22d0:	d113      	bne.n	22fa <Data_Setup0+0x1ea>
    22d2:	4b59      	ldr	r3, [pc, #356]	(2438 <Data_Setup0+0x328>)
    22d4:	681b      	ldr	r3, [r3, #0]
    22d6:	899b      	ldrh	r3, [r3, #12]
    22d8:	2b01      	cmp	r3, #1
    22da:	d10e      	bne.n	22fa <Data_Setup0+0x1ea>
    22dc:	4b57      	ldr	r3, [pc, #348]	(243c <Data_Setup0+0x32c>)
    22de:	681b      	ldr	r3, [r3, #0]
    22e0:	699a      	ldr	r2, [r3, #24]
    22e2:	4b55      	ldr	r3, [pc, #340]	(2438 <Data_Setup0+0x328>)
    22e4:	681b      	ldr	r3, [r3, #0]
    22e6:	7a5b      	ldrb	r3, [r3, #9]
    22e8:	4618      	mov	r0, r3
    22ea:	f04f 0100 	mov.w	r1, #0	; 0x0
    22ee:	4790      	blx	r2
    22f0:	4603      	mov	r3, r0
    22f2:	2b00      	cmp	r3, #0
    22f4:	d101      	bne.n	22fa <Data_Setup0+0x1ea>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
    22f6:	4b55      	ldr	r3, [pc, #340]	(244c <Data_Setup0+0x33c>)
    22f8:	607b      	str	r3, [r7, #4]
    }

  }
  
  if (CopyRoutine)
    22fa:	687b      	ldr	r3, [r7, #4]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d010      	beq.n	2322 <Data_Setup0+0x212>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    2300:	4b4d      	ldr	r3, [pc, #308]	(2438 <Data_Setup0+0x328>)
    2302:	681a      	ldr	r2, [r3, #0]
    2304:	69bb      	ldr	r3, [r7, #24]
    2306:	b29b      	uxth	r3, r3
    2308:	8353      	strh	r3, [r2, #26]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    230a:	4b4b      	ldr	r3, [pc, #300]	(2438 <Data_Setup0+0x328>)
    230c:	681a      	ldr	r2, [r3, #0]
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	6213      	str	r3, [r2, #32]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	f04f 0000 	mov.w	r0, #0	; 0x0
    2318:	4798      	blx	r3
    Result = USB_SUCCESS;
    231a:	f04f 0300 	mov.w	r3, #0	; 0x0
    231e:	60bb      	str	r3, [r7, #8]
    2320:	e012      	b.n	2348 <Data_Setup0+0x238>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    2322:	4b46      	ldr	r3, [pc, #280]	(243c <Data_Setup0+0x32c>)
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	691a      	ldr	r2, [r3, #16]
    2328:	4b43      	ldr	r3, [pc, #268]	(2438 <Data_Setup0+0x328>)
    232a:	681b      	ldr	r3, [r3, #0]
    232c:	785b      	ldrb	r3, [r3, #1]
    232e:	4618      	mov	r0, r3
    2330:	4790      	blx	r2
    2332:	4603      	mov	r3, r0
    2334:	60bb      	str	r3, [r7, #8]
    if (Result == USB_NOT_READY)
    2336:	68bb      	ldr	r3, [r7, #8]
    2338:	2b03      	cmp	r3, #3
    233a:	d105      	bne.n	2348 <Data_Setup0+0x238>
    {
      pInformation->ControlState = PAUSE;
    233c:	4b3e      	ldr	r3, [pc, #248]	(2438 <Data_Setup0+0x328>)
    233e:	681a      	ldr	r2, [r3, #0]
    2340:	f04f 0309 	mov.w	r3, #9	; 0x9
    2344:	7413      	strb	r3, [r2, #16]
    2346:	e072      	b.n	242e <Data_Setup0+0x31e>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
    2348:	4b3b      	ldr	r3, [pc, #236]	(2438 <Data_Setup0+0x328>)
    234a:	681b      	ldr	r3, [r3, #0]
    234c:	8b1a      	ldrh	r2, [r3, #24]
    234e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2352:	429a      	cmp	r2, r3
    2354:	d105      	bne.n	2362 <Data_Setup0+0x252>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    2356:	4b38      	ldr	r3, [pc, #224]	(2438 <Data_Setup0+0x328>)
    2358:	681a      	ldr	r2, [r3, #0]
    235a:	f04f 0309 	mov.w	r3, #9	; 0x9
    235e:	7413      	strb	r3, [r2, #16]
    2360:	e065      	b.n	242e <Data_Setup0+0x31e>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
    2362:	68bb      	ldr	r3, [r7, #8]
    2364:	2b02      	cmp	r3, #2
    2366:	d004      	beq.n	2372 <Data_Setup0+0x262>
    2368:	4b33      	ldr	r3, [pc, #204]	(2438 <Data_Setup0+0x328>)
    236a:	681b      	ldr	r3, [r3, #0]
    236c:	8b1b      	ldrh	r3, [r3, #24]
    236e:	2b00      	cmp	r3, #0
    2370:	d105      	bne.n	237e <Data_Setup0+0x26e>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
    2372:	4b31      	ldr	r3, [pc, #196]	(2438 <Data_Setup0+0x328>)
    2374:	681a      	ldr	r2, [r3, #0]
    2376:	f04f 0308 	mov.w	r3, #8	; 0x8
    237a:	7413      	strb	r3, [r2, #16]
    237c:	e057      	b.n	242e <Data_Setup0+0x31e>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
    237e:	4b2e      	ldr	r3, [pc, #184]	(2438 <Data_Setup0+0x328>)
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	b25b      	sxtb	r3, r3
    2386:	2b00      	cmp	r3, #0
    2388:	da47      	bge.n	241a <Data_Setup0+0x30a>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
    238a:	4b2b      	ldr	r3, [pc, #172]	(2438 <Data_Setup0+0x328>)
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	899b      	ldrh	r3, [r3, #12]
    2390:	603b      	str	r3, [r7, #0]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    2392:	4b29      	ldr	r3, [pc, #164]	(2438 <Data_Setup0+0x328>)
    2394:	681b      	ldr	r3, [r3, #0]
    2396:	8b1b      	ldrh	r3, [r3, #24]
    2398:	461a      	mov	r2, r3
    239a:	683b      	ldr	r3, [r7, #0]
    239c:	429a      	cmp	r2, r3
    239e:	d905      	bls.n	23ac <Data_Setup0+0x29c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    23a0:	4b25      	ldr	r3, [pc, #148]	(2438 <Data_Setup0+0x328>)
    23a2:	681a      	ldr	r2, [r3, #0]
    23a4:	683b      	ldr	r3, [r7, #0]
    23a6:	b29b      	uxth	r3, r3
    23a8:	8313      	strh	r3, [r2, #24]
    23aa:	e02b      	b.n	2404 <Data_Setup0+0x2f4>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
    23ac:	4b22      	ldr	r3, [pc, #136]	(2438 <Data_Setup0+0x328>)
    23ae:	681b      	ldr	r3, [r3, #0]
    23b0:	8b1a      	ldrh	r2, [r3, #24]
    23b2:	4b21      	ldr	r3, [pc, #132]	(2438 <Data_Setup0+0x328>)
    23b4:	681b      	ldr	r3, [r3, #0]
    23b6:	899b      	ldrh	r3, [r3, #12]
    23b8:	429a      	cmp	r2, r3
    23ba:	d223      	bcs.n	2404 <Data_Setup0+0x2f4>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
    23bc:	4b1e      	ldr	r3, [pc, #120]	(2438 <Data_Setup0+0x328>)
    23be:	681b      	ldr	r3, [r3, #0]
    23c0:	8b1a      	ldrh	r2, [r3, #24]
    23c2:	4b1e      	ldr	r3, [pc, #120]	(243c <Data_Setup0+0x32c>)
    23c4:	681b      	ldr	r3, [r3, #0]
    23c6:	f893 302c 	ldrb.w	r3, [r3, #44]
    23ca:	429a      	cmp	r2, r3
    23cc:	d204      	bcs.n	23d8 <Data_Setup0+0x2c8>
      {
        Data_Mul_MaxPacketSize = FALSE;
    23ce:	4a20      	ldr	r2, [pc, #128]	(2450 <Data_Setup0+0x340>)
    23d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    23d4:	6013      	str	r3, [r2, #0]
    23d6:	e015      	b.n	2404 <Data_Setup0+0x2f4>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
    23d8:	f8df 305c 	ldr.w	r3, [pc, #92]	; 2438 <Data_Setup0+0x328>
    23dc:	681b      	ldr	r3, [r3, #0]
    23de:	8b1b      	ldrh	r3, [r3, #24]
    23e0:	4619      	mov	r1, r3
    23e2:	4b16      	ldr	r3, [pc, #88]	(243c <Data_Setup0+0x32c>)
    23e4:	681b      	ldr	r3, [r3, #0]
    23e6:	f893 302c 	ldrb.w	r3, [r3, #44]
    23ea:	461a      	mov	r2, r3
    23ec:	fb91 f3f2 	sdiv	r3, r1, r2
    23f0:	fb02 f303 	mul.w	r3, r2, r3
    23f4:	ebc3 0301 	rsb	r3, r3, r1
    23f8:	2b00      	cmp	r3, #0
    23fa:	d103      	bne.n	2404 <Data_Setup0+0x2f4>
      {
        Data_Mul_MaxPacketSize = TRUE;
    23fc:	4a14      	ldr	r2, [pc, #80]	(2450 <Data_Setup0+0x340>)
    23fe:	f04f 0301 	mov.w	r3, #1	; 0x1
    2402:	6013      	str	r3, [r2, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    2404:	f8df 3030 	ldr.w	r3, [pc, #48]	; 2438 <Data_Setup0+0x328>
    2408:	681a      	ldr	r2, [r3, #0]
    240a:	4b0c      	ldr	r3, [pc, #48]	(243c <Data_Setup0+0x32c>)
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	f893 302c 	ldrb.w	r3, [r3, #44]
    2412:	8393      	strh	r3, [r2, #28]
    DataStageIn();
    2414:	f7ff fd06 	bl	1e24 <DataStageIn>
    2418:	e009      	b.n	242e <Data_Setup0+0x31e>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
    241a:	4b07      	ldr	r3, [pc, #28]	(2438 <Data_Setup0+0x328>)
    241c:	681a      	ldr	r2, [r3, #0]
    241e:	f04f 0303 	mov.w	r3, #3	; 0x3
    2422:	7413      	strb	r3, [r2, #16]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
    2424:	f8df 202c 	ldr.w	r2, [pc, #44]	; 2454 <Data_Setup0+0x344>
    2428:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    242c:	8013      	strh	r3, [r2, #0]
  }

  return;
}
    242e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    2432:	46bd      	mov	sp, r7
    2434:	bd80      	pop	{r7, pc}
    2436:	46c0      	nop			(mov r8, r8)
    2438:	200001fc 	.word	0x200001fc
    243c:	20000200 	.word	0x20000200
    2440:	000017c9 	.word	0x000017c9
    2444:	2000005c 	.word	0x2000005c
    2448:	00001639 	.word	0x00001639
    244c:	000016e5 	.word	0x000016e5
    2450:	20000260 	.word	0x20000260
    2454:	20000210 	.word	0x20000210

00002458 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
    2458:	b590      	push	{r4, r7, lr}
    245a:	b082      	sub	sp, #8
    245c:	af00      	add	r7, sp, #0
  ep = OTGD_FS_PCD_GetOutEP(ENDP0);
  pBuf.b = ep->xfer_buff;
  
  OTGD_FS_EP0StartXfer(ep);
#else  
  uint16_t offset = 1;
    245e:	f04f 0301 	mov.w	r3, #1	; 0x1
    2462:	80fb      	strh	r3, [r7, #6]
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
    2464:	4b36      	ldr	r3, [pc, #216]	(2540 <Setup0_Process+0xe8>)
    2466:	681b      	ldr	r3, [r3, #0]
    2468:	b29b      	uxth	r3, r3
    246a:	461a      	mov	r2, r3
    246c:	4b35      	ldr	r3, [pc, #212]	(2544 <Setup0_Process+0xec>)
    246e:	4413      	add	r3, r2
    2470:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2474:	681b      	ldr	r3, [r3, #0]
    2476:	b29b      	uxth	r3, r3
    2478:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    247c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    2480:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2484:	603b      	str	r3, [r7, #0]
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
    2486:	4b30      	ldr	r3, [pc, #192]	(2548 <Setup0_Process+0xf0>)
    2488:	681b      	ldr	r3, [r3, #0]
    248a:	7c1b      	ldrb	r3, [r3, #16]
    248c:	2b09      	cmp	r3, #9
    248e:	d040      	beq.n	2512 <Setup0_Process+0xba>
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
    2490:	4b2d      	ldr	r3, [pc, #180]	(2548 <Setup0_Process+0xf0>)
    2492:	6819      	ldr	r1, [r3, #0]
    2494:	683a      	ldr	r2, [r7, #0]
    2496:	7813      	ldrb	r3, [r2, #0]
    2498:	700b      	strb	r3, [r1, #0]
    249a:	f102 0301 	add.w	r3, r2, #1	; 0x1
    249e:	603b      	str	r3, [r7, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    24a0:	4b29      	ldr	r3, [pc, #164]	(2548 <Setup0_Process+0xf0>)
    24a2:	6819      	ldr	r1, [r3, #0]
    24a4:	683a      	ldr	r2, [r7, #0]
    24a6:	7813      	ldrb	r3, [r2, #0]
    24a8:	704b      	strb	r3, [r1, #1]
    24aa:	f102 0301 	add.w	r3, r2, #1	; 0x1
    24ae:	603b      	str	r3, [r7, #0]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    24b0:	683a      	ldr	r2, [r7, #0]
    24b2:	88fb      	ldrh	r3, [r7, #6]
    24b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    24b8:	4413      	add	r3, r2
    24ba:	603b      	str	r3, [r7, #0]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    24bc:	4b22      	ldr	r3, [pc, #136]	(2548 <Setup0_Process+0xf0>)
    24be:	681c      	ldr	r4, [r3, #0]
    24c0:	683a      	ldr	r2, [r7, #0]
    24c2:	8813      	ldrh	r3, [r2, #0]
    24c4:	4619      	mov	r1, r3
    24c6:	f102 0302 	add.w	r3, r2, #2	; 0x2
    24ca:	603b      	str	r3, [r7, #0]
    24cc:	4608      	mov	r0, r1
    24ce:	f001 fb89 	bl	3be4 <ByteSwap>
    24d2:	4603      	mov	r3, r0
    24d4:	80a3      	strh	r3, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    24d6:	683a      	ldr	r2, [r7, #0]
    24d8:	88fb      	ldrh	r3, [r7, #6]
    24da:	ea4f 0343 	mov.w	r3, r3, lsl #1
    24de:	4413      	add	r3, r2
    24e0:	603b      	str	r3, [r7, #0]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    24e2:	4b19      	ldr	r3, [pc, #100]	(2548 <Setup0_Process+0xf0>)
    24e4:	681c      	ldr	r4, [r3, #0]
    24e6:	683a      	ldr	r2, [r7, #0]
    24e8:	8813      	ldrh	r3, [r2, #0]
    24ea:	4619      	mov	r1, r3
    24ec:	f102 0302 	add.w	r3, r2, #2	; 0x2
    24f0:	603b      	str	r3, [r7, #0]
    24f2:	4608      	mov	r0, r1
    24f4:	f001 fb76 	bl	3be4 <ByteSwap>
    24f8:	4603      	mov	r3, r0
    24fa:	8123      	strh	r3, [r4, #8]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    24fc:	683a      	ldr	r2, [r7, #0]
    24fe:	88fb      	ldrh	r3, [r7, #6]
    2500:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2504:	4413      	add	r3, r2
    2506:	603b      	str	r3, [r7, #0]
    pInformation->USBwLength = *pBuf.w; /* wLength */
    2508:	4b0f      	ldr	r3, [pc, #60]	(2548 <Setup0_Process+0xf0>)
    250a:	681a      	ldr	r2, [r3, #0]
    250c:	683b      	ldr	r3, [r7, #0]
    250e:	881b      	ldrh	r3, [r3, #0]
    2510:	8193      	strh	r3, [r2, #12]
  }

  pInformation->ControlState = SETTING_UP;
    2512:	4b0d      	ldr	r3, [pc, #52]	(2548 <Setup0_Process+0xf0>)
    2514:	681a      	ldr	r2, [r3, #0]
    2516:	f04f 0301 	mov.w	r3, #1	; 0x1
    251a:	7413      	strb	r3, [r2, #16]
  if (pInformation->USBwLength == 0)
    251c:	4b0a      	ldr	r3, [pc, #40]	(2548 <Setup0_Process+0xf0>)
    251e:	681b      	ldr	r3, [r3, #0]
    2520:	899b      	ldrh	r3, [r3, #12]
    2522:	2b00      	cmp	r3, #0
    2524:	d102      	bne.n	252c <Setup0_Process+0xd4>
  {
    /* Setup with no data stage */
    NoData_Setup0();
    2526:	f7ff fd17 	bl	1f58 <NoData_Setup0>
    252a:	e001      	b.n	2530 <Setup0_Process+0xd8>
  }
  else
  {
    /* Setup with data stage */
    Data_Setup0();
    252c:	f7ff fdf0 	bl	2110 <Data_Setup0>
  }
  return Post0_Process();
    2530:	f000 f896 	bl	2660 <Post0_Process>
    2534:	4603      	mov	r3, r0
}
    2536:	4618      	mov	r0, r3
    2538:	f107 0708 	add.w	r7, r7, #8	; 0x8
    253c:	46bd      	mov	sp, r7
    253e:	bd90      	pop	{r4, r7, pc}
    2540:	40005c50 	.word	0x40005c50
    2544:	20003004 	.word	0x20003004
    2548:	200001fc 	.word	0x200001fc

0000254c <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
    254c:	b580      	push	{r7, lr}
    254e:	b081      	sub	sp, #4
    2550:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
    2552:	4b21      	ldr	r3, [pc, #132]	(25d8 <In0_Process+0x8c>)
    2554:	681b      	ldr	r3, [r3, #0]
    2556:	7c1b      	ldrb	r3, [r3, #16]
    2558:	603b      	str	r3, [r7, #0]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
    255a:	683b      	ldr	r3, [r7, #0]
    255c:	2b02      	cmp	r3, #2
    255e:	d002      	beq.n	2566 <In0_Process+0x1a>
    2560:	683b      	ldr	r3, [r7, #0]
    2562:	2b04      	cmp	r3, #4
    2564:	d106      	bne.n	2574 <In0_Process+0x28>
  {
    DataStageIn();
    2566:	f7ff fc5d 	bl	1e24 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
    256a:	4b1b      	ldr	r3, [pc, #108]	(25d8 <In0_Process+0x8c>)
    256c:	681b      	ldr	r3, [r3, #0]
    256e:	7c1b      	ldrb	r3, [r3, #16]
    2570:	603b      	str	r3, [r7, #0]
    2572:	e023      	b.n	25bc <In0_Process+0x70>
  }

  else if (ControlState == WAIT_STATUS_IN)
    2574:	683b      	ldr	r3, [r7, #0]
    2576:	2b06      	cmp	r3, #6
    2578:	d11d      	bne.n	25b6 <In0_Process+0x6a>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
    257a:	4b17      	ldr	r3, [pc, #92]	(25d8 <In0_Process+0x8c>)
    257c:	681b      	ldr	r3, [r3, #0]
    257e:	785b      	ldrb	r3, [r3, #1]
    2580:	2b05      	cmp	r3, #5
    2582:	d110      	bne.n	25a6 <In0_Process+0x5a>
    2584:	4b14      	ldr	r3, [pc, #80]	(25d8 <In0_Process+0x8c>)
    2586:	681b      	ldr	r3, [r3, #0]
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    258e:	2b00      	cmp	r3, #0
    2590:	d109      	bne.n	25a6 <In0_Process+0x5a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
    2592:	4b11      	ldr	r3, [pc, #68]	(25d8 <In0_Process+0x8c>)
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	795b      	ldrb	r3, [r3, #5]
    2598:	4618      	mov	r0, r3
    259a:	f000 f88b 	bl	26b4 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
    259e:	4b0f      	ldr	r3, [pc, #60]	(25dc <In0_Process+0x90>)
    25a0:	681b      	ldr	r3, [r3, #0]
    25a2:	6a1b      	ldr	r3, [r3, #32]
    25a4:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
    25a6:	4b0e      	ldr	r3, [pc, #56]	(25e0 <In0_Process+0x94>)
    25a8:	681b      	ldr	r3, [r3, #0]
    25aa:	689b      	ldr	r3, [r3, #8]
    25ac:	4798      	blx	r3
    ControlState = STALLED;
    25ae:	f04f 0308 	mov.w	r3, #8	; 0x8
    25b2:	603b      	str	r3, [r7, #0]
    25b4:	e002      	b.n	25bc <In0_Process+0x70>
  }

  else
  {
    ControlState = STALLED;
    25b6:	f04f 0308 	mov.w	r3, #8	; 0x8
    25ba:	603b      	str	r3, [r7, #0]
  }

  pInformation->ControlState = ControlState;
    25bc:	4b06      	ldr	r3, [pc, #24]	(25d8 <In0_Process+0x8c>)
    25be:	681a      	ldr	r2, [r3, #0]
    25c0:	683b      	ldr	r3, [r7, #0]
    25c2:	b2db      	uxtb	r3, r3
    25c4:	7413      	strb	r3, [r2, #16]

  return Post0_Process();
    25c6:	f000 f84b 	bl	2660 <Post0_Process>
    25ca:	4603      	mov	r3, r0
}
    25cc:	4618      	mov	r0, r3
    25ce:	f107 0704 	add.w	r7, r7, #4	; 0x4
    25d2:	46bd      	mov	sp, r7
    25d4:	bd80      	pop	{r7, pc}
    25d6:	46c0      	nop			(mov r8, r8)
    25d8:	200001fc 	.word	0x200001fc
    25dc:	20000204 	.word	0x20000204
    25e0:	20000200 	.word	0x20000200

000025e4 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	b081      	sub	sp, #4
    25e8:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
    25ea:	4b1b      	ldr	r3, [pc, #108]	(2658 <Out0_Process+0x74>)
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	7c1b      	ldrb	r3, [r3, #16]
    25f0:	603b      	str	r3, [r7, #0]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
    25f2:	683b      	ldr	r3, [r7, #0]
    25f4:	2b02      	cmp	r3, #2
    25f6:	d002      	beq.n	25fe <Out0_Process+0x1a>
    25f8:	683b      	ldr	r3, [r7, #0]
    25fa:	2b04      	cmp	r3, #4
    25fc:	d103      	bne.n	2606 <Out0_Process+0x22>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
    25fe:	f04f 0308 	mov.w	r3, #8	; 0x8
    2602:	603b      	str	r3, [r7, #0]
    2604:	e01a      	b.n	263c <Out0_Process+0x58>
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	2b03      	cmp	r3, #3
    260a:	d002      	beq.n	2612 <Out0_Process+0x2e>
    260c:	683b      	ldr	r3, [r7, #0]
    260e:	2b05      	cmp	r3, #5
    2610:	d106      	bne.n	2620 <Out0_Process+0x3c>
  {
    DataStageOut();
    2612:	f7ff fb77 	bl	1d04 <DataStageOut>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
    2616:	4b10      	ldr	r3, [pc, #64]	(2658 <Out0_Process+0x74>)
    2618:	681b      	ldr	r3, [r3, #0]
    261a:	7c1b      	ldrb	r3, [r3, #16]
    261c:	603b      	str	r3, [r7, #0]
    261e:	e00d      	b.n	263c <Out0_Process+0x58>
  }

  else if (ControlState == WAIT_STATUS_OUT)
    2620:	683b      	ldr	r3, [r7, #0]
    2622:	2b07      	cmp	r3, #7
    2624:	d107      	bne.n	2636 <Out0_Process+0x52>
  {
    (*pProperty->Process_Status_OUT)();
    2626:	4b0d      	ldr	r3, [pc, #52]	(265c <Out0_Process+0x78>)
    2628:	681b      	ldr	r3, [r3, #0]
    262a:	68db      	ldr	r3, [r3, #12]
    262c:	4798      	blx	r3
  #ifndef STM32F10X_CL
    ControlState = STALLED;
    262e:	f04f 0308 	mov.w	r3, #8	; 0x8
    2632:	603b      	str	r3, [r7, #0]
    2634:	e002      	b.n	263c <Out0_Process+0x58>


  /* Unexpect state, STALL the endpoint */
  else
  {
    ControlState = STALLED;
    2636:	f04f 0308 	mov.w	r3, #8	; 0x8
    263a:	603b      	str	r3, [r7, #0]
  }

  pInformation->ControlState = ControlState;
    263c:	4b06      	ldr	r3, [pc, #24]	(2658 <Out0_Process+0x74>)
    263e:	681a      	ldr	r2, [r3, #0]
    2640:	683b      	ldr	r3, [r7, #0]
    2642:	b2db      	uxtb	r3, r3
    2644:	7413      	strb	r3, [r2, #16]

  return Post0_Process();
    2646:	f000 f80b 	bl	2660 <Post0_Process>
    264a:	4603      	mov	r3, r0
}
    264c:	4618      	mov	r0, r3
    264e:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2652:	46bd      	mov	sp, r7
    2654:	bd80      	pop	{r7, pc}
    2656:	46c0      	nop			(mov r8, r8)
    2658:	200001fc 	.word	0x200001fc
    265c:	20000200 	.word	0x20000200

00002660 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
    2660:	b580      	push	{r7, lr}
    2662:	af00      	add	r7, sp, #0
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
    2664:	4b0f      	ldr	r3, [pc, #60]	(26a4 <Post0_Process+0x44>)
    2666:	f893 302c 	ldrb.w	r3, [r3, #44]
    266a:	f04f 0000 	mov.w	r0, #0	; 0x0
    266e:	4619      	mov	r1, r3
    2670:	f000 fef4 	bl	345c <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
    2674:	4b0c      	ldr	r3, [pc, #48]	(26a8 <Post0_Process+0x48>)
    2676:	681b      	ldr	r3, [r3, #0]
    2678:	7c1b      	ldrb	r3, [r3, #16]
    267a:	2b08      	cmp	r3, #8
    267c:	d108      	bne.n	2690 <Post0_Process+0x30>
  {
    vSetEPRxStatus(EP_RX_STALL);
    267e:	f8df 202c 	ldr.w	r2, [pc, #44]	; 26ac <Post0_Process+0x4c>
    2682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2686:	8013      	strh	r3, [r2, #0]
    vSetEPTxStatus(EP_TX_STALL);
    2688:	4a09      	ldr	r2, [pc, #36]	(26b0 <Post0_Process+0x50>)
    268a:	f04f 0310 	mov.w	r3, #16	; 0x10
    268e:	8013      	strh	r3, [r2, #0]
    ep->is_in = 1;
    OTGD_FS_EP0StartXfer(ep);    
  }  
#endif /* STM32F10X_CL */

  return (pInformation->ControlState == PAUSE);
    2690:	4b05      	ldr	r3, [pc, #20]	(26a8 <Post0_Process+0x48>)
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	7c1b      	ldrb	r3, [r3, #16]
    2696:	2b09      	cmp	r3, #9
    2698:	bf14      	ite	ne
    269a:	2300      	movne	r3, #0
    269c:	2301      	moveq	r3, #1
}
    269e:	4618      	mov	r0, r3
    26a0:	46bd      	mov	sp, r7
    26a2:	bd80      	pop	{r7, pc}
    26a4:	20000060 	.word	0x20000060
    26a8:	200001fc 	.word	0x200001fc
    26ac:	20000210 	.word	0x20000210
    26b0:	20000212 	.word	0x20000212

000026b4 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
    26b4:	b480      	push	{r7}
    26b6:	b083      	sub	sp, #12
    26b8:	af00      	add	r7, sp, #0
    26ba:	4603      	mov	r3, r0
    26bc:	703b      	strb	r3, [r7, #0]
#ifdef STM32F10X_CL 
  OTGD_FS_PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
    26be:	4b1e      	ldr	r3, [pc, #120]	(2738 <SetDeviceAddress+0x84>)
    26c0:	781b      	ldrb	r3, [r3, #0]
    26c2:	60bb      	str	r3, [r7, #8]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
    26c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    26c8:	607b      	str	r3, [r7, #4]
    26ca:	e023      	b.n	2714 <SetDeviceAddress+0x60>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	b2db      	uxtb	r3, r3
    26d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    26d4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    26d8:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	b2db      	uxtb	r3, r3
    26e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    26e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    26e8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    26ec:	681b      	ldr	r3, [r3, #0]
    26ee:	b29b      	uxth	r3, r3
    26f0:	461a      	mov	r2, r3
    26f2:	f640 730f 	movw	r3, #3855	; 0xf0f
    26f6:	ea02 0303 	and.w	r3, r2, r3
    26fa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    26fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	b2db      	uxtb	r3, r3
    2706:	ea42 0303 	orr.w	r3, r2, r3
    270a:	600b      	str	r3, [r1, #0]
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    2712:	607b      	str	r3, [r7, #4]
    2714:	687a      	ldr	r2, [r7, #4]
    2716:	68bb      	ldr	r3, [r7, #8]
    2718:	429a      	cmp	r2, r3
    271a:	d3d7      	bcc.n	26cc <SetDeviceAddress+0x18>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
    271c:	4a07      	ldr	r2, [pc, #28]	(273c <SetDeviceAddress+0x88>)
    271e:	783b      	ldrb	r3, [r7, #0]
    2720:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    2724:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    2728:	b2db      	uxtb	r3, r3
    272a:	6013      	str	r3, [r2, #0]
#endif  /* STM32F10X_CL */  
}
    272c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2730:	46bd      	mov	sp, r7
    2732:	bc80      	pop	{r7}
    2734:	4770      	bx	lr
    2736:	46c0      	nop			(mov r8, r8)
    2738:	2000005c 	.word	0x2000005c
    273c:	40005c4c 	.word	0x40005c4c

00002740 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
    2740:	b480      	push	{r7}
    2742:	af00      	add	r7, sp, #0
}
    2744:	46bd      	mov	sp, r7
    2746:	bc80      	pop	{r7}
    2748:	4770      	bx	lr
    274a:	46c0      	nop			(mov r8, r8)

0000274c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
    274c:	b580      	push	{r7, lr}
    274e:	b081      	sub	sp, #4
    2750:	af00      	add	r7, sp, #0
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
    2752:	f04f 0001 	mov.w	r0, #1	; 0x1
    2756:	f7fe f835 	bl	7c4 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
    275a:	f04f 0301 	mov.w	r3, #1	; 0x1
    275e:	807b      	strh	r3, [r7, #2]
  _SetCNTR(wRegVal);
    2760:	4a0e      	ldr	r2, [pc, #56]	(279c <PowerOn+0x50>)
    2762:	887b      	ldrh	r3, [r7, #2]
    2764:	6013      	str	r3, [r2, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
    2766:	4a0e      	ldr	r2, [pc, #56]	(27a0 <PowerOn+0x54>)
    2768:	f04f 0300 	mov.w	r3, #0	; 0x0
    276c:	8013      	strh	r3, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
    276e:	4a0b      	ldr	r2, [pc, #44]	(279c <PowerOn+0x50>)
    2770:	4b0b      	ldr	r3, [pc, #44]	(27a0 <PowerOn+0x54>)
    2772:	881b      	ldrh	r3, [r3, #0]
    2774:	6013      	str	r3, [r2, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
    2776:	4a0b      	ldr	r2, [pc, #44]	(27a4 <PowerOn+0x58>)
    2778:	f04f 0300 	mov.w	r3, #0	; 0x0
    277c:	6013      	str	r3, [r2, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
    277e:	4a08      	ldr	r2, [pc, #32]	(27a0 <PowerOn+0x54>)
    2780:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    2784:	8013      	strh	r3, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
    2786:	4a05      	ldr	r2, [pc, #20]	(279c <PowerOn+0x50>)
    2788:	4b05      	ldr	r3, [pc, #20]	(27a0 <PowerOn+0x54>)
    278a:	881b      	ldrh	r3, [r3, #0]
    278c:	6013      	str	r3, [r2, #0]
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
    278e:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    2792:	4618      	mov	r0, r3
    2794:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2798:	46bd      	mov	sp, r7
    279a:	bd80      	pop	{r7, pc}
    279c:	40005c40 	.word	0x40005c40
    27a0:	2000020a 	.word	0x2000020a
    27a4:	40005c44 	.word	0x40005c44

000027a8 <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
    27a8:	b580      	push	{r7, lr}
    27aa:	af00      	add	r7, sp, #0
#ifndef STM32F10X_CL
  /* disable all ints and force USB reset */
  _SetCNTR(CNTR_FRES);
    27ac:	4a0a      	ldr	r2, [pc, #40]	(27d8 <PowerOff+0x30>)
    27ae:	f04f 0301 	mov.w	r3, #1	; 0x1
    27b2:	6013      	str	r3, [r2, #0]
  /* clear interrupt status register */
  _SetISTR(0);
    27b4:	4a09      	ldr	r2, [pc, #36]	(27dc <PowerOff+0x34>)
    27b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    27ba:	6013      	str	r3, [r2, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
    27bc:	f04f 0000 	mov.w	r0, #0	; 0x0
    27c0:	f7fe f800 	bl	7c4 <USB_Cable_Config>
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
    27c4:	4a04      	ldr	r2, [pc, #16]	(27d8 <PowerOff+0x30>)
    27c6:	f04f 0303 	mov.w	r3, #3	; 0x3
    27ca:	6013      	str	r3, [r2, #0]
#endif /* STM32F10X_CL */

  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
    27cc:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    27d0:	4618      	mov	r0, r3
    27d2:	46bd      	mov	sp, r7
    27d4:	bd80      	pop	{r7, pc}
    27d6:	46c0      	nop			(mov r8, r8)
    27d8:	40005c40 	.word	0x40005c40
    27dc:	40005c44 	.word	0x40005c44

000027e0 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
    27e0:	b580      	push	{r7, lr}
    27e2:	b081      	sub	sp, #4
    27e4:	af00      	add	r7, sp, #0
  uint16_t wCNTR;
  /* suspend preparation */
  /* ... */

  /* macrocell enters suspend mode */
  wCNTR = _GetCNTR();
    27e6:	4b0d      	ldr	r3, [pc, #52]	(281c <Suspend+0x3c>)
    27e8:	681b      	ldr	r3, [r3, #0]
    27ea:	807b      	strh	r3, [r7, #2]
  wCNTR |= CNTR_FSUSP;
    27ec:	887b      	ldrh	r3, [r7, #2]
    27ee:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    27f2:	807b      	strh	r3, [r7, #2]
  _SetCNTR(wCNTR);
    27f4:	4a09      	ldr	r2, [pc, #36]	(281c <Suspend+0x3c>)
    27f6:	887b      	ldrh	r3, [r7, #2]
    27f8:	6013      	str	r3, [r2, #0]
  /* power reduction */
  /* ... on connected devices */

#ifndef STM32F10X_CL
  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
    27fa:	4b08      	ldr	r3, [pc, #32]	(281c <Suspend+0x3c>)
    27fc:	681b      	ldr	r3, [r3, #0]
    27fe:	807b      	strh	r3, [r7, #2]
  wCNTR |= CNTR_LPMODE;
    2800:	887b      	ldrh	r3, [r7, #2]
    2802:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    2806:	807b      	strh	r3, [r7, #2]
  _SetCNTR(wCNTR);
    2808:	4a04      	ldr	r2, [pc, #16]	(281c <Suspend+0x3c>)
    280a:	887b      	ldrh	r3, [r7, #2]
    280c:	6013      	str	r3, [r2, #0]
#endif /* STM32F10X_CL */

  /* switch-off the clocks */
  /* ... */
  Enter_LowPowerMode();
    280e:	f7fd ff8b 	bl	728 <Enter_LowPowerMode>

}
    2812:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			(mov r8, r8)
    281c:	40005c40 	.word	0x40005c40

00002820 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
    2820:	b580      	push	{r7, lr}
    2822:	b081      	sub	sp, #4
    2824:	af00      	add	r7, sp, #0
  /* restart the clocks */
  /* ...  */

#ifndef STM32F10X_CL
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
    2826:	4b0a      	ldr	r3, [pc, #40]	(2850 <Resume_Init+0x30>)
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	807b      	strh	r3, [r7, #2]
  wCNTR &= (~CNTR_LPMODE);
    282c:	887b      	ldrh	r3, [r7, #2]
    282e:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    2832:	807b      	strh	r3, [r7, #2]
  _SetCNTR(wCNTR);
    2834:	4a06      	ldr	r2, [pc, #24]	(2850 <Resume_Init+0x30>)
    2836:	887b      	ldrh	r3, [r7, #2]
    2838:	6013      	str	r3, [r2, #0]
#endif /* STM32F10X_CL */ 

  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
    283a:	f7fd ff81 	bl	740 <Leave_LowPowerMode>

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
    283e:	4a04      	ldr	r2, [pc, #16]	(2850 <Resume_Init+0x30>)
    2840:	f44f 4306 	mov.w	r3, #34304	; 0x8600
    2844:	6013      	str	r3, [r2, #0]
#endif /* STM32F10X_CL */

  /* reverse suspend preparation */
  /* ... */

}
    2846:	f107 0704 	add.w	r7, r7, #4	; 0x4
    284a:	46bd      	mov	sp, r7
    284c:	bd80      	pop	{r7, pc}
    284e:	46c0      	nop			(mov r8, r8)
    2850:	40005c40 	.word	0x40005c40

00002854 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
    2854:	b580      	push	{r7, lr}
    2856:	b082      	sub	sp, #8
    2858:	af00      	add	r7, sp, #0
    285a:	6038      	str	r0, [r7, #0]
#ifndef STM32F10X_CL
  uint16_t wCNTR;
#endif /* STM32F10X_CL */

  if (eResumeSetVal != RESUME_ESOF)
    285c:	683b      	ldr	r3, [r7, #0]
    285e:	2b07      	cmp	r3, #7
    2860:	d002      	beq.n	2868 <Resume+0x14>
    ResumeS.eState = eResumeSetVal;
    2862:	4a3b      	ldr	r2, [pc, #236]	(2950 <Resume+0xfc>)
    2864:	683b      	ldr	r3, [r7, #0]
    2866:	6013      	str	r3, [r2, #0]

  switch (ResumeS.eState)
    2868:	4b39      	ldr	r3, [pc, #228]	(2950 <Resume+0xfc>)
    286a:	681b      	ldr	r3, [r3, #0]
    286c:	2b05      	cmp	r3, #5
    286e:	d867      	bhi.n	2940 <Resume+0xec>
    2870:	a201      	add	r2, pc, #4	(adr r2, 2878 <Resume+0x24>)
    2872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2876:	46c0      	nop			(mov r8, r8)
    2878:	00002891 	.word	0x00002891
    287c:	0000289f 	.word	0x0000289f
    2880:	000028ad 	.word	0x000028ad
    2884:	000028bf 	.word	0x000028bf
    2888:	000028e3 	.word	0x000028e3
    288c:	00002909 	.word	0x00002909
  {
    case RESUME_EXTERNAL:
      Resume_Init();
    2890:	f7ff ffc6 	bl	2820 <Resume_Init>
      ResumeS.eState = RESUME_OFF;
    2894:	4a2e      	ldr	r2, [pc, #184]	(2950 <Resume+0xfc>)
    2896:	f04f 0306 	mov.w	r3, #6	; 0x6
    289a:	6013      	str	r3, [r2, #0]
    289c:	e054      	b.n	2948 <Resume+0xf4>
      break;
    case RESUME_INTERNAL:
      Resume_Init();
    289e:	f7ff ffbf 	bl	2820 <Resume_Init>
      ResumeS.eState = RESUME_START;
    28a2:	4a2b      	ldr	r2, [pc, #172]	(2950 <Resume+0xfc>)
    28a4:	f04f 0304 	mov.w	r3, #4	; 0x4
    28a8:	6013      	str	r3, [r2, #0]
    28aa:	e04d      	b.n	2948 <Resume+0xf4>
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
    28ac:	4a28      	ldr	r2, [pc, #160]	(2950 <Resume+0xfc>)
    28ae:	f04f 0302 	mov.w	r3, #2	; 0x2
    28b2:	7113      	strb	r3, [r2, #4]
      ResumeS.eState = RESUME_WAIT;
    28b4:	4a26      	ldr	r2, [pc, #152]	(2950 <Resume+0xfc>)
    28b6:	f04f 0303 	mov.w	r3, #3	; 0x3
    28ba:	6013      	str	r3, [r2, #0]
    28bc:	e044      	b.n	2948 <Resume+0xf4>
      break;
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
    28be:	4b24      	ldr	r3, [pc, #144]	(2950 <Resume+0xfc>)
    28c0:	791b      	ldrb	r3, [r3, #4]
    28c2:	b2db      	uxtb	r3, r3
    28c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    28c8:	b2db      	uxtb	r3, r3
    28ca:	4a21      	ldr	r2, [pc, #132]	(2950 <Resume+0xfc>)
    28cc:	7113      	strb	r3, [r2, #4]
      if (ResumeS.bESOFcnt == 0)
    28ce:	4b20      	ldr	r3, [pc, #128]	(2950 <Resume+0xfc>)
    28d0:	791b      	ldrb	r3, [r3, #4]
    28d2:	b2db      	uxtb	r3, r3
    28d4:	2b00      	cmp	r3, #0
    28d6:	d137      	bne.n	2948 <Resume+0xf4>
        ResumeS.eState = RESUME_START;
    28d8:	4a1d      	ldr	r2, [pc, #116]	(2950 <Resume+0xfc>)
    28da:	f04f 0304 	mov.w	r3, #4	; 0x4
    28de:	6013      	str	r3, [r2, #0]
    28e0:	e032      	b.n	2948 <Resume+0xf4>
      break;
    case RESUME_START:
     #ifdef STM32F10X_CL
      OTGD_FS_Dev_SetRemoteWakeup();
     #else 
      wCNTR = _GetCNTR();
    28e2:	4b1c      	ldr	r3, [pc, #112]	(2954 <Resume+0x100>)
    28e4:	681b      	ldr	r3, [r3, #0]
    28e6:	80fb      	strh	r3, [r7, #6]
      wCNTR |= CNTR_RESUME;
    28e8:	88fb      	ldrh	r3, [r7, #6]
    28ea:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    28ee:	80fb      	strh	r3, [r7, #6]
      _SetCNTR(wCNTR);
    28f0:	4a18      	ldr	r2, [pc, #96]	(2954 <Resume+0x100>)
    28f2:	88fb      	ldrh	r3, [r7, #6]
    28f4:	6013      	str	r3, [r2, #0]
     #endif /* STM32F10X_CL */
      ResumeS.eState = RESUME_ON;
    28f6:	4a16      	ldr	r2, [pc, #88]	(2950 <Resume+0xfc>)
    28f8:	f04f 0305 	mov.w	r3, #5	; 0x5
    28fc:	6013      	str	r3, [r2, #0]
      ResumeS.bESOFcnt = 10;
    28fe:	4a14      	ldr	r2, [pc, #80]	(2950 <Resume+0xfc>)
    2900:	f04f 030a 	mov.w	r3, #10	; 0xa
    2904:	7113      	strb	r3, [r2, #4]
    2906:	e01f      	b.n	2948 <Resume+0xf4>
      break;
    case RESUME_ON:
    #ifndef STM32F10X_CL      
      ResumeS.bESOFcnt--;
    2908:	4b11      	ldr	r3, [pc, #68]	(2950 <Resume+0xfc>)
    290a:	791b      	ldrb	r3, [r3, #4]
    290c:	b2db      	uxtb	r3, r3
    290e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    2912:	b2db      	uxtb	r3, r3
    2914:	4a0e      	ldr	r2, [pc, #56]	(2950 <Resume+0xfc>)
    2916:	7113      	strb	r3, [r2, #4]
      if (ResumeS.bESOFcnt == 0)
    2918:	4b0d      	ldr	r3, [pc, #52]	(2950 <Resume+0xfc>)
    291a:	791b      	ldrb	r3, [r3, #4]
    291c:	b2db      	uxtb	r3, r3
    291e:	2b00      	cmp	r3, #0
    2920:	d112      	bne.n	2948 <Resume+0xf4>
      {
     #endif /* STM32F10X_CL */    
       #ifdef STM32F10X_CL
        OTGD_FS_Dev_ResetRemoteWakeup();
       #else
        wCNTR = _GetCNTR();
    2922:	4b0c      	ldr	r3, [pc, #48]	(2954 <Resume+0x100>)
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	80fb      	strh	r3, [r7, #6]
        wCNTR &= (~CNTR_RESUME);
    2928:	88fb      	ldrh	r3, [r7, #6]
    292a:	f023 0310 	bic.w	r3, r3, #16	; 0x10
    292e:	80fb      	strh	r3, [r7, #6]
        _SetCNTR(wCNTR);
    2930:	4a08      	ldr	r2, [pc, #32]	(2954 <Resume+0x100>)
    2932:	88fb      	ldrh	r3, [r7, #6]
    2934:	6013      	str	r3, [r2, #0]
       #endif /* STM32F10X_CL */
        ResumeS.eState = RESUME_OFF;
    2936:	4a06      	ldr	r2, [pc, #24]	(2950 <Resume+0xfc>)
    2938:	f04f 0306 	mov.w	r3, #6	; 0x6
    293c:	6013      	str	r3, [r2, #0]
    293e:	e003      	b.n	2948 <Resume+0xf4>
     #endif /* STM32F10X_CL */
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
    2940:	4a03      	ldr	r2, [pc, #12]	(2950 <Resume+0xfc>)
    2942:	f04f 0306 	mov.w	r3, #6	; 0x6
    2946:	6013      	str	r3, [r2, #0]
      break;
  }
}
    2948:	f107 0708 	add.w	r7, r7, #8	; 0x8
    294c:	46bd      	mov	sp, r7
    294e:	bd80      	pop	{r7, pc}
    2950:	2000026c 	.word	0x2000026c
    2954:	40005c40 	.word	0x40005c40

00002958 <SetCNTR>:
* Input          : wRegValue: new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetCNTR(uint16_t wRegValue)
{
    2958:	b480      	push	{r7}
    295a:	b081      	sub	sp, #4
    295c:	af00      	add	r7, sp, #0
    295e:	4603      	mov	r3, r0
    2960:	803b      	strh	r3, [r7, #0]
  _SetCNTR(wRegValue);
    2962:	4a04      	ldr	r2, [pc, #16]	(2974 <SetCNTR+0x1c>)
    2964:	883b      	ldrh	r3, [r7, #0]
    2966:	6013      	str	r3, [r2, #0]
}
    2968:	f107 0704 	add.w	r7, r7, #4	; 0x4
    296c:	46bd      	mov	sp, r7
    296e:	bc80      	pop	{r7}
    2970:	4770      	bx	lr
    2972:	46c0      	nop			(mov r8, r8)
    2974:	40005c40 	.word	0x40005c40

00002978 <GetCNTR>:
* Input          : None.
* Output         : None.
* Return         : CNTR register Value.
*******************************************************************************/
uint16_t GetCNTR(void)
{
    2978:	b480      	push	{r7}
    297a:	af00      	add	r7, sp, #0
  return(_GetCNTR());
    297c:	4b03      	ldr	r3, [pc, #12]	(298c <GetCNTR+0x14>)
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	b29b      	uxth	r3, r3
}
    2982:	4618      	mov	r0, r3
    2984:	46bd      	mov	sp, r7
    2986:	bc80      	pop	{r7}
    2988:	4770      	bx	lr
    298a:	46c0      	nop			(mov r8, r8)
    298c:	40005c40 	.word	0x40005c40

00002990 <SetISTR>:
* Input          : wRegValue: new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetISTR(uint16_t wRegValue)
{
    2990:	b480      	push	{r7}
    2992:	b081      	sub	sp, #4
    2994:	af00      	add	r7, sp, #0
    2996:	4603      	mov	r3, r0
    2998:	803b      	strh	r3, [r7, #0]
  _SetISTR(wRegValue);
    299a:	4a04      	ldr	r2, [pc, #16]	(29ac <SetISTR+0x1c>)
    299c:	883b      	ldrh	r3, [r7, #0]
    299e:	6013      	str	r3, [r2, #0]
}
    29a0:	f107 0704 	add.w	r7, r7, #4	; 0x4
    29a4:	46bd      	mov	sp, r7
    29a6:	bc80      	pop	{r7}
    29a8:	4770      	bx	lr
    29aa:	46c0      	nop			(mov r8, r8)
    29ac:	40005c44 	.word	0x40005c44

000029b0 <GetISTR>:
* Input          : None.
* Output         : None.
* Return         : ISTR register Value
*******************************************************************************/
uint16_t GetISTR(void)
{
    29b0:	b480      	push	{r7}
    29b2:	af00      	add	r7, sp, #0
  return(_GetISTR());
    29b4:	4b03      	ldr	r3, [pc, #12]	(29c4 <GetISTR+0x14>)
    29b6:	681b      	ldr	r3, [r3, #0]
    29b8:	b29b      	uxth	r3, r3
}
    29ba:	4618      	mov	r0, r3
    29bc:	46bd      	mov	sp, r7
    29be:	bc80      	pop	{r7}
    29c0:	4770      	bx	lr
    29c2:	46c0      	nop			(mov r8, r8)
    29c4:	40005c44 	.word	0x40005c44

000029c8 <GetFNR>:
* Input          : None.
* Output         : None.
* Return         : FNR register Value
*******************************************************************************/
uint16_t GetFNR(void)
{
    29c8:	b480      	push	{r7}
    29ca:	af00      	add	r7, sp, #0
  return(_GetFNR());
    29cc:	4b03      	ldr	r3, [pc, #12]	(29dc <GetFNR+0x14>)
    29ce:	681b      	ldr	r3, [r3, #0]
    29d0:	b29b      	uxth	r3, r3
}
    29d2:	4618      	mov	r0, r3
    29d4:	46bd      	mov	sp, r7
    29d6:	bc80      	pop	{r7}
    29d8:	4770      	bx	lr
    29da:	46c0      	nop			(mov r8, r8)
    29dc:	40005c48 	.word	0x40005c48

000029e0 <SetDADDR>:
* Input          : wRegValue: new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDADDR(uint16_t wRegValue)
{
    29e0:	b480      	push	{r7}
    29e2:	b081      	sub	sp, #4
    29e4:	af00      	add	r7, sp, #0
    29e6:	4603      	mov	r3, r0
    29e8:	803b      	strh	r3, [r7, #0]
  _SetDADDR(wRegValue);
    29ea:	4a04      	ldr	r2, [pc, #16]	(29fc <SetDADDR+0x1c>)
    29ec:	883b      	ldrh	r3, [r7, #0]
    29ee:	6013      	str	r3, [r2, #0]
}
    29f0:	f107 0704 	add.w	r7, r7, #4	; 0x4
    29f4:	46bd      	mov	sp, r7
    29f6:	bc80      	pop	{r7}
    29f8:	4770      	bx	lr
    29fa:	46c0      	nop			(mov r8, r8)
    29fc:	40005c4c 	.word	0x40005c4c

00002a00 <GetDADDR>:
* Input          : None.
* Output         : None.
* Return         : DADDR register Value
*******************************************************************************/
uint16_t GetDADDR(void)
{
    2a00:	b480      	push	{r7}
    2a02:	af00      	add	r7, sp, #0
  return(_GetDADDR());
    2a04:	4b03      	ldr	r3, [pc, #12]	(2a14 <GetDADDR+0x14>)
    2a06:	681b      	ldr	r3, [r3, #0]
    2a08:	b29b      	uxth	r3, r3
}
    2a0a:	4618      	mov	r0, r3
    2a0c:	46bd      	mov	sp, r7
    2a0e:	bc80      	pop	{r7}
    2a10:	4770      	bx	lr
    2a12:	46c0      	nop			(mov r8, r8)
    2a14:	40005c4c 	.word	0x40005c4c

00002a18 <SetBTABLE>:
* Input          : wRegValue: New register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
    2a18:	b480      	push	{r7}
    2a1a:	b081      	sub	sp, #4
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	4603      	mov	r3, r0
    2a20:	803b      	strh	r3, [r7, #0]
  _SetBTABLE(wRegValue);
    2a22:	4906      	ldr	r1, [pc, #24]	(2a3c <SetBTABLE+0x24>)
    2a24:	883a      	ldrh	r2, [r7, #0]
    2a26:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    2a2a:	ea02 0303 	and.w	r3, r2, r3
    2a2e:	600b      	str	r3, [r1, #0]
}
    2a30:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2a34:	46bd      	mov	sp, r7
    2a36:	bc80      	pop	{r7}
    2a38:	4770      	bx	lr
    2a3a:	46c0      	nop			(mov r8, r8)
    2a3c:	40005c50 	.word	0x40005c50

00002a40 <GetBTABLE>:
* Input          : None. 
* Output         : None.
* Return         : BTABLE address.
*******************************************************************************/
uint16_t GetBTABLE(void)
{
    2a40:	b480      	push	{r7}
    2a42:	af00      	add	r7, sp, #0
  return(_GetBTABLE());
    2a44:	4b03      	ldr	r3, [pc, #12]	(2a54 <GetBTABLE+0x14>)
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	b29b      	uxth	r3, r3
}
    2a4a:	4618      	mov	r0, r3
    2a4c:	46bd      	mov	sp, r7
    2a4e:	bc80      	pop	{r7}
    2a50:	4770      	bx	lr
    2a52:	46c0      	nop			(mov r8, r8)
    2a54:	40005c50 	.word	0x40005c50

00002a58 <SetENDPOINT>:
*                  wRegValue.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
{
    2a58:	b480      	push	{r7}
    2a5a:	b082      	sub	sp, #8
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	4603      	mov	r3, r0
    2a60:	460a      	mov	r2, r1
    2a62:	713b      	strb	r3, [r7, #4]
    2a64:	4613      	mov	r3, r2
    2a66:	803b      	strh	r3, [r7, #0]
  _SetENDPOINT(bEpNum, wRegValue);
    2a68:	793b      	ldrb	r3, [r7, #4]
    2a6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a72:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2a76:	883a      	ldrh	r2, [r7, #0]
    2a78:	601a      	str	r2, [r3, #0]
}
    2a7a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2a7e:	46bd      	mov	sp, r7
    2a80:	bc80      	pop	{r7}
    2a82:	4770      	bx	lr

00002a84 <GetENDPOINT>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
    2a84:	b480      	push	{r7}
    2a86:	b081      	sub	sp, #4
    2a88:	af00      	add	r7, sp, #0
    2a8a:	4603      	mov	r3, r0
    2a8c:	703b      	strb	r3, [r7, #0]
  return(_GetENDPOINT(bEpNum));
    2a8e:	783b      	ldrb	r3, [r7, #0]
    2a90:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2a98:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2a9c:	681b      	ldr	r3, [r3, #0]
    2a9e:	b29b      	uxth	r3, r3
}
    2aa0:	4618      	mov	r0, r3
    2aa2:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2aa6:	46bd      	mov	sp, r7
    2aa8:	bc80      	pop	{r7}
    2aaa:	4770      	bx	lr

00002aac <SetEPType>:
*                  wType: type definition.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
    2aac:	b480      	push	{r7}
    2aae:	b083      	sub	sp, #12
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	4603      	mov	r3, r0
    2ab4:	460a      	mov	r2, r1
    2ab6:	723b      	strb	r3, [r7, #8]
    2ab8:	4613      	mov	r3, r2
    2aba:	80bb      	strh	r3, [r7, #4]
  _SetEPType(bEpNum, wType);
    2abc:	7a3b      	ldrb	r3, [r7, #8]
    2abe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac2:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    2ac6:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    2aca:	7a3b      	ldrb	r3, [r7, #8]
    2acc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2ad4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	b29b      	uxth	r3, r3
    2adc:	b29b      	uxth	r3, r3
    2ade:	603b      	str	r3, [r7, #0]
    2ae0:	f648 138f 	movw	r3, #35215	; 0x898f
    2ae4:	6838      	ldr	r0, [r7, #0]
    2ae6:	ea00 0303 	and.w	r3, r0, r3
    2aea:	603b      	str	r3, [r7, #0]
    2aec:	88bb      	ldrh	r3, [r7, #4]
    2aee:	6838      	ldr	r0, [r7, #0]
    2af0:	4602      	mov	r2, r0
    2af2:	ea42 0303 	orr.w	r3, r2, r3
    2af6:	b29b      	uxth	r3, r3
    2af8:	b29b      	uxth	r3, r3
    2afa:	600b      	str	r3, [r1, #0]
}
    2afc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2b00:	46bd      	mov	sp, r7
    2b02:	bc80      	pop	{r7}
    2b04:	4770      	bx	lr
    2b06:	46c0      	nop			(mov r8, r8)

00002b08 <GetEPType>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint Type
*******************************************************************************/
uint16_t GetEPType(uint8_t bEpNum)
{
    2b08:	b480      	push	{r7}
    2b0a:	b081      	sub	sp, #4
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	4603      	mov	r3, r0
    2b10:	703b      	strb	r3, [r7, #0]
  return(_GetEPType(bEpNum));
    2b12:	783b      	ldrb	r3, [r7, #0]
    2b14:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2b1c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2b20:	681b      	ldr	r3, [r3, #0]
    2b22:	b29b      	uxth	r3, r3
    2b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
    2b28:	4618      	mov	r0, r3
    2b2a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2b2e:	46bd      	mov	sp, r7
    2b30:	bc80      	pop	{r7}
    2b32:	4770      	bx	lr

00002b34 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
    2b34:	b480      	push	{r7}
    2b36:	b083      	sub	sp, #12
    2b38:	af00      	add	r7, sp, #0
    2b3a:	4603      	mov	r3, r0
    2b3c:	460a      	mov	r2, r1
    2b3e:	723b      	strb	r3, [r7, #8]
    2b40:	4613      	mov	r3, r2
    2b42:	80bb      	strh	r3, [r7, #4]
  _SetEPTxStatus(bEpNum, wState);
    2b44:	7a3b      	ldrb	r3, [r7, #8]
    2b46:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2b4e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2b52:	681b      	ldr	r3, [r3, #0]
    2b54:	b29b      	uxth	r3, r3
    2b56:	603b      	str	r3, [r7, #0]
    2b58:	f648 73bf 	movw	r3, #36799	; 0x8fbf
    2b5c:	6839      	ldr	r1, [r7, #0]
    2b5e:	ea01 0303 	and.w	r3, r1, r3
    2b62:	603b      	str	r3, [r7, #0]
    2b64:	88bb      	ldrh	r3, [r7, #4]
    2b66:	f003 0310 	and.w	r3, r3, #16	; 0x10
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d004      	beq.n	2b78 <SetEPTxStatus+0x44>
    2b6e:	683a      	ldr	r2, [r7, #0]
    2b70:	f082 0310 	eor.w	r3, r2, #16	; 0x10
    2b74:	b29b      	uxth	r3, r3
    2b76:	603b      	str	r3, [r7, #0]
    2b78:	88bb      	ldrh	r3, [r7, #4]
    2b7a:	f003 0320 	and.w	r3, r3, #32	; 0x20
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d004      	beq.n	2b8c <SetEPTxStatus+0x58>
    2b82:	6839      	ldr	r1, [r7, #0]
    2b84:	f081 0320 	eor.w	r3, r1, #32	; 0x20
    2b88:	b29b      	uxth	r3, r3
    2b8a:	603b      	str	r3, [r7, #0]
    2b8c:	7a3b      	ldrb	r3, [r7, #8]
    2b8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b92:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2b96:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2b9a:	4b05      	ldr	r3, [pc, #20]	(2bb0 <SetEPTxStatus+0x7c>)
    2b9c:	6839      	ldr	r1, [r7, #0]
    2b9e:	ea41 0303 	orr.w	r3, r1, r3
    2ba2:	b29b      	uxth	r3, r3
    2ba4:	6013      	str	r3, [r2, #0]
}
    2ba6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2baa:	46bd      	mov	sp, r7
    2bac:	bc80      	pop	{r7}
    2bae:	4770      	bx	lr
    2bb0:	ffff8080 	.word	0xffff8080

00002bb4 <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
    2bb4:	b480      	push	{r7}
    2bb6:	b083      	sub	sp, #12
    2bb8:	af00      	add	r7, sp, #0
    2bba:	4603      	mov	r3, r0
    2bbc:	460a      	mov	r2, r1
    2bbe:	723b      	strb	r3, [r7, #8]
    2bc0:	4613      	mov	r3, r2
    2bc2:	80bb      	strh	r3, [r7, #4]
  _SetEPRxStatus(bEpNum, wState);
    2bc4:	7a3b      	ldrb	r3, [r7, #8]
    2bc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2bce:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	b29b      	uxth	r3, r3
    2bd6:	603b      	str	r3, [r7, #0]
    2bd8:	f64b 738f 	movw	r3, #49039	; 0xbf8f
    2bdc:	6839      	ldr	r1, [r7, #0]
    2bde:	ea01 0303 	and.w	r3, r1, r3
    2be2:	603b      	str	r3, [r7, #0]
    2be4:	88bb      	ldrh	r3, [r7, #4]
    2be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    2bea:	2b00      	cmp	r3, #0
    2bec:	d004      	beq.n	2bf8 <SetEPRxStatus+0x44>
    2bee:	683a      	ldr	r2, [r7, #0]
    2bf0:	f482 5380 	eor.w	r3, r2, #4096	; 0x1000
    2bf4:	b29b      	uxth	r3, r3
    2bf6:	603b      	str	r3, [r7, #0]
    2bf8:	88bb      	ldrh	r3, [r7, #4]
    2bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d004      	beq.n	2c0c <SetEPRxStatus+0x58>
    2c02:	6839      	ldr	r1, [r7, #0]
    2c04:	f481 5300 	eor.w	r3, r1, #8192	; 0x2000
    2c08:	b29b      	uxth	r3, r3
    2c0a:	603b      	str	r3, [r7, #0]
    2c0c:	7a3b      	ldrb	r3, [r7, #8]
    2c0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c12:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2c16:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2c1a:	4b05      	ldr	r3, [pc, #20]	(2c30 <SetEPRxStatus+0x7c>)
    2c1c:	6839      	ldr	r1, [r7, #0]
    2c1e:	ea41 0303 	orr.w	r3, r1, r3
    2c22:	b29b      	uxth	r3, r3
    2c24:	6013      	str	r3, [r2, #0]
}
    2c26:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2c2a:	46bd      	mov	sp, r7
    2c2c:	bc80      	pop	{r7}
    2c2e:	4770      	bx	lr
    2c30:	ffff8080 	.word	0xffff8080

00002c34 <SetDouBleBuffEPStall>:
*                  bDir: Endpoint direction.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
{
    2c34:	b580      	push	{r7, lr}
    2c36:	b083      	sub	sp, #12
    2c38:	af00      	add	r7, sp, #0
    2c3a:	4603      	mov	r3, r0
    2c3c:	460a      	mov	r2, r1
    2c3e:	713b      	strb	r3, [r7, #4]
    2c40:	4613      	mov	r3, r2
    2c42:	703b      	strb	r3, [r7, #0]
  uint16_t Endpoint_DTOG_Status;
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
    2c44:	793b      	ldrb	r3, [r7, #4]
    2c46:	4618      	mov	r0, r3
    2c48:	f7ff ff1c 	bl	2a84 <GetENDPOINT>
    2c4c:	4603      	mov	r3, r0
    2c4e:	817b      	strh	r3, [r7, #10]
  if (bDir == EP_DBUF_OUT)
    2c50:	783b      	ldrb	r3, [r7, #0]
    2c52:	2b01      	cmp	r3, #1
    2c54:	d10b      	bne.n	2c6e <SetDouBleBuffEPStall+0x3a>
  { /* OUT double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
    2c56:	793b      	ldrb	r3, [r7, #4]
    2c58:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2c60:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2c64:	897a      	ldrh	r2, [r7, #10]
    2c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    2c6a:	601a      	str	r2, [r3, #0]
    2c6c:	e00d      	b.n	2c8a <SetDouBleBuffEPStall+0x56>
  }
  else if (bDir == EP_DBUF_IN)
    2c6e:	783b      	ldrb	r3, [r7, #0]
    2c70:	2b02      	cmp	r3, #2
    2c72:	d10a      	bne.n	2c8a <SetDouBleBuffEPStall+0x56>
  { /* IN double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
    2c74:	793b      	ldrb	r3, [r7, #4]
    2c76:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2c7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2c7e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2c82:	897a      	ldrh	r2, [r7, #10]
    2c84:	f022 0210 	bic.w	r2, r2, #16	; 0x10
    2c88:	601a      	str	r2, [r3, #0]
  }
}
    2c8a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2c8e:	46bd      	mov	sp, r7
    2c90:	bd80      	pop	{r7, pc}
    2c92:	46c0      	nop			(mov r8, r8)

00002c94 <GetEPTxStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint TX Status
*******************************************************************************/
uint16_t GetEPTxStatus(uint8_t bEpNum)
{
    2c94:	b480      	push	{r7}
    2c96:	b081      	sub	sp, #4
    2c98:	af00      	add	r7, sp, #0
    2c9a:	4603      	mov	r3, r0
    2c9c:	703b      	strb	r3, [r7, #0]
  return(_GetEPTxStatus(bEpNum));
    2c9e:	783b      	ldrb	r3, [r7, #0]
    2ca0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2ca8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	b29b      	uxth	r3, r3
    2cb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
    2cb4:	4618      	mov	r0, r3
    2cb6:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2cba:	46bd      	mov	sp, r7
    2cbc:	bc80      	pop	{r7}
    2cbe:	4770      	bx	lr

00002cc0 <GetEPRxStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint RX Status
*******************************************************************************/
uint16_t GetEPRxStatus(uint8_t bEpNum)
{
    2cc0:	b480      	push	{r7}
    2cc2:	b081      	sub	sp, #4
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	4603      	mov	r3, r0
    2cc8:	703b      	strb	r3, [r7, #0]
  return(_GetEPRxStatus(bEpNum));
    2cca:	783b      	ldrb	r3, [r7, #0]
    2ccc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2cd4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	b29b      	uxth	r3, r3
    2cdc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
}
    2ce0:	4618      	mov	r0, r3
    2ce2:	f107 0704 	add.w	r7, r7, #4	; 0x4
    2ce6:	46bd      	mov	sp, r7
    2ce8:	bc80      	pop	{r7}
    2cea:	4770      	bx	lr

00002cec <SetEPTxValid>:
* Input          : bEpNum: Endpoint Number.  
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
    2cec:	b480      	push	{r7}
    2cee:	b082      	sub	sp, #8
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	4603      	mov	r3, r0
    2cf4:	713b      	strb	r3, [r7, #4]
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
    2cf6:	793b      	ldrb	r3, [r7, #4]
    2cf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2d00:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2d04:	681b      	ldr	r3, [r3, #0]
    2d06:	b29b      	uxth	r3, r3
    2d08:	603b      	str	r3, [r7, #0]
    2d0a:	f648 73bf 	movw	r3, #36799	; 0x8fbf
    2d0e:	6839      	ldr	r1, [r7, #0]
    2d10:	ea01 0303 	and.w	r3, r1, r3
    2d14:	603b      	str	r3, [r7, #0]
    2d16:	683a      	ldr	r2, [r7, #0]
    2d18:	f082 0310 	eor.w	r3, r2, #16	; 0x10
    2d1c:	b29b      	uxth	r3, r3
    2d1e:	603b      	str	r3, [r7, #0]
    2d20:	6839      	ldr	r1, [r7, #0]
    2d22:	f081 0320 	eor.w	r3, r1, #32	; 0x20
    2d26:	b29b      	uxth	r3, r3
    2d28:	603b      	str	r3, [r7, #0]
    2d2a:	793b      	ldrb	r3, [r7, #4]
    2d2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d30:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2d34:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2d38:	4b05      	ldr	r3, [pc, #20]	(2d50 <SetEPTxValid+0x64>)
    2d3a:	6839      	ldr	r1, [r7, #0]
    2d3c:	ea41 0303 	orr.w	r3, r1, r3
    2d40:	b29b      	uxth	r3, r3
    2d42:	6013      	str	r3, [r2, #0]
}
    2d44:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2d48:	46bd      	mov	sp, r7
    2d4a:	bc80      	pop	{r7}
    2d4c:	4770      	bx	lr
    2d4e:	46c0      	nop			(mov r8, r8)
    2d50:	ffff8080 	.word	0xffff8080

00002d54 <SetEPRxValid>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
    2d54:	b480      	push	{r7}
    2d56:	b082      	sub	sp, #8
    2d58:	af00      	add	r7, sp, #0
    2d5a:	4603      	mov	r3, r0
    2d5c:	713b      	strb	r3, [r7, #4]
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
    2d5e:	793b      	ldrb	r3, [r7, #4]
    2d60:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2d68:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2d6c:	681b      	ldr	r3, [r3, #0]
    2d6e:	b29b      	uxth	r3, r3
    2d70:	603b      	str	r3, [r7, #0]
    2d72:	f64b 738f 	movw	r3, #49039	; 0xbf8f
    2d76:	6839      	ldr	r1, [r7, #0]
    2d78:	ea01 0303 	and.w	r3, r1, r3
    2d7c:	603b      	str	r3, [r7, #0]
    2d7e:	683a      	ldr	r2, [r7, #0]
    2d80:	f482 5380 	eor.w	r3, r2, #4096	; 0x1000
    2d84:	b29b      	uxth	r3, r3
    2d86:	603b      	str	r3, [r7, #0]
    2d88:	6839      	ldr	r1, [r7, #0]
    2d8a:	f481 5300 	eor.w	r3, r1, #8192	; 0x2000
    2d8e:	b29b      	uxth	r3, r3
    2d90:	603b      	str	r3, [r7, #0]
    2d92:	793b      	ldrb	r3, [r7, #4]
    2d94:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d98:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2d9c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2da0:	4b05      	ldr	r3, [pc, #20]	(2db8 <SetEPRxValid+0x64>)
    2da2:	6839      	ldr	r1, [r7, #0]
    2da4:	ea41 0303 	orr.w	r3, r1, r3
    2da8:	b29b      	uxth	r3, r3
    2daa:	6013      	str	r3, [r2, #0]
}
    2dac:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2db0:	46bd      	mov	sp, r7
    2db2:	bc80      	pop	{r7}
    2db4:	4770      	bx	lr
    2db6:	46c0      	nop			(mov r8, r8)
    2db8:	ffff8080 	.word	0xffff8080

00002dbc <SetEP_KIND>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEP_KIND(uint8_t bEpNum)
{
    2dbc:	b480      	push	{r7}
    2dbe:	b082      	sub	sp, #8
    2dc0:	af00      	add	r7, sp, #0
    2dc2:	4603      	mov	r3, r0
    2dc4:	713b      	strb	r3, [r7, #4]
  _SetEP_KIND(bEpNum);
    2dc6:	793b      	ldrb	r3, [r7, #4]
    2dc8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2dcc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2dd0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2dd4:	793b      	ldrb	r3, [r7, #4]
    2dd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2dde:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2de2:	681b      	ldr	r3, [r3, #0]
    2de4:	b29b      	uxth	r3, r3
    2de6:	603b      	str	r3, [r7, #0]
    2de8:	f640 630f 	movw	r3, #3599	; 0xe0f
    2dec:	6839      	ldr	r1, [r7, #0]
    2dee:	ea01 0303 	and.w	r3, r1, r3
    2df2:	603b      	str	r3, [r7, #0]
    2df4:	4b05      	ldr	r3, [pc, #20]	(2e0c <SetEP_KIND+0x50>)
    2df6:	6839      	ldr	r1, [r7, #0]
    2df8:	ea41 0303 	orr.w	r3, r1, r3
    2dfc:	b29b      	uxth	r3, r3
    2dfe:	6013      	str	r3, [r2, #0]
}
    2e00:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2e04:	46bd      	mov	sp, r7
    2e06:	bc80      	pop	{r7}
    2e08:	4770      	bx	lr
    2e0a:	46c0      	nop			(mov r8, r8)
    2e0c:	ffff8180 	.word	0xffff8180

00002e10 <ClearEP_KIND>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_KIND(uint8_t bEpNum)
{
    2e10:	b480      	push	{r7}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
    2e16:	4603      	mov	r3, r0
    2e18:	713b      	strb	r3, [r7, #4]
  _ClearEP_KIND(bEpNum);
    2e1a:	793b      	ldrb	r3, [r7, #4]
    2e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2e20:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2e24:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2e28:	793b      	ldrb	r3, [r7, #4]
    2e2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e32:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	b29b      	uxth	r3, r3
    2e3a:	b29b      	uxth	r3, r3
    2e3c:	603b      	str	r3, [r7, #0]
    2e3e:	f640 630f 	movw	r3, #3599	; 0xe0f
    2e42:	6839      	ldr	r1, [r7, #0]
    2e44:	ea01 0303 	and.w	r3, r1, r3
    2e48:	603b      	str	r3, [r7, #0]
    2e4a:	6839      	ldr	r1, [r7, #0]
    2e4c:	460b      	mov	r3, r1
    2e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    2e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    2e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2e5e:	b29b      	uxth	r3, r3
    2e60:	b29b      	uxth	r3, r3
    2e62:	6013      	str	r3, [r2, #0]
}
    2e64:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2e68:	46bd      	mov	sp, r7
    2e6a:	bc80      	pop	{r7}
    2e6c:	4770      	bx	lr
    2e6e:	46c0      	nop			(mov r8, r8)

00002e70 <Clear_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
    2e70:	b480      	push	{r7}
    2e72:	b082      	sub	sp, #8
    2e74:	af00      	add	r7, sp, #0
    2e76:	4603      	mov	r3, r0
    2e78:	713b      	strb	r3, [r7, #4]
  _ClearEP_KIND(bEpNum);
    2e7a:	793b      	ldrb	r3, [r7, #4]
    2e7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2e80:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2e84:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2e88:	793b      	ldrb	r3, [r7, #4]
    2e8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2e8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e92:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2e96:	681b      	ldr	r3, [r3, #0]
    2e98:	b29b      	uxth	r3, r3
    2e9a:	b29b      	uxth	r3, r3
    2e9c:	603b      	str	r3, [r7, #0]
    2e9e:	f640 630f 	movw	r3, #3599	; 0xe0f
    2ea2:	6839      	ldr	r1, [r7, #0]
    2ea4:	ea01 0303 	and.w	r3, r1, r3
    2ea8:	603b      	str	r3, [r7, #0]
    2eaa:	6839      	ldr	r1, [r7, #0]
    2eac:	460b      	mov	r3, r1
    2eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    2eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    2eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2ebe:	b29b      	uxth	r3, r3
    2ec0:	b29b      	uxth	r3, r3
    2ec2:	6013      	str	r3, [r2, #0]
}
    2ec4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2ec8:	46bd      	mov	sp, r7
    2eca:	bc80      	pop	{r7}
    2ecc:	4770      	bx	lr
    2ece:	46c0      	nop			(mov r8, r8)

00002ed0 <Set_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Status_Out(uint8_t bEpNum)
{
    2ed0:	b480      	push	{r7}
    2ed2:	b082      	sub	sp, #8
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	4603      	mov	r3, r0
    2ed8:	713b      	strb	r3, [r7, #4]
  _SetEP_KIND(bEpNum);
    2eda:	793b      	ldrb	r3, [r7, #4]
    2edc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ee0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2ee4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2ee8:	793b      	ldrb	r3, [r7, #4]
    2eea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2eee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2ef2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	b29b      	uxth	r3, r3
    2efa:	603b      	str	r3, [r7, #0]
    2efc:	f640 630f 	movw	r3, #3599	; 0xe0f
    2f00:	6839      	ldr	r1, [r7, #0]
    2f02:	ea01 0303 	and.w	r3, r1, r3
    2f06:	603b      	str	r3, [r7, #0]
    2f08:	4b05      	ldr	r3, [pc, #20]	(2f20 <Set_Status_Out+0x50>)
    2f0a:	6839      	ldr	r1, [r7, #0]
    2f0c:	ea41 0303 	orr.w	r3, r1, r3
    2f10:	b29b      	uxth	r3, r3
    2f12:	6013      	str	r3, [r2, #0]
}
    2f14:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2f18:	46bd      	mov	sp, r7
    2f1a:	bc80      	pop	{r7}
    2f1c:	4770      	bx	lr
    2f1e:	46c0      	nop			(mov r8, r8)
    2f20:	ffff8180 	.word	0xffff8180

00002f24 <SetEPDoubleBuff>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDoubleBuff(uint8_t bEpNum)
{
    2f24:	b480      	push	{r7}
    2f26:	b082      	sub	sp, #8
    2f28:	af00      	add	r7, sp, #0
    2f2a:	4603      	mov	r3, r0
    2f2c:	713b      	strb	r3, [r7, #4]
  _SetEP_KIND(bEpNum);
    2f2e:	793b      	ldrb	r3, [r7, #4]
    2f30:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2f34:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2f38:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2f3c:	793b      	ldrb	r3, [r7, #4]
    2f3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f46:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2f4a:	681b      	ldr	r3, [r3, #0]
    2f4c:	b29b      	uxth	r3, r3
    2f4e:	603b      	str	r3, [r7, #0]
    2f50:	f640 630f 	movw	r3, #3599	; 0xe0f
    2f54:	6839      	ldr	r1, [r7, #0]
    2f56:	ea01 0303 	and.w	r3, r1, r3
    2f5a:	603b      	str	r3, [r7, #0]
    2f5c:	4b05      	ldr	r3, [pc, #20]	(2f74 <SetEPDoubleBuff+0x50>)
    2f5e:	6839      	ldr	r1, [r7, #0]
    2f60:	ea41 0303 	orr.w	r3, r1, r3
    2f64:	b29b      	uxth	r3, r3
    2f66:	6013      	str	r3, [r2, #0]
}
    2f68:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bc80      	pop	{r7}
    2f70:	4770      	bx	lr
    2f72:	46c0      	nop			(mov r8, r8)
    2f74:	ffff8180 	.word	0xffff8180

00002f78 <ClearEPDoubleBuff>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEPDoubleBuff(uint8_t bEpNum)
{
    2f78:	b480      	push	{r7}
    2f7a:	b082      	sub	sp, #8
    2f7c:	af00      	add	r7, sp, #0
    2f7e:	4603      	mov	r3, r0
    2f80:	713b      	strb	r3, [r7, #4]
  _ClearEP_KIND(bEpNum);
    2f82:	793b      	ldrb	r3, [r7, #4]
    2f84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2f88:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    2f8c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    2f90:	793b      	ldrb	r3, [r7, #4]
    2f92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2f96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f9a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2f9e:	681b      	ldr	r3, [r3, #0]
    2fa0:	b29b      	uxth	r3, r3
    2fa2:	b29b      	uxth	r3, r3
    2fa4:	603b      	str	r3, [r7, #0]
    2fa6:	f640 630f 	movw	r3, #3599	; 0xe0f
    2faa:	6839      	ldr	r1, [r7, #0]
    2fac:	ea01 0303 	and.w	r3, r1, r3
    2fb0:	603b      	str	r3, [r7, #0]
    2fb2:	6839      	ldr	r1, [r7, #0]
    2fb4:	460b      	mov	r3, r1
    2fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    2fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    2fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2fc6:	b29b      	uxth	r3, r3
    2fc8:	b29b      	uxth	r3, r3
    2fca:	6013      	str	r3, [r2, #0]
}
    2fcc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2fd0:	46bd      	mov	sp, r7
    2fd2:	bc80      	pop	{r7}
    2fd4:	4770      	bx	lr
    2fd6:	46c0      	nop			(mov r8, r8)

00002fd8 <GetTxStallStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Tx Stall status.
*******************************************************************************/
uint16_t GetTxStallStatus(uint8_t bEpNum)
{
    2fd8:	b480      	push	{r7}
    2fda:	b081      	sub	sp, #4
    2fdc:	af00      	add	r7, sp, #0
    2fde:	4603      	mov	r3, r0
    2fe0:	703b      	strb	r3, [r7, #0]
  return(_GetTxStallStatus(bEpNum));
    2fe2:	783b      	ldrb	r3, [r7, #0]
    2fe4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2fec:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	b29b      	uxth	r3, r3
    2ff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2ff8:	2b10      	cmp	r3, #16
    2ffa:	bf14      	ite	ne
    2ffc:	2300      	movne	r3, #0
    2ffe:	2301      	moveq	r3, #1
}
    3000:	4618      	mov	r0, r3
    3002:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3006:	46bd      	mov	sp, r7
    3008:	bc80      	pop	{r7}
    300a:	4770      	bx	lr

0000300c <GetRxStallStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx Stall status.
*******************************************************************************/
uint16_t GetRxStallStatus(uint8_t bEpNum)
{
    300c:	b480      	push	{r7}
    300e:	b081      	sub	sp, #4
    3010:	af00      	add	r7, sp, #0
    3012:	4603      	mov	r3, r0
    3014:	703b      	strb	r3, [r7, #0]
  return(_GetRxStallStatus(bEpNum));
    3016:	783b      	ldrb	r3, [r7, #0]
    3018:	ea4f 0383 	mov.w	r3, r3, lsl #2
    301c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3020:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    3024:	681b      	ldr	r3, [r3, #0]
    3026:	b29b      	uxth	r3, r3
    3028:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    302c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    3030:	bf14      	ite	ne
    3032:	2300      	movne	r3, #0
    3034:	2301      	moveq	r3, #1
}
    3036:	4618      	mov	r0, r3
    3038:	f107 0704 	add.w	r7, r7, #4	; 0x4
    303c:	46bd      	mov	sp, r7
    303e:	bc80      	pop	{r7}
    3040:	4770      	bx	lr
    3042:	46c0      	nop			(mov r8, r8)

00003044 <ClearEP_CTR_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_RX(uint8_t bEpNum)
{
    3044:	b480      	push	{r7}
    3046:	b081      	sub	sp, #4
    3048:	af00      	add	r7, sp, #0
    304a:	4603      	mov	r3, r0
    304c:	703b      	strb	r3, [r7, #0]
  _ClearEP_CTR_RX(bEpNum);
    304e:	783b      	ldrb	r3, [r7, #0]
    3050:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3054:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3058:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    305c:	783b      	ldrb	r3, [r7, #0]
    305e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3062:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3066:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	b29b      	uxth	r3, r3
    306e:	461a      	mov	r2, r3
    3070:	f640 738f 	movw	r3, #3983	; 0xf8f
    3074:	ea02 0303 	and.w	r3, r2, r3
    3078:	600b      	str	r3, [r1, #0]
}
    307a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    307e:	46bd      	mov	sp, r7
    3080:	bc80      	pop	{r7}
    3082:	4770      	bx	lr

00003084 <ClearEP_CTR_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_TX(uint8_t bEpNum)
{
    3084:	b480      	push	{r7}
    3086:	b081      	sub	sp, #4
    3088:	af00      	add	r7, sp, #0
    308a:	4603      	mov	r3, r0
    308c:	703b      	strb	r3, [r7, #0]
  _ClearEP_CTR_TX(bEpNum);
    308e:	783b      	ldrb	r3, [r7, #0]
    3090:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3094:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3098:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    309c:	783b      	ldrb	r3, [r7, #0]
    309e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    30a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    30a6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    30aa:	681b      	ldr	r3, [r3, #0]
    30ac:	b29b      	uxth	r3, r3
    30ae:	461a      	mov	r2, r3
    30b0:	f648 730f 	movw	r3, #36623	; 0x8f0f
    30b4:	ea02 0303 	and.w	r3, r2, r3
    30b8:	600b      	str	r3, [r1, #0]
}
    30ba:	f107 0704 	add.w	r7, r7, #4	; 0x4
    30be:	46bd      	mov	sp, r7
    30c0:	bc80      	pop	{r7}
    30c2:	4770      	bx	lr

000030c4 <ToggleDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_RX(uint8_t bEpNum)
{
    30c4:	b480      	push	{r7}
    30c6:	b081      	sub	sp, #4
    30c8:	af00      	add	r7, sp, #0
    30ca:	4603      	mov	r3, r0
    30cc:	703b      	strb	r3, [r7, #0]
  _ToggleDTOG_RX(bEpNum);
    30ce:	783b      	ldrb	r3, [r7, #0]
    30d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    30d4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    30d8:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    30dc:	783b      	ldrb	r3, [r7, #0]
    30de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    30e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    30e6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	b29b      	uxth	r3, r3
    30ee:	461a      	mov	r2, r3
    30f0:	f640 730f 	movw	r3, #3855	; 0xf0f
    30f4:	ea02 0303 	and.w	r3, r2, r3
    30f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    30fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3100:	600b      	str	r3, [r1, #0]
}
    3102:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3106:	46bd      	mov	sp, r7
    3108:	bc80      	pop	{r7}
    310a:	4770      	bx	lr

0000310c <ToggleDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_TX(uint8_t bEpNum)
{
    310c:	b480      	push	{r7}
    310e:	b081      	sub	sp, #4
    3110:	af00      	add	r7, sp, #0
    3112:	4603      	mov	r3, r0
    3114:	703b      	strb	r3, [r7, #0]
  _ToggleDTOG_TX(bEpNum);
    3116:	783b      	ldrb	r3, [r7, #0]
    3118:	ea4f 0383 	mov.w	r3, r3, lsl #2
    311c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3120:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    3124:	783b      	ldrb	r3, [r7, #0]
    3126:	ea4f 0383 	mov.w	r3, r3, lsl #2
    312a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    312e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    3132:	681b      	ldr	r3, [r3, #0]
    3134:	b29b      	uxth	r3, r3
    3136:	461a      	mov	r2, r3
    3138:	f640 730f 	movw	r3, #3855	; 0xf0f
    313c:	ea02 0303 	and.w	r3, r2, r3
    3140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3148:	600b      	str	r3, [r1, #0]
}
    314a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    314e:	46bd      	mov	sp, r7
    3150:	bc80      	pop	{r7}
    3152:	4770      	bx	lr

00003154 <ClearDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
    3154:	b480      	push	{r7}
    3156:	b081      	sub	sp, #4
    3158:	af00      	add	r7, sp, #0
    315a:	4603      	mov	r3, r0
    315c:	703b      	strb	r3, [r7, #0]
  _ClearDTOG_RX(bEpNum);
    315e:	783b      	ldrb	r3, [r7, #0]
    3160:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3168:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	b29b      	uxth	r3, r3
    3170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    3174:	2b00      	cmp	r3, #0
    3176:	d019      	beq.n	31ac <ClearDTOG_RX+0x58>
    3178:	783b      	ldrb	r3, [r7, #0]
    317a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    317e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3182:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    3186:	783b      	ldrb	r3, [r7, #0]
    3188:	ea4f 0383 	mov.w	r3, r3, lsl #2
    318c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3190:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    3194:	681b      	ldr	r3, [r3, #0]
    3196:	b29b      	uxth	r3, r3
    3198:	461a      	mov	r2, r3
    319a:	f640 730f 	movw	r3, #3855	; 0xf0f
    319e:	ea02 0303 	and.w	r3, r2, r3
    31a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    31a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    31aa:	600b      	str	r3, [r1, #0]
}
    31ac:	f107 0704 	add.w	r7, r7, #4	; 0x4
    31b0:	46bd      	mov	sp, r7
    31b2:	bc80      	pop	{r7}
    31b4:	4770      	bx	lr
    31b6:	46c0      	nop			(mov r8, r8)

000031b8 <ClearDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
    31b8:	b480      	push	{r7}
    31ba:	b081      	sub	sp, #4
    31bc:	af00      	add	r7, sp, #0
    31be:	4603      	mov	r3, r0
    31c0:	703b      	strb	r3, [r7, #0]
  _ClearDTOG_TX(bEpNum);
    31c2:	783b      	ldrb	r3, [r7, #0]
    31c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    31c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31cc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    31d0:	681b      	ldr	r3, [r3, #0]
    31d2:	b29b      	uxth	r3, r3
    31d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    31d8:	2b00      	cmp	r3, #0
    31da:	d019      	beq.n	3210 <ClearDTOG_TX+0x58>
    31dc:	783b      	ldrb	r3, [r7, #0]
    31de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    31e2:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    31e6:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    31ea:	783b      	ldrb	r3, [r7, #0]
    31ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    31f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31f4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    31f8:	681b      	ldr	r3, [r3, #0]
    31fa:	b29b      	uxth	r3, r3
    31fc:	461a      	mov	r2, r3
    31fe:	f640 730f 	movw	r3, #3855	; 0xf0f
    3202:	ea02 0303 	and.w	r3, r2, r3
    3206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    320a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    320e:	600b      	str	r3, [r1, #0]
}
    3210:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3214:	46bd      	mov	sp, r7
    3216:	bc80      	pop	{r7}
    3218:	4770      	bx	lr
    321a:	46c0      	nop			(mov r8, r8)

0000321c <SetEPAddress>:
*                  bAddr: New endpoint address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
{
    321c:	b480      	push	{r7}
    321e:	b082      	sub	sp, #8
    3220:	af00      	add	r7, sp, #0
    3222:	4603      	mov	r3, r0
    3224:	460a      	mov	r2, r1
    3226:	713b      	strb	r3, [r7, #4]
    3228:	4613      	mov	r3, r2
    322a:	703b      	strb	r3, [r7, #0]
  _SetEPAddress(bEpNum, bAddr);
    322c:	793b      	ldrb	r3, [r7, #4]
    322e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3232:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3236:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    323a:	793b      	ldrb	r3, [r7, #4]
    323c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3240:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3244:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    3248:	681b      	ldr	r3, [r3, #0]
    324a:	b29b      	uxth	r3, r3
    324c:	461a      	mov	r2, r3
    324e:	f640 730f 	movw	r3, #3855	; 0xf0f
    3252:	ea02 0303 	and.w	r3, r2, r3
    3256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    325a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    325e:	783a      	ldrb	r2, [r7, #0]
    3260:	ea43 0302 	orr.w	r3, r3, r2
    3264:	600b      	str	r3, [r1, #0]
}
    3266:	f107 0708 	add.w	r7, r7, #8	; 0x8
    326a:	46bd      	mov	sp, r7
    326c:	bc80      	pop	{r7}
    326e:	4770      	bx	lr

00003270 <GetEPAddress>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint address.
*******************************************************************************/
uint8_t GetEPAddress(uint8_t bEpNum)
{
    3270:	b480      	push	{r7}
    3272:	b081      	sub	sp, #4
    3274:	af00      	add	r7, sp, #0
    3276:	4603      	mov	r3, r0
    3278:	703b      	strb	r3, [r7, #0]
  return(_GetEPAddress(bEpNum));
    327a:	783b      	ldrb	r3, [r7, #0]
    327c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3284:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    3288:	681b      	ldr	r3, [r3, #0]
    328a:	b2db      	uxtb	r3, r3
    328c:	f003 030f 	and.w	r3, r3, #15	; 0xf
}
    3290:	4618      	mov	r0, r3
    3292:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3296:	46bd      	mov	sp, r7
    3298:	bc80      	pop	{r7}
    329a:	4770      	bx	lr

0000329c <SetEPTxAddr>:
*                  wAddr: new address. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
    329c:	b480      	push	{r7}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
    32a2:	4603      	mov	r3, r0
    32a4:	460a      	mov	r2, r1
    32a6:	713b      	strb	r3, [r7, #4]
    32a8:	4613      	mov	r3, r2
    32aa:	803b      	strh	r3, [r7, #0]
  _SetEPTxAddr(bEpNum, wAddr);
    32ac:	4b0d      	ldr	r3, [pc, #52]	(32e4 <SetEPTxAddr+0x48>)
    32ae:	681b      	ldr	r3, [r3, #0]
    32b0:	b29b      	uxth	r3, r3
    32b2:	461a      	mov	r2, r3
    32b4:	793b      	ldrb	r3, [r7, #4]
    32b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    32ba:	4413      	add	r3, r2
    32bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    32c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    32c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    32c8:	461a      	mov	r2, r3
    32ca:	883b      	ldrh	r3, [r7, #0]
    32cc:	ea4f 0353 	mov.w	r3, r3, lsr #1
    32d0:	b29b      	uxth	r3, r3
    32d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    32d6:	6013      	str	r3, [r2, #0]
}
    32d8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    32dc:	46bd      	mov	sp, r7
    32de:	bc80      	pop	{r7}
    32e0:	4770      	bx	lr
    32e2:	46c0      	nop			(mov r8, r8)
    32e4:	40005c50 	.word	0x40005c50

000032e8 <SetEPRxAddr>:
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
    32e8:	b480      	push	{r7}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
    32ee:	4603      	mov	r3, r0
    32f0:	460a      	mov	r2, r1
    32f2:	713b      	strb	r3, [r7, #4]
    32f4:	4613      	mov	r3, r2
    32f6:	803b      	strh	r3, [r7, #0]
  _SetEPRxAddr(bEpNum, wAddr);
    32f8:	4b0c      	ldr	r3, [pc, #48]	(332c <SetEPRxAddr+0x44>)
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	b29b      	uxth	r3, r3
    32fe:	461a      	mov	r2, r3
    3300:	793b      	ldrb	r3, [r7, #4]
    3302:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3306:	441a      	add	r2, r3
    3308:	4b09      	ldr	r3, [pc, #36]	(3330 <SetEPRxAddr+0x48>)
    330a:	4413      	add	r3, r2
    330c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3310:	461a      	mov	r2, r3
    3312:	883b      	ldrh	r3, [r7, #0]
    3314:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3318:	b29b      	uxth	r3, r3
    331a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    331e:	6013      	str	r3, [r2, #0]
}
    3320:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3324:	46bd      	mov	sp, r7
    3326:	bc80      	pop	{r7}
    3328:	4770      	bx	lr
    332a:	46c0      	nop			(mov r8, r8)
    332c:	40005c50 	.word	0x40005c50
    3330:	20003004 	.word	0x20003004

00003334 <GetEPTxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
    3334:	b480      	push	{r7}
    3336:	b081      	sub	sp, #4
    3338:	af00      	add	r7, sp, #0
    333a:	4603      	mov	r3, r0
    333c:	703b      	strb	r3, [r7, #0]
  return(_GetEPTxAddr(bEpNum));
    333e:	4b0b      	ldr	r3, [pc, #44]	(336c <GetEPTxAddr+0x38>)
    3340:	681b      	ldr	r3, [r3, #0]
    3342:	b29b      	uxth	r3, r3
    3344:	461a      	mov	r2, r3
    3346:	783b      	ldrb	r3, [r7, #0]
    3348:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    334c:	4413      	add	r3, r2
    334e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    3352:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    3356:	ea4f 0343 	mov.w	r3, r3, lsl #1
    335a:	681b      	ldr	r3, [r3, #0]
    335c:	b29b      	uxth	r3, r3
}
    335e:	4618      	mov	r0, r3
    3360:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3364:	46bd      	mov	sp, r7
    3366:	bc80      	pop	{r7}
    3368:	4770      	bx	lr
    336a:	46c0      	nop			(mov r8, r8)
    336c:	40005c50 	.word	0x40005c50

00003370 <GetEPRxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
    3370:	b480      	push	{r7}
    3372:	b081      	sub	sp, #4
    3374:	af00      	add	r7, sp, #0
    3376:	4603      	mov	r3, r0
    3378:	703b      	strb	r3, [r7, #0]
  return(_GetEPRxAddr(bEpNum));
    337a:	4b0a      	ldr	r3, [pc, #40]	(33a4 <GetEPRxAddr+0x34>)
    337c:	681b      	ldr	r3, [r3, #0]
    337e:	b29b      	uxth	r3, r3
    3380:	461a      	mov	r2, r3
    3382:	783b      	ldrb	r3, [r7, #0]
    3384:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3388:	441a      	add	r2, r3
    338a:	4b07      	ldr	r3, [pc, #28]	(33a8 <GetEPRxAddr+0x38>)
    338c:	4413      	add	r3, r2
    338e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3392:	681b      	ldr	r3, [r3, #0]
    3394:	b29b      	uxth	r3, r3
}
    3396:	4618      	mov	r0, r3
    3398:	f107 0704 	add.w	r7, r7, #4	; 0x4
    339c:	46bd      	mov	sp, r7
    339e:	bc80      	pop	{r7}
    33a0:	4770      	bx	lr
    33a2:	46c0      	nop			(mov r8, r8)
    33a4:	40005c50 	.word	0x40005c50
    33a8:	20003004 	.word	0x20003004

000033ac <SetEPTxCount>:
*                  wCount: new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
    33ac:	b480      	push	{r7}
    33ae:	b082      	sub	sp, #8
    33b0:	af00      	add	r7, sp, #0
    33b2:	4603      	mov	r3, r0
    33b4:	460a      	mov	r2, r1
    33b6:	713b      	strb	r3, [r7, #4]
    33b8:	4613      	mov	r3, r2
    33ba:	803b      	strh	r3, [r7, #0]
  _SetEPTxCount(bEpNum, wCount);
    33bc:	4b09      	ldr	r3, [pc, #36]	(33e4 <SetEPTxCount+0x38>)
    33be:	681b      	ldr	r3, [r3, #0]
    33c0:	b29b      	uxth	r3, r3
    33c2:	461a      	mov	r2, r3
    33c4:	793b      	ldrb	r3, [r7, #4]
    33c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    33ca:	441a      	add	r2, r3
    33cc:	4b06      	ldr	r3, [pc, #24]	(33e8 <SetEPTxCount+0x3c>)
    33ce:	4413      	add	r3, r2
    33d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    33d4:	461a      	mov	r2, r3
    33d6:	883b      	ldrh	r3, [r7, #0]
    33d8:	6013      	str	r3, [r2, #0]
}
    33da:	f107 0708 	add.w	r7, r7, #8	; 0x8
    33de:	46bd      	mov	sp, r7
    33e0:	bc80      	pop	{r7}
    33e2:	4770      	bx	lr
    33e4:	40005c50 	.word	0x40005c50
    33e8:	20003002 	.word	0x20003002

000033ec <SetEPCountRxReg>:
*                  wCount: the new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
{
    33ec:	b480      	push	{r7}
    33ee:	b083      	sub	sp, #12
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
    33f4:	460b      	mov	r3, r1
    33f6:	803b      	strh	r3, [r7, #0]
  _SetEPCountRxReg(dwReg, wCount);
    33f8:	883b      	ldrh	r3, [r7, #0]
    33fa:	2b3e      	cmp	r3, #62
    33fc:	d915      	bls.n	342a <SetEPCountRxReg+0x3e>
    33fe:	883b      	ldrh	r3, [r7, #0]
    3400:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3404:	817b      	strh	r3, [r7, #10]
    3406:	883b      	ldrh	r3, [r7, #0]
    3408:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    340c:	2b00      	cmp	r3, #0
    340e:	d103      	bne.n	3418 <SetEPCountRxReg+0x2c>
    3410:	897b      	ldrh	r3, [r7, #10]
    3412:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    3416:	817b      	strh	r3, [r7, #10]
    3418:	897b      	ldrh	r3, [r7, #10]
    341a:	ea4f 2383 	mov.w	r3, r3, lsl #10
    341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3422:	461a      	mov	r2, r3
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	601a      	str	r2, [r3, #0]
    3428:	e013      	b.n	3452 <SetEPCountRxReg+0x66>
    342a:	883b      	ldrh	r3, [r7, #0]
    342c:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3430:	817b      	strh	r3, [r7, #10]
    3432:	883b      	ldrh	r3, [r7, #0]
    3434:	f003 0301 	and.w	r3, r3, #1	; 0x1
    3438:	b2db      	uxtb	r3, r3
    343a:	2b00      	cmp	r3, #0
    343c:	d003      	beq.n	3446 <SetEPCountRxReg+0x5a>
    343e:	897b      	ldrh	r3, [r7, #10]
    3440:	f103 0301 	add.w	r3, r3, #1	; 0x1
    3444:	817b      	strh	r3, [r7, #10]
    3446:	897b      	ldrh	r3, [r7, #10]
    3448:	ea4f 2383 	mov.w	r3, r3, lsl #10
    344c:	461a      	mov	r2, r3
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	601a      	str	r2, [r3, #0]
}
    3452:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3456:	46bd      	mov	sp, r7
    3458:	bc80      	pop	{r7}
    345a:	4770      	bx	lr

0000345c <SetEPRxCount>:
*                  wCount: the new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
    345c:	b480      	push	{r7}
    345e:	b084      	sub	sp, #16
    3460:	af00      	add	r7, sp, #0
    3462:	4603      	mov	r3, r0
    3464:	460a      	mov	r2, r1
    3466:	713b      	strb	r3, [r7, #4]
    3468:	4613      	mov	r3, r2
    346a:	803b      	strh	r3, [r7, #0]
  _SetEPRxCount(bEpNum, wCount);
    346c:	4b1f      	ldr	r3, [pc, #124]	(34ec <SetEPRxCount+0x90>)
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	b29b      	uxth	r3, r3
    3472:	461a      	mov	r2, r3
    3474:	793b      	ldrb	r3, [r7, #4]
    3476:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    347a:	441a      	add	r2, r3
    347c:	4b1c      	ldr	r3, [pc, #112]	(34f0 <SetEPRxCount+0x94>)
    347e:	4413      	add	r3, r2
    3480:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3484:	60bb      	str	r3, [r7, #8]
    3486:	883b      	ldrh	r3, [r7, #0]
    3488:	2b3e      	cmp	r3, #62
    348a:	d915      	bls.n	34b8 <SetEPRxCount+0x5c>
    348c:	883b      	ldrh	r3, [r7, #0]
    348e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3492:	81fb      	strh	r3, [r7, #14]
    3494:	883b      	ldrh	r3, [r7, #0]
    3496:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    349a:	2b00      	cmp	r3, #0
    349c:	d103      	bne.n	34a6 <SetEPRxCount+0x4a>
    349e:	89fb      	ldrh	r3, [r7, #14]
    34a0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    34a4:	81fb      	strh	r3, [r7, #14]
    34a6:	89fb      	ldrh	r3, [r7, #14]
    34a8:	ea4f 2383 	mov.w	r3, r3, lsl #10
    34ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    34b0:	461a      	mov	r2, r3
    34b2:	68bb      	ldr	r3, [r7, #8]
    34b4:	601a      	str	r2, [r3, #0]
    34b6:	e013      	b.n	34e0 <SetEPRxCount+0x84>
    34b8:	883b      	ldrh	r3, [r7, #0]
    34ba:	ea4f 0353 	mov.w	r3, r3, lsr #1
    34be:	81fb      	strh	r3, [r7, #14]
    34c0:	883b      	ldrh	r3, [r7, #0]
    34c2:	f003 0301 	and.w	r3, r3, #1	; 0x1
    34c6:	b2db      	uxtb	r3, r3
    34c8:	2b00      	cmp	r3, #0
    34ca:	d003      	beq.n	34d4 <SetEPRxCount+0x78>
    34cc:	89fb      	ldrh	r3, [r7, #14]
    34ce:	f103 0301 	add.w	r3, r3, #1	; 0x1
    34d2:	81fb      	strh	r3, [r7, #14]
    34d4:	89fb      	ldrh	r3, [r7, #14]
    34d6:	ea4f 2383 	mov.w	r3, r3, lsl #10
    34da:	461a      	mov	r2, r3
    34dc:	68bb      	ldr	r3, [r7, #8]
    34de:	601a      	str	r2, [r3, #0]
}
    34e0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    34e4:	46bd      	mov	sp, r7
    34e6:	bc80      	pop	{r7}
    34e8:	4770      	bx	lr
    34ea:	46c0      	nop			(mov r8, r8)
    34ec:	40005c50 	.word	0x40005c50
    34f0:	20003006 	.word	0x20003006

000034f4 <GetEPTxCount>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None
* Return         : Tx count value.
*******************************************************************************/
uint16_t GetEPTxCount(uint8_t bEpNum)
{
    34f4:	b480      	push	{r7}
    34f6:	b082      	sub	sp, #8
    34f8:	af00      	add	r7, sp, #0
    34fa:	4603      	mov	r3, r0
    34fc:	713b      	strb	r3, [r7, #4]
  return(_GetEPTxCount(bEpNum));
    34fe:	4b0e      	ldr	r3, [pc, #56]	(3538 <GetEPTxCount+0x44>)
    3500:	681b      	ldr	r3, [r3, #0]
    3502:	b29b      	uxth	r3, r3
    3504:	461a      	mov	r2, r3
    3506:	793b      	ldrb	r3, [r7, #4]
    3508:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    350c:	441a      	add	r2, r3
    350e:	4b0b      	ldr	r3, [pc, #44]	(353c <GetEPTxCount+0x48>)
    3510:	4413      	add	r3, r2
    3512:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3516:	681b      	ldr	r3, [r3, #0]
    3518:	b29b      	uxth	r3, r3
    351a:	603b      	str	r3, [r7, #0]
    351c:	683a      	ldr	r2, [r7, #0]
    351e:	ea4f 5382 	mov.w	r3, r2, lsl #22
    3522:	ea4f 5393 	mov.w	r3, r3, lsr #22
    3526:	603b      	str	r3, [r7, #0]
    3528:	683b      	ldr	r3, [r7, #0]
}
    352a:	4618      	mov	r0, r3
    352c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3530:	46bd      	mov	sp, r7
    3532:	bc80      	pop	{r7}
    3534:	4770      	bx	lr
    3536:	46c0      	nop			(mov r8, r8)
    3538:	40005c50 	.word	0x40005c50
    353c:	20003002 	.word	0x20003002

00003540 <GetEPRxCount>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
    3540:	b480      	push	{r7}
    3542:	b082      	sub	sp, #8
    3544:	af00      	add	r7, sp, #0
    3546:	4603      	mov	r3, r0
    3548:	713b      	strb	r3, [r7, #4]
  return(_GetEPRxCount(bEpNum));
    354a:	4b0e      	ldr	r3, [pc, #56]	(3584 <GetEPRxCount+0x44>)
    354c:	681b      	ldr	r3, [r3, #0]
    354e:	b29b      	uxth	r3, r3
    3550:	461a      	mov	r2, r3
    3552:	793b      	ldrb	r3, [r7, #4]
    3554:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3558:	441a      	add	r2, r3
    355a:	4b0b      	ldr	r3, [pc, #44]	(3588 <GetEPRxCount+0x48>)
    355c:	4413      	add	r3, r2
    355e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3562:	681b      	ldr	r3, [r3, #0]
    3564:	b29b      	uxth	r3, r3
    3566:	603b      	str	r3, [r7, #0]
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	ea4f 5382 	mov.w	r3, r2, lsl #22
    356e:	ea4f 5393 	mov.w	r3, r3, lsr #22
    3572:	603b      	str	r3, [r7, #0]
    3574:	683b      	ldr	r3, [r7, #0]
}
    3576:	4618      	mov	r0, r3
    3578:	f107 0708 	add.w	r7, r7, #8	; 0x8
    357c:	46bd      	mov	sp, r7
    357e:	bc80      	pop	{r7}
    3580:	4770      	bx	lr
    3582:	46c0      	nop			(mov r8, r8)
    3584:	40005c50 	.word	0x40005c50
    3588:	20003006 	.word	0x20003006

0000358c <SetEPDblBuffAddr>:
*                  wBuf1Addr: new address of buffer 1.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
    358c:	b480      	push	{r7}
    358e:	b083      	sub	sp, #12
    3590:	af00      	add	r7, sp, #0
    3592:	4603      	mov	r3, r0
    3594:	723b      	strb	r3, [r7, #8]
    3596:	460b      	mov	r3, r1
    3598:	80bb      	strh	r3, [r7, #4]
    359a:	4613      	mov	r3, r2
    359c:	803b      	strh	r3, [r7, #0]
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
    359e:	4b17      	ldr	r3, [pc, #92]	(35fc <SetEPDblBuffAddr+0x70>)
    35a0:	681b      	ldr	r3, [r3, #0]
    35a2:	b29b      	uxth	r3, r3
    35a4:	461a      	mov	r2, r3
    35a6:	7a3b      	ldrb	r3, [r7, #8]
    35a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    35ac:	4413      	add	r3, r2
    35ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    35b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    35b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    35ba:	461a      	mov	r2, r3
    35bc:	88bb      	ldrh	r3, [r7, #4]
    35be:	ea4f 0353 	mov.w	r3, r3, lsr #1
    35c2:	b29b      	uxth	r3, r3
    35c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    35c8:	6013      	str	r3, [r2, #0]
    35ca:	4b0c      	ldr	r3, [pc, #48]	(35fc <SetEPDblBuffAddr+0x70>)
    35cc:	681b      	ldr	r3, [r3, #0]
    35ce:	b29b      	uxth	r3, r3
    35d0:	461a      	mov	r2, r3
    35d2:	7a3b      	ldrb	r3, [r7, #8]
    35d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    35d8:	441a      	add	r2, r3
    35da:	4b09      	ldr	r3, [pc, #36]	(3600 <SetEPDblBuffAddr+0x74>)
    35dc:	4413      	add	r3, r2
    35de:	ea4f 0343 	mov.w	r3, r3, lsl #1
    35e2:	461a      	mov	r2, r3
    35e4:	883b      	ldrh	r3, [r7, #0]
    35e6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    35ea:	b29b      	uxth	r3, r3
    35ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    35f0:	6013      	str	r3, [r2, #0]
}
    35f2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    35f6:	46bd      	mov	sp, r7
    35f8:	bc80      	pop	{r7}
    35fa:	4770      	bx	lr
    35fc:	40005c50 	.word	0x40005c50
    3600:	20003004 	.word	0x20003004

00003604 <SetEPDblBuf0Addr>:
*                  wBuf0Addr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
{
    3604:	b480      	push	{r7}
    3606:	b082      	sub	sp, #8
    3608:	af00      	add	r7, sp, #0
    360a:	4603      	mov	r3, r0
    360c:	460a      	mov	r2, r1
    360e:	713b      	strb	r3, [r7, #4]
    3610:	4613      	mov	r3, r2
    3612:	803b      	strh	r3, [r7, #0]
  _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
    3614:	4b0d      	ldr	r3, [pc, #52]	(364c <SetEPDblBuf0Addr+0x48>)
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	b29b      	uxth	r3, r3
    361a:	461a      	mov	r2, r3
    361c:	793b      	ldrb	r3, [r7, #4]
    361e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3622:	4413      	add	r3, r2
    3624:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    3628:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    362c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3630:	461a      	mov	r2, r3
    3632:	883b      	ldrh	r3, [r7, #0]
    3634:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3638:	b29b      	uxth	r3, r3
    363a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    363e:	6013      	str	r3, [r2, #0]
}
    3640:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3644:	46bd      	mov	sp, r7
    3646:	bc80      	pop	{r7}
    3648:	4770      	bx	lr
    364a:	46c0      	nop			(mov r8, r8)
    364c:	40005c50 	.word	0x40005c50

00003650 <SetEPDblBuf1Addr>:
*                  wBuf1Addr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
{
    3650:	b480      	push	{r7}
    3652:	b082      	sub	sp, #8
    3654:	af00      	add	r7, sp, #0
    3656:	4603      	mov	r3, r0
    3658:	460a      	mov	r2, r1
    365a:	713b      	strb	r3, [r7, #4]
    365c:	4613      	mov	r3, r2
    365e:	803b      	strh	r3, [r7, #0]
  _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
    3660:	4b0c      	ldr	r3, [pc, #48]	(3694 <SetEPDblBuf1Addr+0x44>)
    3662:	681b      	ldr	r3, [r3, #0]
    3664:	b29b      	uxth	r3, r3
    3666:	461a      	mov	r2, r3
    3668:	793b      	ldrb	r3, [r7, #4]
    366a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    366e:	441a      	add	r2, r3
    3670:	4b09      	ldr	r3, [pc, #36]	(3698 <SetEPDblBuf1Addr+0x48>)
    3672:	4413      	add	r3, r2
    3674:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3678:	461a      	mov	r2, r3
    367a:	883b      	ldrh	r3, [r7, #0]
    367c:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3680:	b29b      	uxth	r3, r3
    3682:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3686:	6013      	str	r3, [r2, #0]
}
    3688:	f107 0708 	add.w	r7, r7, #8	; 0x8
    368c:	46bd      	mov	sp, r7
    368e:	bc80      	pop	{r7}
    3690:	4770      	bx	lr
    3692:	46c0      	nop			(mov r8, r8)
    3694:	40005c50 	.word	0x40005c50
    3698:	20003004 	.word	0x20003004

0000369c <GetEPDblBuf0Addr>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
{
    369c:	b480      	push	{r7}
    369e:	b081      	sub	sp, #4
    36a0:	af00      	add	r7, sp, #0
    36a2:	4603      	mov	r3, r0
    36a4:	703b      	strb	r3, [r7, #0]
  return(_GetEPDblBuf0Addr(bEpNum));
    36a6:	4b0b      	ldr	r3, [pc, #44]	(36d4 <GetEPDblBuf0Addr+0x38>)
    36a8:	681b      	ldr	r3, [r3, #0]
    36aa:	b29b      	uxth	r3, r3
    36ac:	461a      	mov	r2, r3
    36ae:	783b      	ldrb	r3, [r7, #0]
    36b0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    36b4:	4413      	add	r3, r2
    36b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    36ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    36be:	ea4f 0343 	mov.w	r3, r3, lsl #1
    36c2:	681b      	ldr	r3, [r3, #0]
    36c4:	b29b      	uxth	r3, r3
}
    36c6:	4618      	mov	r0, r3
    36c8:	f107 0704 	add.w	r7, r7, #4	; 0x4
    36cc:	46bd      	mov	sp, r7
    36ce:	bc80      	pop	{r7}
    36d0:	4770      	bx	lr
    36d2:	46c0      	nop			(mov r8, r8)
    36d4:	40005c50 	.word	0x40005c50

000036d8 <GetEPDblBuf1Addr>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Address of the Buffer 1.
*******************************************************************************/
uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
{
    36d8:	b480      	push	{r7}
    36da:	b081      	sub	sp, #4
    36dc:	af00      	add	r7, sp, #0
    36de:	4603      	mov	r3, r0
    36e0:	703b      	strb	r3, [r7, #0]
  return(_GetEPDblBuf1Addr(bEpNum));
    36e2:	4b0a      	ldr	r3, [pc, #40]	(370c <GetEPDblBuf1Addr+0x34>)
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	b29b      	uxth	r3, r3
    36e8:	461a      	mov	r2, r3
    36ea:	783b      	ldrb	r3, [r7, #0]
    36ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    36f0:	441a      	add	r2, r3
    36f2:	4b07      	ldr	r3, [pc, #28]	(3710 <GetEPDblBuf1Addr+0x38>)
    36f4:	4413      	add	r3, r2
    36f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    36fa:	681b      	ldr	r3, [r3, #0]
    36fc:	b29b      	uxth	r3, r3
}
    36fe:	4618      	mov	r0, r3
    3700:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3704:	46bd      	mov	sp, r7
    3706:	bc80      	pop	{r7}
    3708:	4770      	bx	lr
    370a:	46c0      	nop			(mov r8, r8)
    370c:	40005c50 	.word	0x40005c50
    3710:	20003004 	.word	0x20003004

00003714 <SetEPDblBuffCount>:
* Input          : bEpNum,bDir, wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
    3714:	b480      	push	{r7}
    3716:	b087      	sub	sp, #28
    3718:	af00      	add	r7, sp, #0
    371a:	4603      	mov	r3, r0
    371c:	723b      	strb	r3, [r7, #8]
    371e:	460b      	mov	r3, r1
    3720:	713b      	strb	r3, [r7, #4]
    3722:	4613      	mov	r3, r2
    3724:	803b      	strh	r3, [r7, #0]
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
    3726:	793b      	ldrb	r3, [r7, #4]
    3728:	2b01      	cmp	r3, #1
    372a:	d13a      	bne.n	37a2 <SetEPDblBuffCount+0x8e>
    372c:	4b50      	ldr	r3, [pc, #320]	(3870 <SetEPDblBuffCount+0x15c>)
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	b29b      	uxth	r3, r3
    3732:	461a      	mov	r2, r3
    3734:	7a3b      	ldrb	r3, [r7, #8]
    3736:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    373a:	441a      	add	r2, r3
    373c:	4b4d      	ldr	r3, [pc, #308]	(3874 <SetEPDblBuffCount+0x160>)
    373e:	4413      	add	r3, r2
    3740:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3744:	60fb      	str	r3, [r7, #12]
    3746:	883b      	ldrh	r3, [r7, #0]
    3748:	2b3e      	cmp	r3, #62
    374a:	d915      	bls.n	3778 <SetEPDblBuffCount+0x64>
    374c:	883b      	ldrh	r3, [r7, #0]
    374e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3752:	827b      	strh	r3, [r7, #18]
    3754:	883b      	ldrh	r3, [r7, #0]
    3756:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    375a:	2b00      	cmp	r3, #0
    375c:	d103      	bne.n	3766 <SetEPDblBuffCount+0x52>
    375e:	8a7b      	ldrh	r3, [r7, #18]
    3760:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    3764:	827b      	strh	r3, [r7, #18]
    3766:	8a7b      	ldrh	r3, [r7, #18]
    3768:	ea4f 2383 	mov.w	r3, r3, lsl #10
    376c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3770:	461a      	mov	r2, r3
    3772:	68fb      	ldr	r3, [r7, #12]
    3774:	601a      	str	r2, [r3, #0]
    3776:	e026      	b.n	37c6 <SetEPDblBuffCount+0xb2>
    3778:	883b      	ldrh	r3, [r7, #0]
    377a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    377e:	827b      	strh	r3, [r7, #18]
    3780:	883b      	ldrh	r3, [r7, #0]
    3782:	f003 0301 	and.w	r3, r3, #1	; 0x1
    3786:	b2db      	uxtb	r3, r3
    3788:	2b00      	cmp	r3, #0
    378a:	d003      	beq.n	3794 <SetEPDblBuffCount+0x80>
    378c:	8a7b      	ldrh	r3, [r7, #18]
    378e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    3792:	827b      	strh	r3, [r7, #18]
    3794:	8a7b      	ldrh	r3, [r7, #18]
    3796:	ea4f 2383 	mov.w	r3, r3, lsl #10
    379a:	461a      	mov	r2, r3
    379c:	68fb      	ldr	r3, [r7, #12]
    379e:	601a      	str	r2, [r3, #0]
    37a0:	e011      	b.n	37c6 <SetEPDblBuffCount+0xb2>
    37a2:	793b      	ldrb	r3, [r7, #4]
    37a4:	2b02      	cmp	r3, #2
    37a6:	d10e      	bne.n	37c6 <SetEPDblBuffCount+0xb2>
    37a8:	4b31      	ldr	r3, [pc, #196]	(3870 <SetEPDblBuffCount+0x15c>)
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	b29b      	uxth	r3, r3
    37ae:	461a      	mov	r2, r3
    37b0:	7a3b      	ldrb	r3, [r7, #8]
    37b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    37b6:	441a      	add	r2, r3
    37b8:	4b2e      	ldr	r3, [pc, #184]	(3874 <SetEPDblBuffCount+0x160>)
    37ba:	4413      	add	r3, r2
    37bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    37c0:	461a      	mov	r2, r3
    37c2:	883b      	ldrh	r3, [r7, #0]
    37c4:	6013      	str	r3, [r2, #0]
    37c6:	793b      	ldrb	r3, [r7, #4]
    37c8:	2b01      	cmp	r3, #1
    37ca:	d13a      	bne.n	3842 <SetEPDblBuffCount+0x12e>
    37cc:	4b28      	ldr	r3, [pc, #160]	(3870 <SetEPDblBuffCount+0x15c>)
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	b29b      	uxth	r3, r3
    37d2:	461a      	mov	r2, r3
    37d4:	7a3b      	ldrb	r3, [r7, #8]
    37d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    37da:	441a      	add	r2, r3
    37dc:	4b26      	ldr	r3, [pc, #152]	(3878 <SetEPDblBuffCount+0x164>)
    37de:	4413      	add	r3, r2
    37e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    37e4:	617b      	str	r3, [r7, #20]
    37e6:	883b      	ldrh	r3, [r7, #0]
    37e8:	2b3e      	cmp	r3, #62
    37ea:	d915      	bls.n	3818 <SetEPDblBuffCount+0x104>
    37ec:	883b      	ldrh	r3, [r7, #0]
    37ee:	ea4f 1353 	mov.w	r3, r3, lsr #5
    37f2:	837b      	strh	r3, [r7, #26]
    37f4:	883b      	ldrh	r3, [r7, #0]
    37f6:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    37fa:	2b00      	cmp	r3, #0
    37fc:	d103      	bne.n	3806 <SetEPDblBuffCount+0xf2>
    37fe:	8b7b      	ldrh	r3, [r7, #26]
    3800:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    3804:	837b      	strh	r3, [r7, #26]
    3806:	8b7b      	ldrh	r3, [r7, #26]
    3808:	ea4f 2383 	mov.w	r3, r3, lsl #10
    380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3810:	461a      	mov	r2, r3
    3812:	697b      	ldr	r3, [r7, #20]
    3814:	601a      	str	r2, [r3, #0]
    3816:	e026      	b.n	3866 <SetEPDblBuffCount+0x152>
    3818:	883b      	ldrh	r3, [r7, #0]
    381a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    381e:	837b      	strh	r3, [r7, #26]
    3820:	883b      	ldrh	r3, [r7, #0]
    3822:	f003 0301 	and.w	r3, r3, #1	; 0x1
    3826:	b2db      	uxtb	r3, r3
    3828:	2b00      	cmp	r3, #0
    382a:	d003      	beq.n	3834 <SetEPDblBuffCount+0x120>
    382c:	8b7b      	ldrh	r3, [r7, #26]
    382e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    3832:	837b      	strh	r3, [r7, #26]
    3834:	8b7b      	ldrh	r3, [r7, #26]
    3836:	ea4f 2383 	mov.w	r3, r3, lsl #10
    383a:	461a      	mov	r2, r3
    383c:	697b      	ldr	r3, [r7, #20]
    383e:	601a      	str	r2, [r3, #0]
    3840:	e011      	b.n	3866 <SetEPDblBuffCount+0x152>
    3842:	793b      	ldrb	r3, [r7, #4]
    3844:	2b02      	cmp	r3, #2
    3846:	d10e      	bne.n	3866 <SetEPDblBuffCount+0x152>
    3848:	4b09      	ldr	r3, [pc, #36]	(3870 <SetEPDblBuffCount+0x15c>)
    384a:	681b      	ldr	r3, [r3, #0]
    384c:	b29b      	uxth	r3, r3
    384e:	461a      	mov	r2, r3
    3850:	7a3b      	ldrb	r3, [r7, #8]
    3852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3856:	441a      	add	r2, r3
    3858:	4b07      	ldr	r3, [pc, #28]	(3878 <SetEPDblBuffCount+0x164>)
    385a:	4413      	add	r3, r2
    385c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3860:	461a      	mov	r2, r3
    3862:	883b      	ldrh	r3, [r7, #0]
    3864:	6013      	str	r3, [r2, #0]
}
    3866:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    386a:	46bd      	mov	sp, r7
    386c:	bc80      	pop	{r7}
    386e:	4770      	bx	lr
    3870:	40005c50 	.word	0x40005c50
    3874:	20003002 	.word	0x20003002
    3878:	20003006 	.word	0x20003006

0000387c <SetEPDblBuf0Count>:
* Input          : bEpNum, bDir,  wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
    387c:	b480      	push	{r7}
    387e:	b085      	sub	sp, #20
    3880:	af00      	add	r7, sp, #0
    3882:	4603      	mov	r3, r0
    3884:	723b      	strb	r3, [r7, #8]
    3886:	460b      	mov	r3, r1
    3888:	713b      	strb	r3, [r7, #4]
    388a:	4613      	mov	r3, r2
    388c:	803b      	strh	r3, [r7, #0]
  _SetEPDblBuf0Count(bEpNum, bDir, wCount);
    388e:	793b      	ldrb	r3, [r7, #4]
    3890:	2b01      	cmp	r3, #1
    3892:	d13a      	bne.n	390a <SetEPDblBuf0Count+0x8e>
    3894:	4b28      	ldr	r3, [pc, #160]	(3938 <SetEPDblBuf0Count+0xbc>)
    3896:	681b      	ldr	r3, [r3, #0]
    3898:	b29b      	uxth	r3, r3
    389a:	461a      	mov	r2, r3
    389c:	7a3b      	ldrb	r3, [r7, #8]
    389e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    38a2:	441a      	add	r2, r3
    38a4:	4b25      	ldr	r3, [pc, #148]	(393c <SetEPDblBuf0Count+0xc0>)
    38a6:	4413      	add	r3, r2
    38a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    38ac:	60fb      	str	r3, [r7, #12]
    38ae:	883b      	ldrh	r3, [r7, #0]
    38b0:	2b3e      	cmp	r3, #62
    38b2:	d915      	bls.n	38e0 <SetEPDblBuf0Count+0x64>
    38b4:	883b      	ldrh	r3, [r7, #0]
    38b6:	ea4f 1353 	mov.w	r3, r3, lsr #5
    38ba:	827b      	strh	r3, [r7, #18]
    38bc:	883b      	ldrh	r3, [r7, #0]
    38be:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    38c2:	2b00      	cmp	r3, #0
    38c4:	d103      	bne.n	38ce <SetEPDblBuf0Count+0x52>
    38c6:	8a7b      	ldrh	r3, [r7, #18]
    38c8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    38cc:	827b      	strh	r3, [r7, #18]
    38ce:	8a7b      	ldrh	r3, [r7, #18]
    38d0:	ea4f 2383 	mov.w	r3, r3, lsl #10
    38d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    38d8:	461a      	mov	r2, r3
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	601a      	str	r2, [r3, #0]
    38de:	e026      	b.n	392e <SetEPDblBuf0Count+0xb2>
    38e0:	883b      	ldrh	r3, [r7, #0]
    38e2:	ea4f 0353 	mov.w	r3, r3, lsr #1
    38e6:	827b      	strh	r3, [r7, #18]
    38e8:	883b      	ldrh	r3, [r7, #0]
    38ea:	f003 0301 	and.w	r3, r3, #1	; 0x1
    38ee:	b2db      	uxtb	r3, r3
    38f0:	2b00      	cmp	r3, #0
    38f2:	d003      	beq.n	38fc <SetEPDblBuf0Count+0x80>
    38f4:	8a7b      	ldrh	r3, [r7, #18]
    38f6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    38fa:	827b      	strh	r3, [r7, #18]
    38fc:	8a7b      	ldrh	r3, [r7, #18]
    38fe:	ea4f 2383 	mov.w	r3, r3, lsl #10
    3902:	461a      	mov	r2, r3
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	601a      	str	r2, [r3, #0]
    3908:	e011      	b.n	392e <SetEPDblBuf0Count+0xb2>
    390a:	793b      	ldrb	r3, [r7, #4]
    390c:	2b02      	cmp	r3, #2
    390e:	d10e      	bne.n	392e <SetEPDblBuf0Count+0xb2>
    3910:	4b09      	ldr	r3, [pc, #36]	(3938 <SetEPDblBuf0Count+0xbc>)
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	b29b      	uxth	r3, r3
    3916:	461a      	mov	r2, r3
    3918:	7a3b      	ldrb	r3, [r7, #8]
    391a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    391e:	441a      	add	r2, r3
    3920:	4b06      	ldr	r3, [pc, #24]	(393c <SetEPDblBuf0Count+0xc0>)
    3922:	4413      	add	r3, r2
    3924:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3928:	461a      	mov	r2, r3
    392a:	883b      	ldrh	r3, [r7, #0]
    392c:	6013      	str	r3, [r2, #0]
}
    392e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3932:	46bd      	mov	sp, r7
    3934:	bc80      	pop	{r7}
    3936:	4770      	bx	lr
    3938:	40005c50 	.word	0x40005c50
    393c:	20003002 	.word	0x20003002

00003940 <SetEPDblBuf1Count>:
* Input          : bEpNum,  bDir,  wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
    3940:	b480      	push	{r7}
    3942:	b085      	sub	sp, #20
    3944:	af00      	add	r7, sp, #0
    3946:	4603      	mov	r3, r0
    3948:	723b      	strb	r3, [r7, #8]
    394a:	460b      	mov	r3, r1
    394c:	713b      	strb	r3, [r7, #4]
    394e:	4613      	mov	r3, r2
    3950:	803b      	strh	r3, [r7, #0]
  _SetEPDblBuf1Count(bEpNum, bDir, wCount);
    3952:	793b      	ldrb	r3, [r7, #4]
    3954:	2b01      	cmp	r3, #1
    3956:	d13a      	bne.n	39ce <SetEPDblBuf1Count+0x8e>
    3958:	4b28      	ldr	r3, [pc, #160]	(39fc <SetEPDblBuf1Count+0xbc>)
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	b29b      	uxth	r3, r3
    395e:	461a      	mov	r2, r3
    3960:	7a3b      	ldrb	r3, [r7, #8]
    3962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3966:	441a      	add	r2, r3
    3968:	4b25      	ldr	r3, [pc, #148]	(3a00 <SetEPDblBuf1Count+0xc0>)
    396a:	4413      	add	r3, r2
    396c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3970:	60fb      	str	r3, [r7, #12]
    3972:	883b      	ldrh	r3, [r7, #0]
    3974:	2b3e      	cmp	r3, #62
    3976:	d915      	bls.n	39a4 <SetEPDblBuf1Count+0x64>
    3978:	883b      	ldrh	r3, [r7, #0]
    397a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    397e:	827b      	strh	r3, [r7, #18]
    3980:	883b      	ldrh	r3, [r7, #0]
    3982:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    3986:	2b00      	cmp	r3, #0
    3988:	d103      	bne.n	3992 <SetEPDblBuf1Count+0x52>
    398a:	8a7b      	ldrh	r3, [r7, #18]
    398c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    3990:	827b      	strh	r3, [r7, #18]
    3992:	8a7b      	ldrh	r3, [r7, #18]
    3994:	ea4f 2383 	mov.w	r3, r3, lsl #10
    3998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    399c:	461a      	mov	r2, r3
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	601a      	str	r2, [r3, #0]
    39a2:	e026      	b.n	39f2 <SetEPDblBuf1Count+0xb2>
    39a4:	883b      	ldrh	r3, [r7, #0]
    39a6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    39aa:	827b      	strh	r3, [r7, #18]
    39ac:	883b      	ldrh	r3, [r7, #0]
    39ae:	f003 0301 	and.w	r3, r3, #1	; 0x1
    39b2:	b2db      	uxtb	r3, r3
    39b4:	2b00      	cmp	r3, #0
    39b6:	d003      	beq.n	39c0 <SetEPDblBuf1Count+0x80>
    39b8:	8a7b      	ldrh	r3, [r7, #18]
    39ba:	f103 0301 	add.w	r3, r3, #1	; 0x1
    39be:	827b      	strh	r3, [r7, #18]
    39c0:	8a7b      	ldrh	r3, [r7, #18]
    39c2:	ea4f 2383 	mov.w	r3, r3, lsl #10
    39c6:	461a      	mov	r2, r3
    39c8:	68fb      	ldr	r3, [r7, #12]
    39ca:	601a      	str	r2, [r3, #0]
    39cc:	e011      	b.n	39f2 <SetEPDblBuf1Count+0xb2>
    39ce:	793b      	ldrb	r3, [r7, #4]
    39d0:	2b02      	cmp	r3, #2
    39d2:	d10e      	bne.n	39f2 <SetEPDblBuf1Count+0xb2>
    39d4:	4b09      	ldr	r3, [pc, #36]	(39fc <SetEPDblBuf1Count+0xbc>)
    39d6:	681b      	ldr	r3, [r3, #0]
    39d8:	b29b      	uxth	r3, r3
    39da:	461a      	mov	r2, r3
    39dc:	7a3b      	ldrb	r3, [r7, #8]
    39de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    39e2:	441a      	add	r2, r3
    39e4:	4b06      	ldr	r3, [pc, #24]	(3a00 <SetEPDblBuf1Count+0xc0>)
    39e6:	4413      	add	r3, r2
    39e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    39ec:	461a      	mov	r2, r3
    39ee:	883b      	ldrh	r3, [r7, #0]
    39f0:	6013      	str	r3, [r2, #0]
}
    39f2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    39f6:	46bd      	mov	sp, r7
    39f8:	bc80      	pop	{r7}
    39fa:	4770      	bx	lr
    39fc:	40005c50 	.word	0x40005c50
    3a00:	20003006 	.word	0x20003006

00003a04 <GetEPDblBuf0Count>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Endpoint Buffer 0 count
*******************************************************************************/
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
    3a04:	b480      	push	{r7}
    3a06:	b082      	sub	sp, #8
    3a08:	af00      	add	r7, sp, #0
    3a0a:	4603      	mov	r3, r0
    3a0c:	713b      	strb	r3, [r7, #4]
  return(_GetEPDblBuf0Count(bEpNum));
    3a0e:	4b0e      	ldr	r3, [pc, #56]	(3a48 <GetEPDblBuf0Count+0x44>)
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	b29b      	uxth	r3, r3
    3a14:	461a      	mov	r2, r3
    3a16:	793b      	ldrb	r3, [r7, #4]
    3a18:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3a1c:	441a      	add	r2, r3
    3a1e:	4b0b      	ldr	r3, [pc, #44]	(3a4c <GetEPDblBuf0Count+0x48>)
    3a20:	4413      	add	r3, r2
    3a22:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	b29b      	uxth	r3, r3
    3a2a:	603b      	str	r3, [r7, #0]
    3a2c:	683a      	ldr	r2, [r7, #0]
    3a2e:	ea4f 5382 	mov.w	r3, r2, lsl #22
    3a32:	ea4f 5393 	mov.w	r3, r3, lsr #22
    3a36:	603b      	str	r3, [r7, #0]
    3a38:	683b      	ldr	r3, [r7, #0]
}
    3a3a:	4618      	mov	r0, r3
    3a3c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3a40:	46bd      	mov	sp, r7
    3a42:	bc80      	pop	{r7}
    3a44:	4770      	bx	lr
    3a46:	46c0      	nop			(mov r8, r8)
    3a48:	40005c50 	.word	0x40005c50
    3a4c:	20003002 	.word	0x20003002

00003a50 <GetEPDblBuf1Count>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Endpoint Buffer 1 count.
*******************************************************************************/
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
    3a50:	b480      	push	{r7}
    3a52:	b082      	sub	sp, #8
    3a54:	af00      	add	r7, sp, #0
    3a56:	4603      	mov	r3, r0
    3a58:	713b      	strb	r3, [r7, #4]
  return(_GetEPDblBuf1Count(bEpNum));
    3a5a:	4b0e      	ldr	r3, [pc, #56]	(3a94 <GetEPDblBuf1Count+0x44>)
    3a5c:	681b      	ldr	r3, [r3, #0]
    3a5e:	b29b      	uxth	r3, r3
    3a60:	461a      	mov	r2, r3
    3a62:	793b      	ldrb	r3, [r7, #4]
    3a64:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3a68:	441a      	add	r2, r3
    3a6a:	4b0b      	ldr	r3, [pc, #44]	(3a98 <GetEPDblBuf1Count+0x48>)
    3a6c:	4413      	add	r3, r2
    3a6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3a72:	681b      	ldr	r3, [r3, #0]
    3a74:	b29b      	uxth	r3, r3
    3a76:	603b      	str	r3, [r7, #0]
    3a78:	683a      	ldr	r2, [r7, #0]
    3a7a:	ea4f 5382 	mov.w	r3, r2, lsl #22
    3a7e:	ea4f 5393 	mov.w	r3, r3, lsr #22
    3a82:	603b      	str	r3, [r7, #0]
    3a84:	683b      	ldr	r3, [r7, #0]
}
    3a86:	4618      	mov	r0, r3
    3a88:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3a8c:	46bd      	mov	sp, r7
    3a8e:	bc80      	pop	{r7}
    3a90:	4770      	bx	lr
    3a92:	46c0      	nop			(mov r8, r8)
    3a94:	40005c50 	.word	0x40005c50
    3a98:	20003006 	.word	0x20003006

00003a9c <GetEPDblBufDir>:
* Output         : None.
* Return         : EP_DBUF_OUT, EP_DBUF_IN,
*                  EP_DBUF_ERR if the endpoint counter not yet programmed.
*******************************************************************************/
EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
{
    3a9c:	b480      	push	{r7}
    3a9e:	b082      	sub	sp, #8
    3aa0:	af00      	add	r7, sp, #0
    3aa2:	4603      	mov	r3, r0
    3aa4:	713b      	strb	r3, [r7, #4]
  if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
    3aa6:	4b1c      	ldr	r3, [pc, #112]	(3b18 <GetEPDblBufDir+0x7c>)
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	b29b      	uxth	r3, r3
    3aac:	461a      	mov	r2, r3
    3aae:	793b      	ldrb	r3, [r7, #4]
    3ab0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3ab4:	441a      	add	r2, r3
    3ab6:	4b19      	ldr	r3, [pc, #100]	(3b1c <GetEPDblBufDir+0x80>)
    3ab8:	4413      	add	r3, r2
    3aba:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	b29b      	uxth	r3, r3
    3ac2:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d003      	beq.n	3ad2 <GetEPDblBufDir+0x36>
    return(EP_DBUF_OUT);
    3aca:	f04f 0301 	mov.w	r3, #1	; 0x1
    3ace:	603b      	str	r3, [r7, #0]
    3ad0:	e01a      	b.n	3b08 <GetEPDblBufDir+0x6c>
  else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
    3ad2:	4b11      	ldr	r3, [pc, #68]	(3b18 <GetEPDblBufDir+0x7c>)
    3ad4:	681b      	ldr	r3, [r3, #0]
    3ad6:	b29b      	uxth	r3, r3
    3ad8:	461a      	mov	r2, r3
    3ada:	793b      	ldrb	r3, [r7, #4]
    3adc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3ae0:	441a      	add	r2, r3
    3ae2:	4b0f      	ldr	r3, [pc, #60]	(3b20 <GetEPDblBufDir+0x84>)
    3ae4:	4413      	add	r3, r2
    3ae6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	b29b      	uxth	r3, r3
    3aee:	ea4f 5383 	mov.w	r3, r3, lsl #22
    3af2:	ea4f 5393 	mov.w	r3, r3, lsr #22
    3af6:	2b00      	cmp	r3, #0
    3af8:	d003      	beq.n	3b02 <GetEPDblBufDir+0x66>
    return(EP_DBUF_IN);
    3afa:	f04f 0302 	mov.w	r3, #2	; 0x2
    3afe:	603b      	str	r3, [r7, #0]
    3b00:	e002      	b.n	3b08 <GetEPDblBufDir+0x6c>
  else
    return(EP_DBUF_ERR);
    3b02:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b06:	603b      	str	r3, [r7, #0]
    3b08:	683b      	ldr	r3, [r7, #0]
}
    3b0a:	4618      	mov	r0, r3
    3b0c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3b10:	46bd      	mov	sp, r7
    3b12:	bc80      	pop	{r7}
    3b14:	4770      	bx	lr
    3b16:	46c0      	nop			(mov r8, r8)
    3b18:	40005c50 	.word	0x40005c50
    3b1c:	20003006 	.word	0x20003006
    3b20:	20003002 	.word	0x20003002

00003b24 <FreeUserBuffer>:
* Input          : bEpNum, bDir
* Output         : None.
* Return         : None.
*******************************************************************************/
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
    3b24:	b480      	push	{r7}
    3b26:	b082      	sub	sp, #8
    3b28:	af00      	add	r7, sp, #0
    3b2a:	4603      	mov	r3, r0
    3b2c:	460a      	mov	r2, r1
    3b2e:	713b      	strb	r3, [r7, #4]
    3b30:	4613      	mov	r3, r2
    3b32:	703b      	strb	r3, [r7, #0]
  if (bDir == EP_DBUF_OUT)
    3b34:	783b      	ldrb	r3, [r7, #0]
    3b36:	2b01      	cmp	r3, #1
    3b38:	d11a      	bne.n	3b70 <FreeUserBuffer+0x4c>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
    3b3a:	793b      	ldrb	r3, [r7, #4]
    3b3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b40:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3b44:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    3b48:	793b      	ldrb	r3, [r7, #4]
    3b4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3b52:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	b29b      	uxth	r3, r3
    3b5a:	461a      	mov	r2, r3
    3b5c:	f640 730f 	movw	r3, #3855	; 0xf0f
    3b60:	ea02 0303 	and.w	r3, r2, r3
    3b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3b6c:	600b      	str	r3, [r1, #0]
    3b6e:	e01c      	b.n	3baa <FreeUserBuffer+0x86>
  }
  else if (bDir == EP_DBUF_IN)
    3b70:	783b      	ldrb	r3, [r7, #0]
    3b72:	2b02      	cmp	r3, #2
    3b74:	d119      	bne.n	3baa <FreeUserBuffer+0x86>
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
    3b76:	793b      	ldrb	r3, [r7, #4]
    3b78:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b7c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3b80:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    3b84:	793b      	ldrb	r3, [r7, #4]
    3b86:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3b8e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    3b92:	681b      	ldr	r3, [r3, #0]
    3b94:	b29b      	uxth	r3, r3
    3b96:	461a      	mov	r2, r3
    3b98:	f640 730f 	movw	r3, #3855	; 0xf0f
    3b9c:	ea02 0303 	and.w	r3, r2, r3
    3ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    3ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3ba8:	600b      	str	r3, [r1, #0]
  }
}
    3baa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3bae:	46bd      	mov	sp, r7
    3bb0:	bc80      	pop	{r7}
    3bb2:	4770      	bx	lr

00003bb4 <ToWord>:
* Input          : bh: byte high, bl: bytes low.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ToWord(uint8_t bh, uint8_t bl)
{
    3bb4:	b480      	push	{r7}
    3bb6:	b083      	sub	sp, #12
    3bb8:	af00      	add	r7, sp, #0
    3bba:	4603      	mov	r3, r0
    3bbc:	460a      	mov	r2, r1
    3bbe:	713b      	strb	r3, [r7, #4]
    3bc0:	4613      	mov	r3, r2
    3bc2:	703b      	strb	r3, [r7, #0]
  uint16_t wRet;
  wRet = (uint16_t)bl | ((uint16_t)bh << 8);
    3bc4:	783a      	ldrb	r2, [r7, #0]
    3bc6:	793b      	ldrb	r3, [r7, #4]
    3bc8:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3bcc:	b29b      	uxth	r3, r3
    3bce:	ea42 0303 	orr.w	r3, r2, r3
    3bd2:	b29b      	uxth	r3, r3
    3bd4:	817b      	strh	r3, [r7, #10]
  return(wRet);
    3bd6:	897b      	ldrh	r3, [r7, #10]
}
    3bd8:	4618      	mov	r0, r3
    3bda:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3bde:	46bd      	mov	sp, r7
    3be0:	bc80      	pop	{r7}
    3be2:	4770      	bx	lr

00003be4 <ByteSwap>:
* Input          : wSwW: word to Swap.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ByteSwap(uint16_t wSwW)
{
    3be4:	b480      	push	{r7}
    3be6:	b082      	sub	sp, #8
    3be8:	af00      	add	r7, sp, #0
    3bea:	4603      	mov	r3, r0
    3bec:	803b      	strh	r3, [r7, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
    3bee:	883b      	ldrh	r3, [r7, #0]
    3bf0:	717b      	strb	r3, [r7, #5]
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
    3bf2:	883b      	ldrh	r3, [r7, #0]
    3bf4:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3bf8:	b29b      	uxth	r3, r3
    3bfa:	461a      	mov	r2, r3
    3bfc:	797b      	ldrb	r3, [r7, #5]
    3bfe:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3c02:	b29b      	uxth	r3, r3
    3c04:	ea42 0303 	orr.w	r3, r2, r3
    3c08:	b29b      	uxth	r3, r3
    3c0a:	80fb      	strh	r3, [r7, #6]
  return(wRet);
    3c0c:	88fb      	ldrh	r3, [r7, #6]
}
    3c0e:	4618      	mov	r0, r3
    3c10:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3c14:	46bd      	mov	sp, r7
    3c16:	bc80      	pop	{r7}
    3c18:	4770      	bx	lr
    3c1a:	46c0      	nop			(mov r8, r8)

00003c1c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    3c1c:	b480      	push	{r7}
    3c1e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    3c20:	4a13      	ldr	r2, [pc, #76]	(3c70 <RCC_DeInit+0x54>)
    3c22:	4b13      	ldr	r3, [pc, #76]	(3c70 <RCC_DeInit+0x54>)
    3c24:	681b      	ldr	r3, [r3, #0]
    3c26:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    3c2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    3c2c:	4910      	ldr	r1, [pc, #64]	(3c70 <RCC_DeInit+0x54>)
    3c2e:	4b10      	ldr	r3, [pc, #64]	(3c70 <RCC_DeInit+0x54>)
    3c30:	685a      	ldr	r2, [r3, #4]
    3c32:	4b10      	ldr	r3, [pc, #64]	(3c74 <RCC_DeInit+0x58>)
    3c34:	ea02 0303 	and.w	r3, r2, r3
    3c38:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    3c3a:	4a0d      	ldr	r2, [pc, #52]	(3c70 <RCC_DeInit+0x54>)
    3c3c:	4b0c      	ldr	r3, [pc, #48]	(3c70 <RCC_DeInit+0x54>)
    3c3e:	681b      	ldr	r3, [r3, #0]
    3c40:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    3c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3c48:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    3c4a:	4a09      	ldr	r2, [pc, #36]	(3c70 <RCC_DeInit+0x54>)
    3c4c:	4b08      	ldr	r3, [pc, #32]	(3c70 <RCC_DeInit+0x54>)
    3c4e:	681b      	ldr	r3, [r3, #0]
    3c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    3c54:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    3c56:	4a06      	ldr	r2, [pc, #24]	(3c70 <RCC_DeInit+0x54>)
    3c58:	4b05      	ldr	r3, [pc, #20]	(3c70 <RCC_DeInit+0x54>)
    3c5a:	685b      	ldr	r3, [r3, #4]
    3c5c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    3c60:	6053      	str	r3, [r2, #4]

#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    3c62:	4a03      	ldr	r2, [pc, #12]	(3c70 <RCC_DeInit+0x54>)
    3c64:	f44f 031f 	mov.w	r3, #10420224	; 0x9f0000
    3c68:	6093      	str	r3, [r2, #8]
  RCC->CIR = 0x00FF0000;

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#endif /* STM32F10X_CL */
}
    3c6a:	46bd      	mov	sp, r7
    3c6c:	bc80      	pop	{r7}
    3c6e:	4770      	bx	lr
    3c70:	40021000 	.word	0x40021000
    3c74:	f8ff0000 	.word	0xf8ff0000

00003c78 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    3c78:	b480      	push	{r7}
    3c7a:	b082      	sub	sp, #8
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    3c80:	4a14      	ldr	r2, [pc, #80]	(3cd4 <RCC_HSEConfig+0x5c>)
    3c82:	4b14      	ldr	r3, [pc, #80]	(3cd4 <RCC_HSEConfig+0x5c>)
    3c84:	681b      	ldr	r3, [r3, #0]
    3c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3c8a:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    3c8c:	4a11      	ldr	r2, [pc, #68]	(3cd4 <RCC_HSEConfig+0x5c>)
    3c8e:	4b11      	ldr	r3, [pc, #68]	(3cd4 <RCC_HSEConfig+0x5c>)
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    3c96:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	603b      	str	r3, [r7, #0]
    3c9c:	683b      	ldr	r3, [r7, #0]
    3c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3ca2:	d004      	beq.n	3cae <RCC_HSEConfig+0x36>
    3ca4:	683b      	ldr	r3, [r7, #0]
    3ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    3caa:	d007      	beq.n	3cbc <RCC_HSEConfig+0x44>
    3cac:	e00c      	b.n	3cc8 <RCC_HSEConfig+0x50>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    3cae:	4a09      	ldr	r2, [pc, #36]	(3cd4 <RCC_HSEConfig+0x5c>)
    3cb0:	4b08      	ldr	r3, [pc, #32]	(3cd4 <RCC_HSEConfig+0x5c>)
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3cb8:	6013      	str	r3, [r2, #0]
    3cba:	e005      	b.n	3cc8 <RCC_HSEConfig+0x50>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    3cbc:	4a05      	ldr	r2, [pc, #20]	(3cd4 <RCC_HSEConfig+0x5c>)
    3cbe:	4b05      	ldr	r3, [pc, #20]	(3cd4 <RCC_HSEConfig+0x5c>)
    3cc0:	681b      	ldr	r3, [r3, #0]
    3cc2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    3cc6:	6013      	str	r3, [r2, #0]
      break;
      
    default:
      break;
  }
}
    3cc8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3ccc:	46bd      	mov	sp, r7
    3cce:	bc80      	pop	{r7}
    3cd0:	4770      	bx	lr
    3cd2:	46c0      	nop			(mov r8, r8)
    3cd4:	40021000 	.word	0x40021000

00003cd8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b083      	sub	sp, #12
    3cdc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    3cde:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ce2:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    3ce4:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ce8:	607b      	str	r3, [r7, #4]
  FlagStatus HSEStatus = RESET;
    3cea:	f04f 0300 	mov.w	r3, #0	; 0x0
    3cee:	60bb      	str	r3, [r7, #8]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    3cf0:	f04f 0031 	mov.w	r0, #49	; 0x31
    3cf4:	f000 fb36 	bl	4364 <RCC_GetFlagStatus>
    3cf8:	4603      	mov	r3, r0
    3cfa:	60bb      	str	r3, [r7, #8]
    StartUpCounter++;  
    3cfc:	683b      	ldr	r3, [r7, #0]
    3cfe:	f103 0301 	add.w	r3, r3, #1	; 0x1
    3d02:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
    3d04:	683b      	ldr	r3, [r7, #0]
    3d06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    3d0a:	d002      	beq.n	3d12 <RCC_WaitForHSEStartUp+0x3a>
    3d0c:	68bb      	ldr	r3, [r7, #8]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d0ee      	beq.n	3cf0 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    3d12:	f04f 0031 	mov.w	r0, #49	; 0x31
    3d16:	f000 fb25 	bl	4364 <RCC_GetFlagStatus>
    3d1a:	4603      	mov	r3, r0
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d003      	beq.n	3d28 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    3d20:	f04f 0301 	mov.w	r3, #1	; 0x1
    3d24:	607b      	str	r3, [r7, #4]
    3d26:	e002      	b.n	3d2e <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    3d28:	f04f 0300 	mov.w	r3, #0	; 0x0
    3d2c:	607b      	str	r3, [r7, #4]
  }  
  return (status);
    3d2e:	687b      	ldr	r3, [r7, #4]
}
    3d30:	4618      	mov	r0, r3
    3d32:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3d36:	46bd      	mov	sp, r7
    3d38:	bd80      	pop	{r7, pc}
    3d3a:	46c0      	nop			(mov r8, r8)

00003d3c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    3d3c:	b480      	push	{r7}
    3d3e:	b082      	sub	sp, #8
    3d40:	af00      	add	r7, sp, #0
    3d42:	4603      	mov	r3, r0
    3d44:	703b      	strb	r3, [r7, #0]
  uint32_t tmpreg = 0;
    3d46:	f04f 0300 	mov.w	r3, #0	; 0x0
    3d4a:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    3d4c:	4b0a      	ldr	r3, [pc, #40]	(3d78 <RCC_AdjustHSICalibrationValue+0x3c>)
    3d4e:	681b      	ldr	r3, [r3, #0]
    3d50:	607b      	str	r3, [r7, #4]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    3d58:	607b      	str	r3, [r7, #4]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    3d5a:	783b      	ldrb	r3, [r7, #0]
    3d5c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	ea43 0302 	orr.w	r3, r3, r2
    3d66:	607b      	str	r3, [r7, #4]
  /* Store the new value */
  RCC->CR = tmpreg;
    3d68:	4a03      	ldr	r2, [pc, #12]	(3d78 <RCC_AdjustHSICalibrationValue+0x3c>)
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	6013      	str	r3, [r2, #0]
}
    3d6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3d72:	46bd      	mov	sp, r7
    3d74:	bc80      	pop	{r7}
    3d76:	4770      	bx	lr
    3d78:	40021000 	.word	0x40021000

00003d7c <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    3d7c:	b480      	push	{r7}
    3d7e:	b081      	sub	sp, #4
    3d80:	af00      	add	r7, sp, #0
    3d82:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    3d84:	4a03      	ldr	r2, [pc, #12]	(3d94 <RCC_HSICmd+0x18>)
    3d86:	683b      	ldr	r3, [r7, #0]
    3d88:	6013      	str	r3, [r2, #0]
}
    3d8a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3d8e:	46bd      	mov	sp, r7
    3d90:	bc80      	pop	{r7}
    3d92:	4770      	bx	lr
    3d94:	42420000 	.word	0x42420000

00003d98 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    3d98:	b480      	push	{r7}
    3d9a:	b083      	sub	sp, #12
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	6078      	str	r0, [r7, #4]
    3da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    3da2:	f04f 0300 	mov.w	r3, #0	; 0x0
    3da6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    3da8:	4b0b      	ldr	r3, [pc, #44]	(3dd8 <RCC_PLLConfig+0x40>)
    3daa:	685b      	ldr	r3, [r3, #4]
    3dac:	60bb      	str	r3, [r7, #8]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    3dae:	68bb      	ldr	r3, [r7, #8]
    3db0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    3db4:	60bb      	str	r3, [r7, #8]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    3db6:	687a      	ldr	r2, [r7, #4]
    3db8:	683b      	ldr	r3, [r7, #0]
    3dba:	ea42 0203 	orr.w	r2, r2, r3
    3dbe:	68bb      	ldr	r3, [r7, #8]
    3dc0:	ea43 0302 	orr.w	r3, r3, r2
    3dc4:	60bb      	str	r3, [r7, #8]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    3dc6:	4a04      	ldr	r2, [pc, #16]	(3dd8 <RCC_PLLConfig+0x40>)
    3dc8:	68bb      	ldr	r3, [r7, #8]
    3dca:	6053      	str	r3, [r2, #4]
}
    3dcc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3dd0:	46bd      	mov	sp, r7
    3dd2:	bc80      	pop	{r7}
    3dd4:	4770      	bx	lr
    3dd6:	46c0      	nop			(mov r8, r8)
    3dd8:	40021000 	.word	0x40021000

00003ddc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    3ddc:	b480      	push	{r7}
    3dde:	b081      	sub	sp, #4
    3de0:	af00      	add	r7, sp, #0
    3de2:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    3de4:	4a03      	ldr	r2, [pc, #12]	(3df4 <RCC_PLLCmd+0x18>)
    3de6:	683b      	ldr	r3, [r7, #0]
    3de8:	6013      	str	r3, [r2, #0]
}
    3dea:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3dee:	46bd      	mov	sp, r7
    3df0:	bc80      	pop	{r7}
    3df2:	4770      	bx	lr
    3df4:	42420060 	.word	0x42420060

00003df8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    3df8:	b480      	push	{r7}
    3dfa:	b082      	sub	sp, #8
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6038      	str	r0, [r7, #0]
  uint32_t tmpreg = 0;
    3e00:	f04f 0300 	mov.w	r3, #0	; 0x0
    3e04:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    3e06:	4b0a      	ldr	r3, [pc, #40]	(3e30 <RCC_SYSCLKConfig+0x38>)
    3e08:	685b      	ldr	r3, [r3, #4]
    3e0a:	607b      	str	r3, [r7, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    3e0c:	687b      	ldr	r3, [r7, #4]
    3e0e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    3e12:	607b      	str	r3, [r7, #4]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    3e14:	687a      	ldr	r2, [r7, #4]
    3e16:	683b      	ldr	r3, [r7, #0]
    3e18:	ea42 0303 	orr.w	r3, r2, r3
    3e1c:	607b      	str	r3, [r7, #4]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    3e1e:	4a04      	ldr	r2, [pc, #16]	(3e30 <RCC_SYSCLKConfig+0x38>)
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	6053      	str	r3, [r2, #4]
}
    3e24:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3e28:	46bd      	mov	sp, r7
    3e2a:	bc80      	pop	{r7}
    3e2c:	4770      	bx	lr
    3e2e:	46c0      	nop			(mov r8, r8)
    3e30:	40021000 	.word	0x40021000

00003e34 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    3e34:	b480      	push	{r7}
    3e36:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    3e38:	4b04      	ldr	r3, [pc, #16]	(3e4c <RCC_GetSYSCLKSource+0x18>)
    3e3a:	685b      	ldr	r3, [r3, #4]
    3e3c:	b2db      	uxtb	r3, r3
    3e3e:	f003 030c 	and.w	r3, r3, #12	; 0xc
}
    3e42:	4618      	mov	r0, r3
    3e44:	46bd      	mov	sp, r7
    3e46:	bc80      	pop	{r7}
    3e48:	4770      	bx	lr
    3e4a:	46c0      	nop			(mov r8, r8)
    3e4c:	40021000 	.word	0x40021000

00003e50 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    3e50:	b480      	push	{r7}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6038      	str	r0, [r7, #0]
  uint32_t tmpreg = 0;
    3e58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3e5c:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    3e5e:	4b0a      	ldr	r3, [pc, #40]	(3e88 <RCC_HCLKConfig+0x38>)
    3e60:	685b      	ldr	r3, [r3, #4]
    3e62:	607b      	str	r3, [r7, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    3e64:	687b      	ldr	r3, [r7, #4]
    3e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3e6a:	607b      	str	r3, [r7, #4]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    3e6c:	687a      	ldr	r2, [r7, #4]
    3e6e:	683b      	ldr	r3, [r7, #0]
    3e70:	ea42 0303 	orr.w	r3, r2, r3
    3e74:	607b      	str	r3, [r7, #4]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    3e76:	4a04      	ldr	r2, [pc, #16]	(3e88 <RCC_HCLKConfig+0x38>)
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	6053      	str	r3, [r2, #4]
}
    3e7c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3e80:	46bd      	mov	sp, r7
    3e82:	bc80      	pop	{r7}
    3e84:	4770      	bx	lr
    3e86:	46c0      	nop			(mov r8, r8)
    3e88:	40021000 	.word	0x40021000

00003e8c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    3e8c:	b480      	push	{r7}
    3e8e:	b082      	sub	sp, #8
    3e90:	af00      	add	r7, sp, #0
    3e92:	6038      	str	r0, [r7, #0]
  uint32_t tmpreg = 0;
    3e94:	f04f 0300 	mov.w	r3, #0	; 0x0
    3e98:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    3e9a:	4b0a      	ldr	r3, [pc, #40]	(3ec4 <RCC_PCLK1Config+0x38>)
    3e9c:	685b      	ldr	r3, [r3, #4]
    3e9e:	607b      	str	r3, [r7, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3ea6:	607b      	str	r3, [r7, #4]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    3ea8:	687a      	ldr	r2, [r7, #4]
    3eaa:	683b      	ldr	r3, [r7, #0]
    3eac:	ea42 0303 	orr.w	r3, r2, r3
    3eb0:	607b      	str	r3, [r7, #4]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    3eb2:	4a04      	ldr	r2, [pc, #16]	(3ec4 <RCC_PCLK1Config+0x38>)
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	6053      	str	r3, [r2, #4]
}
    3eb8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3ebc:	46bd      	mov	sp, r7
    3ebe:	bc80      	pop	{r7}
    3ec0:	4770      	bx	lr
    3ec2:	46c0      	nop			(mov r8, r8)
    3ec4:	40021000 	.word	0x40021000

00003ec8 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    3ec8:	b480      	push	{r7}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6038      	str	r0, [r7, #0]
  uint32_t tmpreg = 0;
    3ed0:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ed4:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    3ed6:	4b0b      	ldr	r3, [pc, #44]	(3f04 <RCC_PCLK2Config+0x3c>)
    3ed8:	685b      	ldr	r3, [r3, #4]
    3eda:	607b      	str	r3, [r7, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    3edc:	687b      	ldr	r3, [r7, #4]
    3ede:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    3ee2:	607b      	str	r3, [r7, #4]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    3ee4:	683b      	ldr	r3, [r7, #0]
    3ee6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	ea43 0302 	orr.w	r3, r3, r2
    3ef0:	607b      	str	r3, [r7, #4]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    3ef2:	4a04      	ldr	r2, [pc, #16]	(3f04 <RCC_PCLK2Config+0x3c>)
    3ef4:	687b      	ldr	r3, [r7, #4]
    3ef6:	6053      	str	r3, [r2, #4]
}
    3ef8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3efc:	46bd      	mov	sp, r7
    3efe:	bc80      	pop	{r7}
    3f00:	4770      	bx	lr
    3f02:	46c0      	nop			(mov r8, r8)
    3f04:	40021000 	.word	0x40021000

00003f08 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    3f08:	b480      	push	{r7}
    3f0a:	b082      	sub	sp, #8
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	4603      	mov	r3, r0
    3f10:	6039      	str	r1, [r7, #0]
    3f12:	713b      	strb	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3f14:	683b      	ldr	r3, [r7, #0]
    3f16:	2b00      	cmp	r3, #0
    3f18:	d009      	beq.n	3f2e <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    3f1a:	490d      	ldr	r1, [pc, #52]	(3f50 <RCC_ITConfig+0x48>)
    3f1c:	4b0c      	ldr	r3, [pc, #48]	(3f50 <RCC_ITConfig+0x48>)
    3f1e:	781b      	ldrb	r3, [r3, #0]
    3f20:	b2da      	uxtb	r2, r3
    3f22:	793b      	ldrb	r3, [r7, #4]
    3f24:	ea42 0303 	orr.w	r3, r2, r3
    3f28:	b2db      	uxtb	r3, r3
    3f2a:	700b      	strb	r3, [r1, #0]
    3f2c:	e00b      	b.n	3f46 <RCC_ITConfig+0x3e>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    3f2e:	4908      	ldr	r1, [pc, #32]	(3f50 <RCC_ITConfig+0x48>)
    3f30:	4b07      	ldr	r3, [pc, #28]	(3f50 <RCC_ITConfig+0x48>)
    3f32:	781b      	ldrb	r3, [r3, #0]
    3f34:	b2da      	uxtb	r2, r3
    3f36:	793b      	ldrb	r3, [r7, #4]
    3f38:	ea6f 0303 	mvn.w	r3, r3
    3f3c:	b2db      	uxtb	r3, r3
    3f3e:	ea02 0303 	and.w	r3, r2, r3
    3f42:	b2db      	uxtb	r3, r3
    3f44:	700b      	strb	r3, [r1, #0]
  }
}
    3f46:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3f4a:	46bd      	mov	sp, r7
    3f4c:	bc80      	pop	{r7}
    3f4e:	4770      	bx	lr
    3f50:	40021009 	.word	0x40021009

00003f54 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
    3f54:	b480      	push	{r7}
    3f56:	b081      	sub	sp, #4
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    3f5c:	4a03      	ldr	r2, [pc, #12]	(3f6c <RCC_USBCLKConfig+0x18>)
    3f5e:	683b      	ldr	r3, [r7, #0]
    3f60:	6013      	str	r3, [r2, #0]
}
    3f62:	f107 0704 	add.w	r7, r7, #4	; 0x4
    3f66:	46bd      	mov	sp, r7
    3f68:	bc80      	pop	{r7}
    3f6a:	4770      	bx	lr
    3f6c:	424200d8 	.word	0x424200d8

00003f70 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    3f70:	b480      	push	{r7}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	6038      	str	r0, [r7, #0]
  uint32_t tmpreg = 0;
    3f78:	f04f 0300 	mov.w	r3, #0	; 0x0
    3f7c:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    3f7e:	4b0a      	ldr	r3, [pc, #40]	(3fa8 <RCC_ADCCLKConfig+0x38>)
    3f80:	685b      	ldr	r3, [r3, #4]
    3f82:	607b      	str	r3, [r7, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    3f8a:	607b      	str	r3, [r7, #4]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    3f8c:	687a      	ldr	r2, [r7, #4]
    3f8e:	683b      	ldr	r3, [r7, #0]
    3f90:	ea42 0303 	orr.w	r3, r2, r3
    3f94:	607b      	str	r3, [r7, #4]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    3f96:	4a04      	ldr	r2, [pc, #16]	(3fa8 <RCC_ADCCLKConfig+0x38>)
    3f98:	687b      	ldr	r3, [r7, #4]
    3f9a:	6053      	str	r3, [r2, #4]
}
    3f9c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3fa0:	46bd      	mov	sp, r7
    3fa2:	bc80      	pop	{r7}
    3fa4:	4770      	bx	lr
    3fa6:	46c0      	nop			(mov r8, r8)
    3fa8:	40021000 	.word	0x40021000

00003fac <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    3fac:	b480      	push	{r7}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	4603      	mov	r3, r0
    3fb4:	713b      	strb	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    3fb6:	4a0f      	ldr	r2, [pc, #60]	(3ff4 <RCC_LSEConfig+0x48>)
    3fb8:	f04f 0300 	mov.w	r3, #0	; 0x0
    3fbc:	7013      	strb	r3, [r2, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    3fbe:	4a0d      	ldr	r2, [pc, #52]	(3ff4 <RCC_LSEConfig+0x48>)
    3fc0:	f04f 0300 	mov.w	r3, #0	; 0x0
    3fc4:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    3fc6:	793b      	ldrb	r3, [r7, #4]
    3fc8:	603b      	str	r3, [r7, #0]
    3fca:	683b      	ldr	r3, [r7, #0]
    3fcc:	2b01      	cmp	r3, #1
    3fce:	d003      	beq.n	3fd8 <RCC_LSEConfig+0x2c>
    3fd0:	683b      	ldr	r3, [r7, #0]
    3fd2:	2b04      	cmp	r3, #4
    3fd4:	d005      	beq.n	3fe2 <RCC_LSEConfig+0x36>
    3fd6:	e008      	b.n	3fea <RCC_LSEConfig+0x3e>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    3fd8:	4b06      	ldr	r3, [pc, #24]	(3ff4 <RCC_LSEConfig+0x48>)
    3fda:	f04f 0201 	mov.w	r2, #1	; 0x1
    3fde:	701a      	strb	r2, [r3, #0]
    3fe0:	e003      	b.n	3fea <RCC_LSEConfig+0x3e>
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    3fe2:	4b04      	ldr	r3, [pc, #16]	(3ff4 <RCC_LSEConfig+0x48>)
    3fe4:	f04f 0205 	mov.w	r2, #5	; 0x5
    3fe8:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    3fea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3fee:	46bd      	mov	sp, r7
    3ff0:	bc80      	pop	{r7}
    3ff2:	4770      	bx	lr
    3ff4:	40021020 	.word	0x40021020

00003ff8 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    3ff8:	b480      	push	{r7}
    3ffa:	b081      	sub	sp, #4
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    4000:	4a03      	ldr	r2, [pc, #12]	(4010 <RCC_LSICmd+0x18>)
    4002:	683b      	ldr	r3, [r7, #0]
    4004:	6013      	str	r3, [r2, #0]
}
    4006:	f107 0704 	add.w	r7, r7, #4	; 0x4
    400a:	46bd      	mov	sp, r7
    400c:	bc80      	pop	{r7}
    400e:	4770      	bx	lr
    4010:	42420480 	.word	0x42420480

00004014 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    4014:	b480      	push	{r7}
    4016:	b081      	sub	sp, #4
    4018:	af00      	add	r7, sp, #0
    401a:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    401c:	4905      	ldr	r1, [pc, #20]	(4034 <RCC_RTCCLKConfig+0x20>)
    401e:	4b05      	ldr	r3, [pc, #20]	(4034 <RCC_RTCCLKConfig+0x20>)
    4020:	6a1a      	ldr	r2, [r3, #32]
    4022:	683b      	ldr	r3, [r7, #0]
    4024:	ea42 0303 	orr.w	r3, r2, r3
    4028:	620b      	str	r3, [r1, #32]
}
    402a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    402e:	46bd      	mov	sp, r7
    4030:	bc80      	pop	{r7}
    4032:	4770      	bx	lr
    4034:	40021000 	.word	0x40021000

00004038 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    4038:	b480      	push	{r7}
    403a:	b081      	sub	sp, #4
    403c:	af00      	add	r7, sp, #0
    403e:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    4040:	4a03      	ldr	r2, [pc, #12]	(4050 <RCC_RTCCLKCmd+0x18>)
    4042:	683b      	ldr	r3, [r7, #0]
    4044:	6013      	str	r3, [r2, #0]
}
    4046:	f107 0704 	add.w	r7, r7, #4	; 0x4
    404a:	46bd      	mov	sp, r7
    404c:	bc80      	pop	{r7}
    404e:	4770      	bx	lr
    4050:	4242043c 	.word	0x4242043c

00004054 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    4054:	b480      	push	{r7}
    4056:	b086      	sub	sp, #24
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    405c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4060:	60bb      	str	r3, [r7, #8]
    4062:	f04f 0300 	mov.w	r3, #0	; 0x0
    4066:	60fb      	str	r3, [r7, #12]
    4068:	f04f 0300 	mov.w	r3, #0	; 0x0
    406c:	613b      	str	r3, [r7, #16]
    406e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4072:	617b      	str	r3, [r7, #20]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    4074:	4b50      	ldr	r3, [pc, #320]	(41b8 <RCC_GetClocksFreq+0x164>)
    4076:	685b      	ldr	r3, [r3, #4]
    4078:	f003 030c 	and.w	r3, r3, #12	; 0xc
    407c:	60bb      	str	r3, [r7, #8]
  
  switch (tmp)
    407e:	68bb      	ldr	r3, [r7, #8]
    4080:	603b      	str	r3, [r7, #0]
    4082:	683b      	ldr	r3, [r7, #0]
    4084:	2b04      	cmp	r3, #4
    4086:	d009      	beq.n	409c <RCC_GetClocksFreq+0x48>
    4088:	683b      	ldr	r3, [r7, #0]
    408a:	2b08      	cmp	r3, #8
    408c:	d00a      	beq.n	40a4 <RCC_GetClocksFreq+0x50>
    408e:	683b      	ldr	r3, [r7, #0]
    4090:	2b00      	cmp	r3, #0
    4092:	d135      	bne.n	4100 <RCC_GetClocksFreq+0xac>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    4094:	687a      	ldr	r2, [r7, #4]
    4096:	4b49      	ldr	r3, [pc, #292]	(41bc <RCC_GetClocksFreq+0x168>)
    4098:	6013      	str	r3, [r2, #0]
    409a:	e034      	b.n	4106 <RCC_GetClocksFreq+0xb2>
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
    409c:	687a      	ldr	r2, [r7, #4]
    409e:	4b47      	ldr	r3, [pc, #284]	(41bc <RCC_GetClocksFreq+0x168>)
    40a0:	6013      	str	r3, [r2, #0]
    40a2:	e030      	b.n	4106 <RCC_GetClocksFreq+0xb2>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    40a4:	4b44      	ldr	r3, [pc, #272]	(41b8 <RCC_GetClocksFreq+0x164>)
    40a6:	685b      	ldr	r3, [r3, #4]
    40a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    40ac:	60fb      	str	r3, [r7, #12]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    40ae:	4b42      	ldr	r3, [pc, #264]	(41b8 <RCC_GetClocksFreq+0x164>)
    40b0:	685b      	ldr	r3, [r3, #4]
    40b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    40b6:	613b      	str	r3, [r7, #16]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    40b8:	68fb      	ldr	r3, [r7, #12]
    40ba:	ea4f 4393 	mov.w	r3, r3, lsr #18
    40be:	f103 0302 	add.w	r3, r3, #2	; 0x2
    40c2:	60fb      	str	r3, [r7, #12]
      
      if (pllsource == 0x00)
    40c4:	693b      	ldr	r3, [r7, #16]
    40c6:	2b00      	cmp	r3, #0
    40c8:	d106      	bne.n	40d8 <RCC_GetClocksFreq+0x84>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
    40ca:	68fa      	ldr	r2, [r7, #12]
    40cc:	4b3c      	ldr	r3, [pc, #240]	(41c0 <RCC_GetClocksFreq+0x16c>)
    40ce:	fb03 f202 	mul.w	r2, r3, r2
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	601a      	str	r2, [r3, #0]
    40d6:	e016      	b.n	4106 <RCC_GetClocksFreq+0xb2>
      }
      else
      {/* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    40d8:	4b37      	ldr	r3, [pc, #220]	(41b8 <RCC_GetClocksFreq+0x164>)
    40da:	685b      	ldr	r3, [r3, #4]
    40dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    40e0:	2b00      	cmp	r3, #0
    40e2:	d006      	beq.n	40f2 <RCC_GetClocksFreq+0x9e>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
    40e4:	68fa      	ldr	r2, [r7, #12]
    40e6:	4b36      	ldr	r3, [pc, #216]	(41c0 <RCC_GetClocksFreq+0x16c>)
    40e8:	fb03 f202 	mul.w	r2, r3, r2
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	601a      	str	r2, [r3, #0]
    40f0:	e009      	b.n	4106 <RCC_GetClocksFreq+0xb2>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
    40f2:	68fa      	ldr	r2, [r7, #12]
    40f4:	4b31      	ldr	r3, [pc, #196]	(41bc <RCC_GetClocksFreq+0x168>)
    40f6:	fb03 f202 	mul.w	r2, r3, r2
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	601a      	str	r2, [r3, #0]
    40fe:	e002      	b.n	4106 <RCC_GetClocksFreq+0xb2>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    4100:	687a      	ldr	r2, [r7, #4]
    4102:	4b2e      	ldr	r3, [pc, #184]	(41bc <RCC_GetClocksFreq+0x168>)
    4104:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    4106:	4b2c      	ldr	r3, [pc, #176]	(41b8 <RCC_GetClocksFreq+0x164>)
    4108:	685b      	ldr	r3, [r3, #4]
    410a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    410e:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
    4110:	68bb      	ldr	r3, [r7, #8]
    4112:	ea4f 1313 	mov.w	r3, r3, lsr #4
    4116:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    4118:	68ba      	ldr	r2, [r7, #8]
    411a:	4b2a      	ldr	r3, [pc, #168]	(41c4 <RCC_GetClocksFreq+0x170>)
    411c:	5c9b      	ldrb	r3, [r3, r2]
    411e:	b2db      	uxtb	r3, r3
    4120:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	681a      	ldr	r2, [r3, #0]
    4126:	697b      	ldr	r3, [r7, #20]
    4128:	fa22 f203 	lsr.w	r2, r2, r3
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    4130:	4b21      	ldr	r3, [pc, #132]	(41b8 <RCC_GetClocksFreq+0x164>)
    4132:	685b      	ldr	r3, [r3, #4]
    4134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4138:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
    413a:	68bb      	ldr	r3, [r7, #8]
    413c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4140:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    4142:	68ba      	ldr	r2, [r7, #8]
    4144:	4b1f      	ldr	r3, [pc, #124]	(41c4 <RCC_GetClocksFreq+0x170>)
    4146:	5c9b      	ldrb	r3, [r3, r2]
    4148:	b2db      	uxtb	r3, r3
    414a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	685a      	ldr	r2, [r3, #4]
    4150:	697b      	ldr	r3, [r7, #20]
    4152:	fa22 f203 	lsr.w	r2, r2, r3
    4156:	687b      	ldr	r3, [r7, #4]
    4158:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    415a:	4b17      	ldr	r3, [pc, #92]	(41b8 <RCC_GetClocksFreq+0x164>)
    415c:	685b      	ldr	r3, [r3, #4]
    415e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    4162:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
    4164:	68bb      	ldr	r3, [r7, #8]
    4166:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    416a:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    416c:	68ba      	ldr	r2, [r7, #8]
    416e:	4b15      	ldr	r3, [pc, #84]	(41c4 <RCC_GetClocksFreq+0x170>)
    4170:	5c9b      	ldrb	r3, [r3, r2]
    4172:	b2db      	uxtb	r3, r3
    4174:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	685a      	ldr	r2, [r3, #4]
    417a:	697b      	ldr	r3, [r7, #20]
    417c:	fa22 f203 	lsr.w	r2, r2, r3
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    4184:	4b0c      	ldr	r3, [pc, #48]	(41b8 <RCC_GetClocksFreq+0x164>)
    4186:	685b      	ldr	r3, [r3, #4]
    4188:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    418c:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
    418e:	68bb      	ldr	r3, [r7, #8]
    4190:	ea4f 3393 	mov.w	r3, r3, lsr #14
    4194:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
    4196:	68ba      	ldr	r2, [r7, #8]
    4198:	4b0b      	ldr	r3, [pc, #44]	(41c8 <RCC_GetClocksFreq+0x174>)
    419a:	5c9b      	ldrb	r3, [r3, r2]
    419c:	b2db      	uxtb	r3, r3
    419e:	617b      	str	r3, [r7, #20]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	68da      	ldr	r2, [r3, #12]
    41a4:	697b      	ldr	r3, [r7, #20]
    41a6:	fbb2 f2f3 	udiv	r2, r2, r3
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	611a      	str	r2, [r3, #16]
}
    41ae:	f107 0718 	add.w	r7, r7, #24	; 0x18
    41b2:	46bd      	mov	sp, r7
    41b4:	bc80      	pop	{r7}
    41b6:	4770      	bx	lr
    41b8:	40021000 	.word	0x40021000
    41bc:	007a1200 	.word	0x007a1200
    41c0:	003d0900 	.word	0x003d0900
    41c4:	200000e8 	.word	0x200000e8
    41c8:	200000f8 	.word	0x200000f8

000041cc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    41cc:	b480      	push	{r7}
    41ce:	b082      	sub	sp, #8
    41d0:	af00      	add	r7, sp, #0
    41d2:	6078      	str	r0, [r7, #4]
    41d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    41d6:	683b      	ldr	r3, [r7, #0]
    41d8:	2b00      	cmp	r3, #0
    41da:	d007      	beq.n	41ec <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    41dc:	490a      	ldr	r1, [pc, #40]	(4208 <RCC_AHBPeriphClockCmd+0x3c>)
    41de:	4b0a      	ldr	r3, [pc, #40]	(4208 <RCC_AHBPeriphClockCmd+0x3c>)
    41e0:	695a      	ldr	r2, [r3, #20]
    41e2:	687b      	ldr	r3, [r7, #4]
    41e4:	ea42 0303 	orr.w	r3, r2, r3
    41e8:	614b      	str	r3, [r1, #20]
    41ea:	e008      	b.n	41fe <RCC_AHBPeriphClockCmd+0x32>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    41ec:	4906      	ldr	r1, [pc, #24]	(4208 <RCC_AHBPeriphClockCmd+0x3c>)
    41ee:	4b06      	ldr	r3, [pc, #24]	(4208 <RCC_AHBPeriphClockCmd+0x3c>)
    41f0:	695a      	ldr	r2, [r3, #20]
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	ea6f 0303 	mvn.w	r3, r3
    41f8:	ea02 0303 	and.w	r3, r2, r3
    41fc:	614b      	str	r3, [r1, #20]
  }
}
    41fe:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4202:	46bd      	mov	sp, r7
    4204:	bc80      	pop	{r7}
    4206:	4770      	bx	lr
    4208:	40021000 	.word	0x40021000

0000420c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    420c:	b480      	push	{r7}
    420e:	b082      	sub	sp, #8
    4210:	af00      	add	r7, sp, #0
    4212:	6078      	str	r0, [r7, #4]
    4214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4216:	683b      	ldr	r3, [r7, #0]
    4218:	2b00      	cmp	r3, #0
    421a:	d007      	beq.n	422c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    421c:	490a      	ldr	r1, [pc, #40]	(4248 <RCC_APB2PeriphClockCmd+0x3c>)
    421e:	4b0a      	ldr	r3, [pc, #40]	(4248 <RCC_APB2PeriphClockCmd+0x3c>)
    4220:	699a      	ldr	r2, [r3, #24]
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	ea42 0303 	orr.w	r3, r2, r3
    4228:	618b      	str	r3, [r1, #24]
    422a:	e008      	b.n	423e <RCC_APB2PeriphClockCmd+0x32>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    422c:	4906      	ldr	r1, [pc, #24]	(4248 <RCC_APB2PeriphClockCmd+0x3c>)
    422e:	4b06      	ldr	r3, [pc, #24]	(4248 <RCC_APB2PeriphClockCmd+0x3c>)
    4230:	699a      	ldr	r2, [r3, #24]
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	ea6f 0303 	mvn.w	r3, r3
    4238:	ea02 0303 	and.w	r3, r2, r3
    423c:	618b      	str	r3, [r1, #24]
  }
}
    423e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4242:	46bd      	mov	sp, r7
    4244:	bc80      	pop	{r7}
    4246:	4770      	bx	lr
    4248:	40021000 	.word	0x40021000

0000424c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    424c:	b480      	push	{r7}
    424e:	b082      	sub	sp, #8
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
    4254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4256:	683b      	ldr	r3, [r7, #0]
    4258:	2b00      	cmp	r3, #0
    425a:	d007      	beq.n	426c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    425c:	490a      	ldr	r1, [pc, #40]	(4288 <RCC_APB1PeriphClockCmd+0x3c>)
    425e:	4b0a      	ldr	r3, [pc, #40]	(4288 <RCC_APB1PeriphClockCmd+0x3c>)
    4260:	69da      	ldr	r2, [r3, #28]
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	ea42 0303 	orr.w	r3, r2, r3
    4268:	61cb      	str	r3, [r1, #28]
    426a:	e008      	b.n	427e <RCC_APB1PeriphClockCmd+0x32>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    426c:	4906      	ldr	r1, [pc, #24]	(4288 <RCC_APB1PeriphClockCmd+0x3c>)
    426e:	4b06      	ldr	r3, [pc, #24]	(4288 <RCC_APB1PeriphClockCmd+0x3c>)
    4270:	69da      	ldr	r2, [r3, #28]
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	ea6f 0303 	mvn.w	r3, r3
    4278:	ea02 0303 	and.w	r3, r2, r3
    427c:	61cb      	str	r3, [r1, #28]
  }
}
    427e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4282:	46bd      	mov	sp, r7
    4284:	bc80      	pop	{r7}
    4286:	4770      	bx	lr
    4288:	40021000 	.word	0x40021000

0000428c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    428c:	b480      	push	{r7}
    428e:	b082      	sub	sp, #8
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
    4294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4296:	683b      	ldr	r3, [r7, #0]
    4298:	2b00      	cmp	r3, #0
    429a:	d007      	beq.n	42ac <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    429c:	490a      	ldr	r1, [pc, #40]	(42c8 <RCC_APB2PeriphResetCmd+0x3c>)
    429e:	4b0a      	ldr	r3, [pc, #40]	(42c8 <RCC_APB2PeriphResetCmd+0x3c>)
    42a0:	68da      	ldr	r2, [r3, #12]
    42a2:	687b      	ldr	r3, [r7, #4]
    42a4:	ea42 0303 	orr.w	r3, r2, r3
    42a8:	60cb      	str	r3, [r1, #12]
    42aa:	e008      	b.n	42be <RCC_APB2PeriphResetCmd+0x32>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    42ac:	4906      	ldr	r1, [pc, #24]	(42c8 <RCC_APB2PeriphResetCmd+0x3c>)
    42ae:	4b06      	ldr	r3, [pc, #24]	(42c8 <RCC_APB2PeriphResetCmd+0x3c>)
    42b0:	68da      	ldr	r2, [r3, #12]
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	ea6f 0303 	mvn.w	r3, r3
    42b8:	ea02 0303 	and.w	r3, r2, r3
    42bc:	60cb      	str	r3, [r1, #12]
  }
}
    42be:	f107 0708 	add.w	r7, r7, #8	; 0x8
    42c2:	46bd      	mov	sp, r7
    42c4:	bc80      	pop	{r7}
    42c6:	4770      	bx	lr
    42c8:	40021000 	.word	0x40021000

000042cc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    42cc:	b480      	push	{r7}
    42ce:	b082      	sub	sp, #8
    42d0:	af00      	add	r7, sp, #0
    42d2:	6078      	str	r0, [r7, #4]
    42d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    42d6:	683b      	ldr	r3, [r7, #0]
    42d8:	2b00      	cmp	r3, #0
    42da:	d007      	beq.n	42ec <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    42dc:	490a      	ldr	r1, [pc, #40]	(4308 <RCC_APB1PeriphResetCmd+0x3c>)
    42de:	4b0a      	ldr	r3, [pc, #40]	(4308 <RCC_APB1PeriphResetCmd+0x3c>)
    42e0:	691a      	ldr	r2, [r3, #16]
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	ea42 0303 	orr.w	r3, r2, r3
    42e8:	610b      	str	r3, [r1, #16]
    42ea:	e008      	b.n	42fe <RCC_APB1PeriphResetCmd+0x32>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    42ec:	4906      	ldr	r1, [pc, #24]	(4308 <RCC_APB1PeriphResetCmd+0x3c>)
    42ee:	4b06      	ldr	r3, [pc, #24]	(4308 <RCC_APB1PeriphResetCmd+0x3c>)
    42f0:	691a      	ldr	r2, [r3, #16]
    42f2:	687b      	ldr	r3, [r7, #4]
    42f4:	ea6f 0303 	mvn.w	r3, r3
    42f8:	ea02 0303 	and.w	r3, r2, r3
    42fc:	610b      	str	r3, [r1, #16]
  }
}
    42fe:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4302:	46bd      	mov	sp, r7
    4304:	bc80      	pop	{r7}
    4306:	4770      	bx	lr
    4308:	40021000 	.word	0x40021000

0000430c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    430c:	b480      	push	{r7}
    430e:	b081      	sub	sp, #4
    4310:	af00      	add	r7, sp, #0
    4312:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    4314:	4a03      	ldr	r2, [pc, #12]	(4324 <RCC_BackupResetCmd+0x18>)
    4316:	683b      	ldr	r3, [r7, #0]
    4318:	6013      	str	r3, [r2, #0]
}
    431a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    431e:	46bd      	mov	sp, r7
    4320:	bc80      	pop	{r7}
    4322:	4770      	bx	lr
    4324:	42420440 	.word	0x42420440

00004328 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    4328:	b480      	push	{r7}
    432a:	b081      	sub	sp, #4
    432c:	af00      	add	r7, sp, #0
    432e:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    4330:	4a03      	ldr	r2, [pc, #12]	(4340 <RCC_ClockSecuritySystemCmd+0x18>)
    4332:	683b      	ldr	r3, [r7, #0]
    4334:	6013      	str	r3, [r2, #0]
}
    4336:	f107 0704 	add.w	r7, r7, #4	; 0x4
    433a:	46bd      	mov	sp, r7
    433c:	bc80      	pop	{r7}
    433e:	4770      	bx	lr
    4340:	4242004c 	.word	0x4242004c

00004344 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    4344:	b480      	push	{r7}
    4346:	b081      	sub	sp, #4
    4348:	af00      	add	r7, sp, #0
    434a:	4603      	mov	r3, r0
    434c:	703b      	strb	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    434e:	4a04      	ldr	r2, [pc, #16]	(4360 <RCC_MCOConfig+0x1c>)
    4350:	783b      	ldrb	r3, [r7, #0]
    4352:	7013      	strb	r3, [r2, #0]
}
    4354:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4358:	46bd      	mov	sp, r7
    435a:	bc80      	pop	{r7}
    435c:	4770      	bx	lr
    435e:	46c0      	nop			(mov r8, r8)
    4360:	40021007 	.word	0x40021007

00004364 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    4364:	b480      	push	{r7}
    4366:	b084      	sub	sp, #16
    4368:	af00      	add	r7, sp, #0
    436a:	4603      	mov	r3, r0
    436c:	703b      	strb	r3, [r7, #0]
  uint32_t tmp = 0;
    436e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4372:	607b      	str	r3, [r7, #4]
  uint32_t statusreg = 0;
    4374:	f04f 0300 	mov.w	r3, #0	; 0x0
    4378:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
    437a:	f04f 0300 	mov.w	r3, #0	; 0x0
    437e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    4380:	783b      	ldrb	r3, [r7, #0]
    4382:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4386:	b2db      	uxtb	r3, r3
    4388:	607b      	str	r3, [r7, #4]
  if (tmp == 1)               /* The flag to check is in CR register */
    438a:	687b      	ldr	r3, [r7, #4]
    438c:	2b01      	cmp	r3, #1
    438e:	d103      	bne.n	4398 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
    4390:	4b14      	ldr	r3, [pc, #80]	(43e4 <RCC_GetFlagStatus+0x80>)
    4392:	681b      	ldr	r3, [r3, #0]
    4394:	60bb      	str	r3, [r7, #8]
    4396:	e009      	b.n	43ac <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	2b02      	cmp	r3, #2
    439c:	d103      	bne.n	43a6 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
    439e:	4b11      	ldr	r3, [pc, #68]	(43e4 <RCC_GetFlagStatus+0x80>)
    43a0:	6a1b      	ldr	r3, [r3, #32]
    43a2:	60bb      	str	r3, [r7, #8]
    43a4:	e002      	b.n	43ac <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    43a6:	4b0f      	ldr	r3, [pc, #60]	(43e4 <RCC_GetFlagStatus+0x80>)
    43a8:	6a5b      	ldr	r3, [r3, #36]
    43aa:	60bb      	str	r3, [r7, #8]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    43ac:	783b      	ldrb	r3, [r7, #0]
    43ae:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    43b2:	607b      	str	r3, [r7, #4]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    43b4:	687a      	ldr	r2, [r7, #4]
    43b6:	f04f 0301 	mov.w	r3, #1	; 0x1
    43ba:	fa03 f202 	lsl.w	r2, r3, r2
    43be:	68bb      	ldr	r3, [r7, #8]
    43c0:	ea02 0303 	and.w	r3, r2, r3
    43c4:	2b00      	cmp	r3, #0
    43c6:	d003      	beq.n	43d0 <RCC_GetFlagStatus+0x6c>
  {
    bitstatus = SET;
    43c8:	f04f 0301 	mov.w	r3, #1	; 0x1
    43cc:	60fb      	str	r3, [r7, #12]
    43ce:	e002      	b.n	43d6 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
    43d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    43d4:	60fb      	str	r3, [r7, #12]
  }

  /* Return the flag status */
  return bitstatus;
    43d6:	68fb      	ldr	r3, [r7, #12]
}
    43d8:	4618      	mov	r0, r3
    43da:	f107 0710 	add.w	r7, r7, #16	; 0x10
    43de:	46bd      	mov	sp, r7
    43e0:	bc80      	pop	{r7}
    43e2:	4770      	bx	lr
    43e4:	40021000 	.word	0x40021000

000043e8 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    43e8:	b480      	push	{r7}
    43ea:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    43ec:	4a04      	ldr	r2, [pc, #16]	(4400 <RCC_ClearFlag+0x18>)
    43ee:	4b04      	ldr	r3, [pc, #16]	(4400 <RCC_ClearFlag+0x18>)
    43f0:	6a5b      	ldr	r3, [r3, #36]
    43f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    43f6:	6253      	str	r3, [r2, #36]
}
    43f8:	46bd      	mov	sp, r7
    43fa:	bc80      	pop	{r7}
    43fc:	4770      	bx	lr
    43fe:	46c0      	nop			(mov r8, r8)
    4400:	40021000 	.word	0x40021000

00004404 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    4404:	b480      	push	{r7}
    4406:	b082      	sub	sp, #8
    4408:	af00      	add	r7, sp, #0
    440a:	4603      	mov	r3, r0
    440c:	703b      	strb	r3, [r7, #0]
  ITStatus bitstatus = RESET;
    440e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4412:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    4414:	4b0a      	ldr	r3, [pc, #40]	(4440 <RCC_GetITStatus+0x3c>)
    4416:	689a      	ldr	r2, [r3, #8]
    4418:	783b      	ldrb	r3, [r7, #0]
    441a:	ea02 0303 	and.w	r3, r2, r3
    441e:	2b00      	cmp	r3, #0
    4420:	d003      	beq.n	442a <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    4422:	f04f 0301 	mov.w	r3, #1	; 0x1
    4426:	607b      	str	r3, [r7, #4]
    4428:	e002      	b.n	4430 <RCC_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
    442a:	f04f 0300 	mov.w	r3, #0	; 0x0
    442e:	607b      	str	r3, [r7, #4]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    4430:	687b      	ldr	r3, [r7, #4]
}
    4432:	4618      	mov	r0, r3
    4434:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4438:	46bd      	mov	sp, r7
    443a:	bc80      	pop	{r7}
    443c:	4770      	bx	lr
    443e:	46c0      	nop			(mov r8, r8)
    4440:	40021000 	.word	0x40021000

00004444 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    4444:	b480      	push	{r7}
    4446:	b081      	sub	sp, #4
    4448:	af00      	add	r7, sp, #0
    444a:	4603      	mov	r3, r0
    444c:	703b      	strb	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    444e:	4a04      	ldr	r2, [pc, #16]	(4460 <RCC_ClearITPendingBit+0x1c>)
    4450:	783b      	ldrb	r3, [r7, #0]
    4452:	7013      	strb	r3, [r2, #0]
}
    4454:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4458:	46bd      	mov	sp, r7
    445a:	bc80      	pop	{r7}
    445c:	4770      	bx	lr
    445e:	46c0      	nop			(mov r8, r8)
    4460:	4002100a 	.word	0x4002100a

00004464 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
    4464:	b480      	push	{r7}
    4466:	b082      	sub	sp, #8
    4468:	af00      	add	r7, sp, #0
    446a:	6038      	str	r0, [r7, #0]
  uint32_t tmpreg = 0;
    446c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4470:	607b      	str	r3, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
    4472:	4b0a      	ldr	r3, [pc, #40]	(449c <FLASH_SetLatency+0x38>)
    4474:	681b      	ldr	r3, [r3, #0]
    4476:	607b      	str	r3, [r7, #4]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    447e:	607b      	str	r3, [r7, #4]
  tmpreg |= FLASH_Latency;
    4480:	687a      	ldr	r2, [r7, #4]
    4482:	683b      	ldr	r3, [r7, #0]
    4484:	ea42 0303 	orr.w	r3, r2, r3
    4488:	607b      	str	r3, [r7, #4]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
    448a:	4a04      	ldr	r2, [pc, #16]	(449c <FLASH_SetLatency+0x38>)
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	6013      	str	r3, [r2, #0]
}
    4490:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	46c0      	nop			(mov r8, r8)
    449c:	40022000 	.word	0x40022000

000044a0 <FLASH_HalfCycleAccessCmd>:
  *     @arg FLASH_HalfCycleAccess_Enable: FLASH Half Cycle Enable
  *     @arg FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
  * @retval None
  */
void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
{
    44a0:	b480      	push	{r7}
    44a2:	b081      	sub	sp, #4
    44a4:	af00      	add	r7, sp, #0
    44a6:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
    44a8:	4a08      	ldr	r2, [pc, #32]	(44cc <FLASH_HalfCycleAccessCmd+0x2c>)
    44aa:	4b08      	ldr	r3, [pc, #32]	(44cc <FLASH_HalfCycleAccessCmd+0x2c>)
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    44b2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
    44b4:	4905      	ldr	r1, [pc, #20]	(44cc <FLASH_HalfCycleAccessCmd+0x2c>)
    44b6:	4b05      	ldr	r3, [pc, #20]	(44cc <FLASH_HalfCycleAccessCmd+0x2c>)
    44b8:	681a      	ldr	r2, [r3, #0]
    44ba:	683b      	ldr	r3, [r7, #0]
    44bc:	ea42 0303 	orr.w	r3, r2, r3
    44c0:	600b      	str	r3, [r1, #0]
}
    44c2:	f107 0704 	add.w	r7, r7, #4	; 0x4
    44c6:	46bd      	mov	sp, r7
    44c8:	bc80      	pop	{r7}
    44ca:	4770      	bx	lr
    44cc:	40022000 	.word	0x40022000

000044d0 <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
    44d0:	b480      	push	{r7}
    44d2:	b081      	sub	sp, #4
    44d4:	af00      	add	r7, sp, #0
    44d6:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
    44d8:	4a08      	ldr	r2, [pc, #32]	(44fc <FLASH_PrefetchBufferCmd+0x2c>)
    44da:	4b08      	ldr	r3, [pc, #32]	(44fc <FLASH_PrefetchBufferCmd+0x2c>)
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	f023 0310 	bic.w	r3, r3, #16	; 0x10
    44e2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
    44e4:	4905      	ldr	r1, [pc, #20]	(44fc <FLASH_PrefetchBufferCmd+0x2c>)
    44e6:	4b05      	ldr	r3, [pc, #20]	(44fc <FLASH_PrefetchBufferCmd+0x2c>)
    44e8:	681a      	ldr	r2, [r3, #0]
    44ea:	683b      	ldr	r3, [r7, #0]
    44ec:	ea42 0303 	orr.w	r3, r2, r3
    44f0:	600b      	str	r3, [r1, #0]
}
    44f2:	f107 0704 	add.w	r7, r7, #4	; 0x4
    44f6:	46bd      	mov	sp, r7
    44f8:	bc80      	pop	{r7}
    44fa:	4770      	bx	lr
    44fc:	40022000 	.word	0x40022000

00004500 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH Program Erase Controller.
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
    4500:	b480      	push	{r7}
    4502:	af00      	add	r7, sp, #0
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
    4504:	4a04      	ldr	r2, [pc, #16]	(4518 <FLASH_Unlock+0x18>)
    4506:	4b05      	ldr	r3, [pc, #20]	(451c <FLASH_Unlock+0x1c>)
    4508:	6053      	str	r3, [r2, #4]
  FLASH->KEYR = FLASH_KEY2;
    450a:	4a03      	ldr	r2, [pc, #12]	(4518 <FLASH_Unlock+0x18>)
    450c:	4b04      	ldr	r3, [pc, #16]	(4520 <FLASH_Unlock+0x20>)
    450e:	6053      	str	r3, [r2, #4]
}
    4510:	46bd      	mov	sp, r7
    4512:	bc80      	pop	{r7}
    4514:	4770      	bx	lr
    4516:	46c0      	nop			(mov r8, r8)
    4518:	40022000 	.word	0x40022000
    451c:	45670123 	.word	0x45670123
    4520:	cdef89ab 	.word	0xcdef89ab

00004524 <FLASH_Lock>:
  * @brief  Locks the FLASH Program Erase Controller.
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
    4524:	b480      	push	{r7}
    4526:	af00      	add	r7, sp, #0
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
    4528:	4a04      	ldr	r2, [pc, #16]	(453c <FLASH_Lock+0x18>)
    452a:	4b04      	ldr	r3, [pc, #16]	(453c <FLASH_Lock+0x18>)
    452c:	691b      	ldr	r3, [r3, #16]
    452e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4532:	6113      	str	r3, [r2, #16]
}
    4534:	46bd      	mov	sp, r7
    4536:	bc80      	pop	{r7}
    4538:	4770      	bx	lr
    453a:	46c0      	nop			(mov r8, r8)
    453c:	40022000 	.word	0x40022000

00004540 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
    4540:	b580      	push	{r7, lr}
    4542:	b082      	sub	sp, #8
    4544:	af00      	add	r7, sp, #0
    4546:	6038      	str	r0, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
    4548:	f04f 0304 	mov.w	r3, #4	; 0x4
    454c:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
    454e:	f640 70ff 	movw	r0, #4095	; 0xfff
    4552:	f000 fbc9 	bl	4ce8 <FLASH_WaitForLastOperation>
    4556:	4603      	mov	r3, r0
    4558:	607b      	str	r3, [r7, #4]
  
  if(status == FLASH_COMPLETE)
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	2b04      	cmp	r3, #4
    455e:	d11f      	bne.n	45a0 <FLASH_ErasePage+0x60>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
    4560:	4a12      	ldr	r2, [pc, #72]	(45ac <FLASH_ErasePage+0x6c>)
    4562:	4b12      	ldr	r3, [pc, #72]	(45ac <FLASH_ErasePage+0x6c>)
    4564:	691b      	ldr	r3, [r3, #16]
    4566:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    456a:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
    456c:	4a0f      	ldr	r2, [pc, #60]	(45ac <FLASH_ErasePage+0x6c>)
    456e:	683b      	ldr	r3, [r7, #0]
    4570:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
    4572:	4a0e      	ldr	r2, [pc, #56]	(45ac <FLASH_ErasePage+0x6c>)
    4574:	4b0d      	ldr	r3, [pc, #52]	(45ac <FLASH_ErasePage+0x6c>)
    4576:	691b      	ldr	r3, [r3, #16]
    4578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    457c:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
    457e:	f640 70ff 	movw	r0, #4095	; 0xfff
    4582:	f000 fbb1 	bl	4ce8 <FLASH_WaitForLastOperation>
    4586:	4603      	mov	r3, r0
    4588:	607b      	str	r3, [r7, #4]
    if(status != FLASH_TIMEOUT)
    458a:	687b      	ldr	r3, [r7, #4]
    458c:	2b05      	cmp	r3, #5
    458e:	d007      	beq.n	45a0 <FLASH_ErasePage+0x60>
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
    4590:	4906      	ldr	r1, [pc, #24]	(45ac <FLASH_ErasePage+0x6c>)
    4592:	4b06      	ldr	r3, [pc, #24]	(45ac <FLASH_ErasePage+0x6c>)
    4594:	691a      	ldr	r2, [r3, #16]
    4596:	f641 73fd 	movw	r3, #8189	; 0x1ffd
    459a:	ea02 0303 	and.w	r3, r2, r3
    459e:	610b      	str	r3, [r1, #16]
    }
  }
  /* Return the Erase Status */
  return status;
    45a0:	687b      	ldr	r3, [r7, #4]
}
    45a2:	4618      	mov	r0, r3
    45a4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    45a8:	46bd      	mov	sp, r7
    45aa:	bd80      	pop	{r7, pc}
    45ac:	40022000 	.word	0x40022000

000045b0 <FLASH_EraseAllPages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllPages(void)
{
    45b0:	b580      	push	{r7, lr}
    45b2:	b081      	sub	sp, #4
    45b4:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
    45b6:	f04f 0304 	mov.w	r3, #4	; 0x4
    45ba:	603b      	str	r3, [r7, #0]
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
    45bc:	f640 70ff 	movw	r0, #4095	; 0xfff
    45c0:	f000 fb92 	bl	4ce8 <FLASH_WaitForLastOperation>
    45c4:	4603      	mov	r3, r0
    45c6:	603b      	str	r3, [r7, #0]
  
  if(status == FLASH_COMPLETE)
    45c8:	683b      	ldr	r3, [r7, #0]
    45ca:	2b04      	cmp	r3, #4
    45cc:	d11c      	bne.n	4608 <FLASH_EraseAllPages+0x58>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
    45ce:	4a11      	ldr	r2, [pc, #68]	(4614 <FLASH_EraseAllPages+0x64>)
    45d0:	4b10      	ldr	r3, [pc, #64]	(4614 <FLASH_EraseAllPages+0x64>)
    45d2:	691b      	ldr	r3, [r3, #16]
    45d4:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    45d8:	6113      	str	r3, [r2, #16]
     FLASH->CR |= CR_STRT_Set;
    45da:	4a0e      	ldr	r2, [pc, #56]	(4614 <FLASH_EraseAllPages+0x64>)
    45dc:	4b0d      	ldr	r3, [pc, #52]	(4614 <FLASH_EraseAllPages+0x64>)
    45de:	691b      	ldr	r3, [r3, #16]
    45e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    45e4:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
    45e6:	f640 70ff 	movw	r0, #4095	; 0xfff
    45ea:	f000 fb7d 	bl	4ce8 <FLASH_WaitForLastOperation>
    45ee:	4603      	mov	r3, r0
    45f0:	603b      	str	r3, [r7, #0]
    if(status != FLASH_TIMEOUT)
    45f2:	683b      	ldr	r3, [r7, #0]
    45f4:	2b05      	cmp	r3, #5
    45f6:	d007      	beq.n	4608 <FLASH_EraseAllPages+0x58>
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
    45f8:	4906      	ldr	r1, [pc, #24]	(4614 <FLASH_EraseAllPages+0x64>)
    45fa:	4b06      	ldr	r3, [pc, #24]	(4614 <FLASH_EraseAllPages+0x64>)
    45fc:	691a      	ldr	r2, [r3, #16]
    45fe:	f641 73fb 	movw	r3, #8187	; 0x1ffb
    4602:	ea02 0303 	and.w	r3, r2, r3
    4606:	610b      	str	r3, [r1, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
    4608:	683b      	ldr	r3, [r7, #0]
}
    460a:	4618      	mov	r0, r3
    460c:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4610:	46bd      	mov	sp, r7
    4612:	bd80      	pop	{r7, pc}
    4614:	40022000 	.word	0x40022000

00004618 <FLASH_EraseOptionBytes>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
    4618:	b580      	push	{r7, lr}
    461a:	b081      	sub	sp, #4
    461c:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
    461e:	f04f 0304 	mov.w	r3, #4	; 0x4
    4622:	603b      	str	r3, [r7, #0]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
    4624:	f640 70ff 	movw	r0, #4095	; 0xfff
    4628:	f000 fb5e 	bl	4ce8 <FLASH_WaitForLastOperation>
    462c:	4603      	mov	r3, r0
    462e:	603b      	str	r3, [r7, #0]
  if(status == FLASH_COMPLETE)
    4630:	683b      	ldr	r3, [r7, #0]
    4632:	2b04      	cmp	r3, #4
    4634:	d149      	bne.n	46ca <FLASH_EraseOptionBytes+0xb2>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    4636:	4a28      	ldr	r2, [pc, #160]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    4638:	4b28      	ldr	r3, [pc, #160]	(46dc <FLASH_EraseOptionBytes+0xc4>)
    463a:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
    463c:	4a26      	ldr	r2, [pc, #152]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    463e:	4b28      	ldr	r3, [pc, #160]	(46e0 <FLASH_EraseOptionBytes+0xc8>)
    4640:	6093      	str	r3, [r2, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    4642:	4a25      	ldr	r2, [pc, #148]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    4644:	4b24      	ldr	r3, [pc, #144]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    4646:	691b      	ldr	r3, [r3, #16]
    4648:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    464c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= CR_STRT_Set;
    464e:	4a22      	ldr	r2, [pc, #136]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    4650:	4b21      	ldr	r3, [pc, #132]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    4652:	691b      	ldr	r3, [r3, #16]
    4654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4658:	6113      	str	r3, [r2, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
    465a:	f640 70ff 	movw	r0, #4095	; 0xfff
    465e:	f000 fb43 	bl	4ce8 <FLASH_WaitForLastOperation>
    4662:	4603      	mov	r3, r0
    4664:	603b      	str	r3, [r7, #0]
    
    if(status == FLASH_COMPLETE)
    4666:	683b      	ldr	r3, [r7, #0]
    4668:	2b04      	cmp	r3, #4
    466a:	d123      	bne.n	46b4 <FLASH_EraseOptionBytes+0x9c>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
    466c:	491a      	ldr	r1, [pc, #104]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    466e:	4b1a      	ldr	r3, [pc, #104]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    4670:	691a      	ldr	r2, [r3, #16]
    4672:	f641 73df 	movw	r3, #8159	; 0x1fdf
    4676:	ea02 0303 	and.w	r3, r2, r3
    467a:	610b      	str	r3, [r1, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
    467c:	4a16      	ldr	r2, [pc, #88]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    467e:	4b16      	ldr	r3, [pc, #88]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    4680:	691b      	ldr	r3, [r3, #16]
    4682:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4686:	6113      	str	r3, [r2, #16]
      /* Disable the Read protection */
      OB->RDP= RDP_Key; 
    4688:	4a16      	ldr	r2, [pc, #88]	(46e4 <FLASH_EraseOptionBytes+0xcc>)
    468a:	f04f 03a5 	mov.w	r3, #165	; 0xa5
    468e:	8013      	strh	r3, [r2, #0]
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    4690:	f04f 000f 	mov.w	r0, #15	; 0xf
    4694:	f000 fb28 	bl	4ce8 <FLASH_WaitForLastOperation>
    4698:	4603      	mov	r3, r0
    469a:	603b      	str	r3, [r7, #0]
 
      if(status != FLASH_TIMEOUT)
    469c:	683b      	ldr	r3, [r7, #0]
    469e:	2b05      	cmp	r3, #5
    46a0:	d013      	beq.n	46ca <FLASH_EraseOptionBytes+0xb2>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
    46a2:	490d      	ldr	r1, [pc, #52]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    46a4:	4b0c      	ldr	r3, [pc, #48]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    46a6:	691a      	ldr	r2, [r3, #16]
    46a8:	f641 73ef 	movw	r3, #8175	; 0x1fef
    46ac:	ea02 0303 	and.w	r3, r2, r3
    46b0:	610b      	str	r3, [r1, #16]
    46b2:	e00a      	b.n	46ca <FLASH_EraseOptionBytes+0xb2>
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
    46b4:	683b      	ldr	r3, [r7, #0]
    46b6:	2b05      	cmp	r3, #5
    46b8:	d007      	beq.n	46ca <FLASH_EraseOptionBytes+0xb2>
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
    46ba:	4907      	ldr	r1, [pc, #28]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    46bc:	4b06      	ldr	r3, [pc, #24]	(46d8 <FLASH_EraseOptionBytes+0xc0>)
    46be:	691a      	ldr	r2, [r3, #16]
    46c0:	f641 73ef 	movw	r3, #8175	; 0x1fef
    46c4:	ea02 0303 	and.w	r3, r2, r3
    46c8:	610b      	str	r3, [r1, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
    46ca:	683b      	ldr	r3, [r7, #0]
}
    46cc:	4618      	mov	r0, r3
    46ce:	f107 0704 	add.w	r7, r7, #4	; 0x4
    46d2:	46bd      	mov	sp, r7
    46d4:	bd80      	pop	{r7, pc}
    46d6:	46c0      	nop			(mov r8, r8)
    46d8:	40022000 	.word	0x40022000
    46dc:	45670123 	.word	0x45670123
    46e0:	cdef89ab 	.word	0xcdef89ab
    46e4:	1ffff800 	.word	0x1ffff800

000046e8 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
    46e8:	b580      	push	{r7, lr}
    46ea:	b084      	sub	sp, #16
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
    46f0:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
    46f2:	f04f 0304 	mov.w	r3, #4	; 0x4
    46f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t tmp = 0;
    46f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    46fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
    46fe:	f04f 000f 	mov.w	r0, #15	; 0xf
    4702:	f000 faf1 	bl	4ce8 <FLASH_WaitForLastOperation>
    4706:	4603      	mov	r3, r0
    4708:	60fb      	str	r3, [r7, #12]
  
  if(status == FLASH_COMPLETE)
    470a:	68fb      	ldr	r3, [r7, #12]
    470c:	2b04      	cmp	r3, #4
    470e:	d13a      	bne.n	4786 <FLASH_ProgramWord+0x9e>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
    4710:	4a20      	ldr	r2, [pc, #128]	(4794 <FLASH_ProgramWord+0xac>)
    4712:	4b20      	ldr	r3, [pc, #128]	(4794 <FLASH_ProgramWord+0xac>)
    4714:	691b      	ldr	r3, [r3, #16]
    4716:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    471a:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    471c:	687a      	ldr	r2, [r7, #4]
    471e:	683b      	ldr	r3, [r7, #0]
    4720:	b29b      	uxth	r3, r3
    4722:	8013      	strh	r3, [r2, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
    4724:	f04f 000f 	mov.w	r0, #15	; 0xf
    4728:	f000 fade 	bl	4ce8 <FLASH_WaitForLastOperation>
    472c:	4603      	mov	r3, r0
    472e:	60fb      	str	r3, [r7, #12]
 
    if(status == FLASH_COMPLETE)
    4730:	68fb      	ldr	r3, [r7, #12]
    4732:	2b04      	cmp	r3, #4
    4734:	d11c      	bne.n	4770 <FLASH_ProgramWord+0x88>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
    4736:	687b      	ldr	r3, [r7, #4]
    4738:	f103 0302 	add.w	r3, r3, #2	; 0x2
    473c:	60bb      	str	r3, [r7, #8]

      *(__IO uint16_t*) tmp = Data >> 16;
    473e:	68bb      	ldr	r3, [r7, #8]
    4740:	461a      	mov	r2, r3
    4742:	683b      	ldr	r3, [r7, #0]
    4744:	ea4f 4313 	mov.w	r3, r3, lsr #16
    4748:	b29b      	uxth	r3, r3
    474a:	8013      	strh	r3, [r2, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    474c:	f04f 000f 	mov.w	r0, #15	; 0xf
    4750:	f000 faca 	bl	4ce8 <FLASH_WaitForLastOperation>
    4754:	4603      	mov	r3, r0
    4756:	60fb      	str	r3, [r7, #12]
        
      if(status != FLASH_TIMEOUT)
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	2b05      	cmp	r3, #5
    475c:	d013      	beq.n	4786 <FLASH_ProgramWord+0x9e>
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
    475e:	490d      	ldr	r1, [pc, #52]	(4794 <FLASH_ProgramWord+0xac>)
    4760:	4b0c      	ldr	r3, [pc, #48]	(4794 <FLASH_ProgramWord+0xac>)
    4762:	691a      	ldr	r2, [r3, #16]
    4764:	f641 73fe 	movw	r3, #8190	; 0x1ffe
    4768:	ea02 0303 	and.w	r3, r2, r3
    476c:	610b      	str	r3, [r1, #16]
    476e:	e00a      	b.n	4786 <FLASH_ProgramWord+0x9e>
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
    4770:	68fb      	ldr	r3, [r7, #12]
    4772:	2b05      	cmp	r3, #5
    4774:	d007      	beq.n	4786 <FLASH_ProgramWord+0x9e>
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
    4776:	4907      	ldr	r1, [pc, #28]	(4794 <FLASH_ProgramWord+0xac>)
    4778:	4b06      	ldr	r3, [pc, #24]	(4794 <FLASH_ProgramWord+0xac>)
    477a:	691a      	ldr	r2, [r3, #16]
    477c:	f641 73fe 	movw	r3, #8190	; 0x1ffe
    4780:	ea02 0303 	and.w	r3, r2, r3
    4784:	610b      	str	r3, [r1, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
    4786:	68fb      	ldr	r3, [r7, #12]
}
    4788:	4618      	mov	r0, r3
    478a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    478e:	46bd      	mov	sp, r7
    4790:	bd80      	pop	{r7, pc}
    4792:	46c0      	nop			(mov r8, r8)
    4794:	40022000 	.word	0x40022000

00004798 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
    4798:	b580      	push	{r7, lr}
    479a:	b083      	sub	sp, #12
    479c:	af00      	add	r7, sp, #0
    479e:	6078      	str	r0, [r7, #4]
    47a0:	460b      	mov	r3, r1
    47a2:	803b      	strh	r3, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
    47a4:	f04f 0304 	mov.w	r3, #4	; 0x4
    47a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
    47aa:	f04f 000f 	mov.w	r0, #15	; 0xf
    47ae:	f000 fa9b 	bl	4ce8 <FLASH_WaitForLastOperation>
    47b2:	4603      	mov	r3, r0
    47b4:	60bb      	str	r3, [r7, #8]
  
  if(status == FLASH_COMPLETE)
    47b6:	68bb      	ldr	r3, [r7, #8]
    47b8:	2b04      	cmp	r3, #4
    47ba:	d119      	bne.n	47f0 <FLASH_ProgramHalfWord+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
    47bc:	4a0f      	ldr	r2, [pc, #60]	(47fc <FLASH_ProgramHalfWord+0x64>)
    47be:	4b0f      	ldr	r3, [pc, #60]	(47fc <FLASH_ProgramHalfWord+0x64>)
    47c0:	691b      	ldr	r3, [r3, #16]
    47c2:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    47c6:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
    47c8:	687a      	ldr	r2, [r7, #4]
    47ca:	883b      	ldrh	r3, [r7, #0]
    47cc:	8013      	strh	r3, [r2, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
    47ce:	f04f 000f 	mov.w	r0, #15	; 0xf
    47d2:	f000 fa89 	bl	4ce8 <FLASH_WaitForLastOperation>
    47d6:	4603      	mov	r3, r0
    47d8:	60bb      	str	r3, [r7, #8]
    if(status != FLASH_TIMEOUT)
    47da:	68bb      	ldr	r3, [r7, #8]
    47dc:	2b05      	cmp	r3, #5
    47de:	d007      	beq.n	47f0 <FLASH_ProgramHalfWord+0x58>
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
    47e0:	4906      	ldr	r1, [pc, #24]	(47fc <FLASH_ProgramHalfWord+0x64>)
    47e2:	4b06      	ldr	r3, [pc, #24]	(47fc <FLASH_ProgramHalfWord+0x64>)
    47e4:	691a      	ldr	r2, [r3, #16]
    47e6:	f641 73fe 	movw	r3, #8190	; 0x1ffe
    47ea:	ea02 0303 	and.w	r3, r2, r3
    47ee:	610b      	str	r3, [r1, #16]
    }
  } 
  /* Return the Program Status */
  return status;
    47f0:	68bb      	ldr	r3, [r7, #8]
}
    47f2:	4618      	mov	r0, r3
    47f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    47f8:	46bd      	mov	sp, r7
    47fa:	bd80      	pop	{r7, pc}
    47fc:	40022000 	.word	0x40022000

00004800 <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
    4800:	b580      	push	{r7, lr}
    4802:	b083      	sub	sp, #12
    4804:	af00      	add	r7, sp, #0
    4806:	6078      	str	r0, [r7, #4]
    4808:	460b      	mov	r3, r1
    480a:	703b      	strb	r3, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
    480c:	f04f 0304 	mov.w	r3, #4	; 0x4
    4810:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
    4812:	f04f 000f 	mov.w	r0, #15	; 0xf
    4816:	f000 fa67 	bl	4ce8 <FLASH_WaitForLastOperation>
    481a:	4603      	mov	r3, r0
    481c:	60bb      	str	r3, [r7, #8]
  if(status == FLASH_COMPLETE)
    481e:	68bb      	ldr	r3, [r7, #8]
    4820:	2b04      	cmp	r3, #4
    4822:	d11f      	bne.n	4864 <FLASH_ProgramOptionByteData+0x64>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    4824:	4a12      	ldr	r2, [pc, #72]	(4870 <FLASH_ProgramOptionByteData+0x70>)
    4826:	4b13      	ldr	r3, [pc, #76]	(4874 <FLASH_ProgramOptionByteData+0x74>)
    4828:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
    482a:	4a11      	ldr	r2, [pc, #68]	(4870 <FLASH_ProgramOptionByteData+0x70>)
    482c:	4b12      	ldr	r3, [pc, #72]	(4878 <FLASH_ProgramOptionByteData+0x78>)
    482e:	6093      	str	r3, [r2, #8]
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    4830:	4a0f      	ldr	r2, [pc, #60]	(4870 <FLASH_ProgramOptionByteData+0x70>)
    4832:	4b0f      	ldr	r3, [pc, #60]	(4870 <FLASH_ProgramOptionByteData+0x70>)
    4834:	691b      	ldr	r3, [r3, #16]
    4836:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    483a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
    483c:	687a      	ldr	r2, [r7, #4]
    483e:	783b      	ldrb	r3, [r7, #0]
    4840:	8013      	strh	r3, [r2, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
    4842:	f04f 000f 	mov.w	r0, #15	; 0xf
    4846:	f000 fa4f 	bl	4ce8 <FLASH_WaitForLastOperation>
    484a:	4603      	mov	r3, r0
    484c:	60bb      	str	r3, [r7, #8]
    if(status != FLASH_TIMEOUT)
    484e:	68bb      	ldr	r3, [r7, #8]
    4850:	2b05      	cmp	r3, #5
    4852:	d007      	beq.n	4864 <FLASH_ProgramOptionByteData+0x64>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
    4854:	4906      	ldr	r1, [pc, #24]	(4870 <FLASH_ProgramOptionByteData+0x70>)
    4856:	4b06      	ldr	r3, [pc, #24]	(4870 <FLASH_ProgramOptionByteData+0x70>)
    4858:	691a      	ldr	r2, [r3, #16]
    485a:	f641 73ef 	movw	r3, #8175	; 0x1fef
    485e:	ea02 0303 	and.w	r3, r2, r3
    4862:	610b      	str	r3, [r1, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;
    4864:	68bb      	ldr	r3, [r7, #8]
}
    4866:	4618      	mov	r0, r3
    4868:	f107 070c 	add.w	r7, r7, #12	; 0xc
    486c:	46bd      	mov	sp, r7
    486e:	bd80      	pop	{r7, pc}
    4870:	40022000 	.word	0x40022000
    4874:	45670123 	.word	0x45670123
    4878:	cdef89ab 	.word	0xcdef89ab

0000487c <FLASH_EnableWriteProtection>:
  *     @arg FLASH_WRProt_AllPages
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
{
    487c:	b580      	push	{r7, lr}
    487e:	b084      	sub	sp, #16
    4880:	af00      	add	r7, sp, #0
    4882:	6038      	str	r0, [r7, #0]
  uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
    4884:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4888:	80bb      	strh	r3, [r7, #4]
    488a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    488e:	80fb      	strh	r3, [r7, #6]
    4890:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4894:	813b      	strh	r3, [r7, #8]
    4896:	f64f 73ff 	movw	r3, #65535	; 0xffff
    489a:	817b      	strh	r3, [r7, #10]
  
  FLASH_Status status = FLASH_COMPLETE;
    489c:	f04f 0304 	mov.w	r3, #4	; 0x4
    48a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
    48a2:	683b      	ldr	r3, [r7, #0]
    48a4:	ea6f 0303 	mvn.w	r3, r3
    48a8:	603b      	str	r3, [r7, #0]
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
    48aa:	683b      	ldr	r3, [r7, #0]
    48ac:	b29b      	uxth	r3, r3
    48ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    48b2:	80bb      	strh	r3, [r7, #4]
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
    48b4:	683b      	ldr	r3, [r7, #0]
    48b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    48ba:	ea4f 2313 	mov.w	r3, r3, lsr #8
    48be:	80fb      	strh	r3, [r7, #6]
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
    48c0:	683b      	ldr	r3, [r7, #0]
    48c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    48c6:	ea4f 4313 	mov.w	r3, r3, lsr #16
    48ca:	813b      	strh	r3, [r7, #8]
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
    48cc:	683b      	ldr	r3, [r7, #0]
    48ce:	ea4f 6313 	mov.w	r3, r3, lsr #24
    48d2:	817b      	strh	r3, [r7, #10]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
    48d4:	f04f 000f 	mov.w	r0, #15	; 0xf
    48d8:	f000 fa06 	bl	4ce8 <FLASH_WaitForLastOperation>
    48dc:	4603      	mov	r3, r0
    48de:	60fb      	str	r3, [r7, #12]
  
  if(status == FLASH_COMPLETE)
    48e0:	68fb      	ldr	r3, [r7, #12]
    48e2:	2b04      	cmp	r3, #4
    48e4:	d14f      	bne.n	4986 <FLASH_EnableWriteProtection+0x10a>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    48e6:	4a2b      	ldr	r2, [pc, #172]	(4994 <FLASH_EnableWriteProtection+0x118>)
    48e8:	4b2b      	ldr	r3, [pc, #172]	(4998 <FLASH_EnableWriteProtection+0x11c>)
    48ea:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
    48ec:	4a29      	ldr	r2, [pc, #164]	(4994 <FLASH_EnableWriteProtection+0x118>)
    48ee:	4b2b      	ldr	r3, [pc, #172]	(499c <FLASH_EnableWriteProtection+0x120>)
    48f0:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTPG_Set;
    48f2:	4a28      	ldr	r2, [pc, #160]	(4994 <FLASH_EnableWriteProtection+0x118>)
    48f4:	4b27      	ldr	r3, [pc, #156]	(4994 <FLASH_EnableWriteProtection+0x118>)
    48f6:	691b      	ldr	r3, [r3, #16]
    48f8:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    48fc:	6113      	str	r3, [r2, #16]
    if(WRP0_Data != 0xFF)
    48fe:	88bb      	ldrh	r3, [r7, #4]
    4900:	2bff      	cmp	r3, #255
    4902:	d008      	beq.n	4916 <FLASH_EnableWriteProtection+0x9a>
    {
      OB->WRP0 = WRP0_Data;
    4904:	4b26      	ldr	r3, [pc, #152]	(49a0 <FLASH_EnableWriteProtection+0x124>)
    4906:	88ba      	ldrh	r2, [r7, #4]
    4908:	811a      	strh	r2, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    490a:	f04f 000f 	mov.w	r0, #15	; 0xf
    490e:	f000 f9eb 	bl	4ce8 <FLASH_WaitForLastOperation>
    4912:	4603      	mov	r3, r0
    4914:	60fb      	str	r3, [r7, #12]
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    4916:	68fb      	ldr	r3, [r7, #12]
    4918:	2b04      	cmp	r3, #4
    491a:	d10b      	bne.n	4934 <FLASH_EnableWriteProtection+0xb8>
    491c:	88fb      	ldrh	r3, [r7, #6]
    491e:	2bff      	cmp	r3, #255
    4920:	d008      	beq.n	4934 <FLASH_EnableWriteProtection+0xb8>
    {
      OB->WRP1 = WRP1_Data;
    4922:	4b1f      	ldr	r3, [pc, #124]	(49a0 <FLASH_EnableWriteProtection+0x124>)
    4924:	88fa      	ldrh	r2, [r7, #6]
    4926:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    4928:	f04f 000f 	mov.w	r0, #15	; 0xf
    492c:	f000 f9dc 	bl	4ce8 <FLASH_WaitForLastOperation>
    4930:	4603      	mov	r3, r0
    4932:	60fb      	str	r3, [r7, #12]
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    4934:	68fb      	ldr	r3, [r7, #12]
    4936:	2b04      	cmp	r3, #4
    4938:	d10b      	bne.n	4952 <FLASH_EnableWriteProtection+0xd6>
    493a:	893b      	ldrh	r3, [r7, #8]
    493c:	2bff      	cmp	r3, #255
    493e:	d008      	beq.n	4952 <FLASH_EnableWriteProtection+0xd6>
    {
      OB->WRP2 = WRP2_Data;
    4940:	4b17      	ldr	r3, [pc, #92]	(49a0 <FLASH_EnableWriteProtection+0x124>)
    4942:	893a      	ldrh	r2, [r7, #8]
    4944:	819a      	strh	r2, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    4946:	f04f 000f 	mov.w	r0, #15	; 0xf
    494a:	f000 f9cd 	bl	4ce8 <FLASH_WaitForLastOperation>
    494e:	4603      	mov	r3, r0
    4950:	60fb      	str	r3, [r7, #12]
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    4952:	68fb      	ldr	r3, [r7, #12]
    4954:	2b04      	cmp	r3, #4
    4956:	d10b      	bne.n	4970 <FLASH_EnableWriteProtection+0xf4>
    4958:	897b      	ldrh	r3, [r7, #10]
    495a:	2bff      	cmp	r3, #255
    495c:	d008      	beq.n	4970 <FLASH_EnableWriteProtection+0xf4>
    {
      OB->WRP3 = WRP3_Data;
    495e:	4b10      	ldr	r3, [pc, #64]	(49a0 <FLASH_EnableWriteProtection+0x124>)
    4960:	897a      	ldrh	r2, [r7, #10]
    4962:	81da      	strh	r2, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    4964:	f04f 000f 	mov.w	r0, #15	; 0xf
    4968:	f000 f9be 	bl	4ce8 <FLASH_WaitForLastOperation>
    496c:	4603      	mov	r3, r0
    496e:	60fb      	str	r3, [r7, #12]
    }
          
    if(status != FLASH_TIMEOUT)
    4970:	68fb      	ldr	r3, [r7, #12]
    4972:	2b05      	cmp	r3, #5
    4974:	d007      	beq.n	4986 <FLASH_EnableWriteProtection+0x10a>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
    4976:	4907      	ldr	r1, [pc, #28]	(4994 <FLASH_EnableWriteProtection+0x118>)
    4978:	4b06      	ldr	r3, [pc, #24]	(4994 <FLASH_EnableWriteProtection+0x118>)
    497a:	691a      	ldr	r2, [r3, #16]
    497c:	f641 73ef 	movw	r3, #8175	; 0x1fef
    4980:	ea02 0303 	and.w	r3, r2, r3
    4984:	610b      	str	r3, [r1, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
    4986:	68fb      	ldr	r3, [r7, #12]
}
    4988:	4618      	mov	r0, r3
    498a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    498e:	46bd      	mov	sp, r7
    4990:	bd80      	pop	{r7, pc}
    4992:	46c0      	nop			(mov r8, r8)
    4994:	40022000 	.word	0x40022000
    4998:	45670123 	.word	0x45670123
    499c:	cdef89ab 	.word	0xcdef89ab
    49a0:	1ffff800 	.word	0x1ffff800

000049a4 <FLASH_ReadOutProtection>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
    49a4:	b580      	push	{r7, lr}
    49a6:	b082      	sub	sp, #8
    49a8:	af00      	add	r7, sp, #0
    49aa:	6038      	str	r0, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
    49ac:	f04f 0304 	mov.w	r3, #4	; 0x4
    49b0:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
    49b2:	f640 70ff 	movw	r0, #4095	; 0xfff
    49b6:	f000 f997 	bl	4ce8 <FLASH_WaitForLastOperation>
    49ba:	4603      	mov	r3, r0
    49bc:	607b      	str	r3, [r7, #4]
  if(status == FLASH_COMPLETE)
    49be:	687b      	ldr	r3, [r7, #4]
    49c0:	2b04      	cmp	r3, #4
    49c2:	d151      	bne.n	4a68 <FLASH_ReadOutProtection+0xc4>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    49c4:	4a2b      	ldr	r2, [pc, #172]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49c6:	4b2c      	ldr	r3, [pc, #176]	(4a78 <FLASH_ReadOutProtection+0xd4>)
    49c8:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
    49ca:	4a2a      	ldr	r2, [pc, #168]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49cc:	4b2b      	ldr	r3, [pc, #172]	(4a7c <FLASH_ReadOutProtection+0xd8>)
    49ce:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTER_Set;
    49d0:	4a28      	ldr	r2, [pc, #160]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49d2:	4b28      	ldr	r3, [pc, #160]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49d4:	691b      	ldr	r3, [r3, #16]
    49d6:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    49da:	6113      	str	r3, [r2, #16]
    FLASH->CR |= CR_STRT_Set;
    49dc:	4a25      	ldr	r2, [pc, #148]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49de:	4b25      	ldr	r3, [pc, #148]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49e0:	691b      	ldr	r3, [r3, #16]
    49e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    49e6:	6113      	str	r3, [r2, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
    49e8:	f640 70ff 	movw	r0, #4095	; 0xfff
    49ec:	f000 f97c 	bl	4ce8 <FLASH_WaitForLastOperation>
    49f0:	4603      	mov	r3, r0
    49f2:	607b      	str	r3, [r7, #4]
    if(status == FLASH_COMPLETE)
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	2b04      	cmp	r3, #4
    49f8:	d12b      	bne.n	4a52 <FLASH_ReadOutProtection+0xae>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
    49fa:	491e      	ldr	r1, [pc, #120]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49fc:	4b1d      	ldr	r3, [pc, #116]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    49fe:	691a      	ldr	r2, [r3, #16]
    4a00:	f641 73df 	movw	r3, #8159	; 0x1fdf
    4a04:	ea02 0303 	and.w	r3, r2, r3
    4a08:	610b      	str	r3, [r1, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
    4a0a:	4a1a      	ldr	r2, [pc, #104]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    4a0c:	4b19      	ldr	r3, [pc, #100]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    4a0e:	691b      	ldr	r3, [r3, #16]
    4a10:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4a14:	6113      	str	r3, [r2, #16]
      if(NewState != DISABLE)
    4a16:	683b      	ldr	r3, [r7, #0]
    4a18:	2b00      	cmp	r3, #0
    4a1a:	d004      	beq.n	4a26 <FLASH_ReadOutProtection+0x82>
      {
        OB->RDP = 0x00;
    4a1c:	4b18      	ldr	r3, [pc, #96]	(4a80 <FLASH_ReadOutProtection+0xdc>)
    4a1e:	f04f 0200 	mov.w	r2, #0	; 0x0
    4a22:	801a      	strh	r2, [r3, #0]
    4a24:	e003      	b.n	4a2e <FLASH_ReadOutProtection+0x8a>
      }
      else
      {
        OB->RDP = RDP_Key;  
    4a26:	4b16      	ldr	r3, [pc, #88]	(4a80 <FLASH_ReadOutProtection+0xdc>)
    4a28:	f04f 02a5 	mov.w	r2, #165	; 0xa5
    4a2c:	801a      	strh	r2, [r3, #0]
      }
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
    4a2e:	f640 70ff 	movw	r0, #4095	; 0xfff
    4a32:	f000 f959 	bl	4ce8 <FLASH_WaitForLastOperation>
    4a36:	4603      	mov	r3, r0
    4a38:	607b      	str	r3, [r7, #4]
    
      if(status != FLASH_TIMEOUT)
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	2b05      	cmp	r3, #5
    4a3e:	d013      	beq.n	4a68 <FLASH_ReadOutProtection+0xc4>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
    4a40:	490c      	ldr	r1, [pc, #48]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    4a42:	4b0c      	ldr	r3, [pc, #48]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    4a44:	691a      	ldr	r2, [r3, #16]
    4a46:	f641 73ef 	movw	r3, #8175	; 0x1fef
    4a4a:	ea02 0303 	and.w	r3, r2, r3
    4a4e:	610b      	str	r3, [r1, #16]
    4a50:	e00a      	b.n	4a68 <FLASH_ReadOutProtection+0xc4>
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	2b05      	cmp	r3, #5
    4a56:	d007      	beq.n	4a68 <FLASH_ReadOutProtection+0xc4>
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
    4a58:	4906      	ldr	r1, [pc, #24]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    4a5a:	4b06      	ldr	r3, [pc, #24]	(4a74 <FLASH_ReadOutProtection+0xd0>)
    4a5c:	691a      	ldr	r2, [r3, #16]
    4a5e:	f641 73df 	movw	r3, #8159	; 0x1fdf
    4a62:	ea02 0303 	and.w	r3, r2, r3
    4a66:	610b      	str	r3, [r1, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
    4a68:	687b      	ldr	r3, [r7, #4]
}
    4a6a:	4618      	mov	r0, r3
    4a6c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4a70:	46bd      	mov	sp, r7
    4a72:	bd80      	pop	{r7, pc}
    4a74:	40022000 	.word	0x40022000
    4a78:	45670123 	.word	0x45670123
    4a7c:	cdef89ab 	.word	0xcdef89ab
    4a80:	1ffff800 	.word	0x1ffff800

00004a84 <FLASH_UserOptionByteConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  * FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
    4a84:	b580      	push	{r7, lr}
    4a86:	b084      	sub	sp, #16
    4a88:	af00      	add	r7, sp, #0
    4a8a:	4603      	mov	r3, r0
    4a8c:	813b      	strh	r3, [r7, #8]
    4a8e:	460b      	mov	r3, r1
    4a90:	80bb      	strh	r3, [r7, #4]
    4a92:	4613      	mov	r3, r2
    4a94:	803b      	strh	r3, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE; 
    4a96:	f04f 0304 	mov.w	r3, #4	; 0x4
    4a9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
    4a9c:	4a1c      	ldr	r2, [pc, #112]	(4b10 <FLASH_UserOptionByteConfig+0x8c>)
    4a9e:	4b1d      	ldr	r3, [pc, #116]	(4b14 <FLASH_UserOptionByteConfig+0x90>)
    4aa0:	6093      	str	r3, [r2, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
    4aa2:	4a1b      	ldr	r2, [pc, #108]	(4b10 <FLASH_UserOptionByteConfig+0x8c>)
    4aa4:	4b1c      	ldr	r3, [pc, #112]	(4b18 <FLASH_UserOptionByteConfig+0x94>)
    4aa6:	6093      	str	r3, [r2, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
    4aa8:	f04f 000f 	mov.w	r0, #15	; 0xf
    4aac:	f000 f91c 	bl	4ce8 <FLASH_WaitForLastOperation>
    4ab0:	4603      	mov	r3, r0
    4ab2:	60fb      	str	r3, [r7, #12]
  
  if(status == FLASH_COMPLETE)
    4ab4:	68fb      	ldr	r3, [r7, #12]
    4ab6:	2b04      	cmp	r3, #4
    4ab8:	d124      	bne.n	4b04 <FLASH_UserOptionByteConfig+0x80>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    4aba:	4a15      	ldr	r2, [pc, #84]	(4b10 <FLASH_UserOptionByteConfig+0x8c>)
    4abc:	4b14      	ldr	r3, [pc, #80]	(4b10 <FLASH_UserOptionByteConfig+0x8c>)
    4abe:	691b      	ldr	r3, [r3, #16]
    4ac0:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4ac4:	6113      	str	r3, [r2, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
    4ac6:	4915      	ldr	r1, [pc, #84]	(4b1c <FLASH_UserOptionByteConfig+0x98>)
    4ac8:	883a      	ldrh	r2, [r7, #0]
    4aca:	88bb      	ldrh	r3, [r7, #4]
    4acc:	ea42 0303 	orr.w	r3, r2, r3
    4ad0:	b29a      	uxth	r2, r3
    4ad2:	893b      	ldrh	r3, [r7, #8]
    4ad4:	ea42 0303 	orr.w	r3, r2, r3
    4ad8:	b29b      	uxth	r3, r3
    4ada:	f043 03f8 	orr.w	r3, r3, #248	; 0xf8
    4ade:	b29b      	uxth	r3, r3
    4ae0:	804b      	strh	r3, [r1, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
    4ae2:	f04f 000f 	mov.w	r0, #15	; 0xf
    4ae6:	f000 f8ff 	bl	4ce8 <FLASH_WaitForLastOperation>
    4aea:	4603      	mov	r3, r0
    4aec:	60fb      	str	r3, [r7, #12]
    if(status != FLASH_TIMEOUT)
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	2b05      	cmp	r3, #5
    4af2:	d007      	beq.n	4b04 <FLASH_UserOptionByteConfig+0x80>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
    4af4:	4906      	ldr	r1, [pc, #24]	(4b10 <FLASH_UserOptionByteConfig+0x8c>)
    4af6:	4b06      	ldr	r3, [pc, #24]	(4b10 <FLASH_UserOptionByteConfig+0x8c>)
    4af8:	691a      	ldr	r2, [r3, #16]
    4afa:	f641 73ef 	movw	r3, #8175	; 0x1fef
    4afe:	ea02 0303 	and.w	r3, r2, r3
    4b02:	610b      	str	r3, [r1, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
    4b04:	68fb      	ldr	r3, [r7, #12]
}
    4b06:	4618      	mov	r0, r3
    4b08:	f107 0710 	add.w	r7, r7, #16	; 0x10
    4b0c:	46bd      	mov	sp, r7
    4b0e:	bd80      	pop	{r7, pc}
    4b10:	40022000 	.word	0x40022000
    4b14:	45670123 	.word	0x45670123
    4b18:	cdef89ab 	.word	0xcdef89ab
    4b1c:	1ffff800 	.word	0x1ffff800

00004b20 <FLASH_GetUserOptionByte>:
  * @param  None
  * @retval The FLASH User Option Bytes values:IWDG_SW(Bit0), RST_STOP(Bit1)
  *   and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
    4b20:	b480      	push	{r7}
    4b22:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
    4b24:	4b03      	ldr	r3, [pc, #12]	(4b34 <FLASH_GetUserOptionByte+0x14>)
    4b26:	69db      	ldr	r3, [r3, #28]
    4b28:	ea4f 0393 	mov.w	r3, r3, lsr #2
}
    4b2c:	4618      	mov	r0, r3
    4b2e:	46bd      	mov	sp, r7
    4b30:	bc80      	pop	{r7}
    4b32:	4770      	bx	lr
    4b34:	40022000 	.word	0x40022000

00004b38 <FLASH_GetWriteProtectionOptionByte>:
  * @brief  Returns the FLASH Write Protection Option Bytes Register value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
    4b38:	b480      	push	{r7}
    4b3a:	af00      	add	r7, sp, #0
  /* Return the Falsh write protection Register value */
  return (uint32_t)(FLASH->WRPR);
    4b3c:	4b02      	ldr	r3, [pc, #8]	(4b48 <FLASH_GetWriteProtectionOptionByte+0x10>)
    4b3e:	6a1b      	ldr	r3, [r3, #32]
}
    4b40:	4618      	mov	r0, r3
    4b42:	46bd      	mov	sp, r7
    4b44:	bc80      	pop	{r7}
    4b46:	4770      	bx	lr
    4b48:	40022000 	.word	0x40022000

00004b4c <FLASH_GetReadOutProtectionStatus>:
  * @brief  Checks whether the FLASH Read Out Protection Status is set or not.
  * @param  None
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
    4b4c:	b480      	push	{r7}
    4b4e:	b081      	sub	sp, #4
    4b50:	af00      	add	r7, sp, #0
  FlagStatus readoutstatus = RESET;
    4b52:	f04f 0300 	mov.w	r3, #0	; 0x0
    4b56:	603b      	str	r3, [r7, #0]
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
    4b58:	4b09      	ldr	r3, [pc, #36]	(4b80 <FLASH_GetReadOutProtectionStatus+0x34>)
    4b5a:	69db      	ldr	r3, [r3, #28]
    4b5c:	f003 0302 	and.w	r3, r3, #2	; 0x2
    4b60:	2b00      	cmp	r3, #0
    4b62:	d003      	beq.n	4b6c <FLASH_GetReadOutProtectionStatus+0x20>
  {
    readoutstatus = SET;
    4b64:	f04f 0301 	mov.w	r3, #1	; 0x1
    4b68:	603b      	str	r3, [r7, #0]
    4b6a:	e002      	b.n	4b72 <FLASH_GetReadOutProtectionStatus+0x26>
  }
  else
  {
    readoutstatus = RESET;
    4b6c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4b70:	603b      	str	r3, [r7, #0]
  }
  return readoutstatus;
    4b72:	683b      	ldr	r3, [r7, #0]
}
    4b74:	4618      	mov	r0, r3
    4b76:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4b7a:	46bd      	mov	sp, r7
    4b7c:	bc80      	pop	{r7}
    4b7e:	4770      	bx	lr
    4b80:	40022000 	.word	0x40022000

00004b84 <FLASH_GetPrefetchBufferStatus>:
  * @brief  Checks whether the FLASH Prefetch Buffer status is set or not.
  * @param  None
  * @retval FLASH Prefetch Buffer Status (SET or RESET).
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
    4b84:	b480      	push	{r7}
    4b86:	b081      	sub	sp, #4
    4b88:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
    4b8a:	f04f 0300 	mov.w	r3, #0	; 0x0
    4b8e:	603b      	str	r3, [r7, #0]
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
    4b90:	4b09      	ldr	r3, [pc, #36]	(4bb8 <FLASH_GetPrefetchBufferStatus+0x34>)
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	f003 0320 	and.w	r3, r3, #32	; 0x20
    4b98:	2b00      	cmp	r3, #0
    4b9a:	d003      	beq.n	4ba4 <FLASH_GetPrefetchBufferStatus+0x20>
  {
    bitstatus = SET;
    4b9c:	f04f 0301 	mov.w	r3, #1	; 0x1
    4ba0:	603b      	str	r3, [r7, #0]
    4ba2:	e002      	b.n	4baa <FLASH_GetPrefetchBufferStatus+0x26>
  }
  else
  {
    bitstatus = RESET;
    4ba4:	f04f 0300 	mov.w	r3, #0	; 0x0
    4ba8:	603b      	str	r3, [r7, #0]
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
    4baa:	683b      	ldr	r3, [r7, #0]
}
    4bac:	4618      	mov	r0, r3
    4bae:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4bb2:	46bd      	mov	sp, r7
    4bb4:	bc80      	pop	{r7}
    4bb6:	4770      	bx	lr
    4bb8:	40022000 	.word	0x40022000

00004bbc <FLASH_ITConfig>:
  * @param  NewState: new state of the specified Flash interrupts.
  *   This parameter can be: ENABLE or DISABLE.      
  * @retval None 
  */
void FLASH_ITConfig(uint16_t FLASH_IT, FunctionalState NewState)
{
    4bbc:	b480      	push	{r7}
    4bbe:	b082      	sub	sp, #8
    4bc0:	af00      	add	r7, sp, #0
    4bc2:	4603      	mov	r3, r0
    4bc4:	6039      	str	r1, [r7, #0]
    4bc6:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if(NewState != DISABLE)
    4bc8:	683b      	ldr	r3, [r7, #0]
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d007      	beq.n	4bde <FLASH_ITConfig+0x22>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
    4bce:	490b      	ldr	r1, [pc, #44]	(4bfc <FLASH_ITConfig+0x40>)
    4bd0:	4b0a      	ldr	r3, [pc, #40]	(4bfc <FLASH_ITConfig+0x40>)
    4bd2:	691a      	ldr	r2, [r3, #16]
    4bd4:	88bb      	ldrh	r3, [r7, #4]
    4bd6:	ea42 0303 	orr.w	r3, r2, r3
    4bda:	610b      	str	r3, [r1, #16]
    4bdc:	e008      	b.n	4bf0 <FLASH_ITConfig+0x34>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
    4bde:	4907      	ldr	r1, [pc, #28]	(4bfc <FLASH_ITConfig+0x40>)
    4be0:	4b06      	ldr	r3, [pc, #24]	(4bfc <FLASH_ITConfig+0x40>)
    4be2:	691a      	ldr	r2, [r3, #16]
    4be4:	88bb      	ldrh	r3, [r7, #4]
    4be6:	ea6f 0303 	mvn.w	r3, r3
    4bea:	ea02 0303 	and.w	r3, r2, r3
    4bee:	610b      	str	r3, [r1, #16]
  }
}
    4bf0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4bf4:	46bd      	mov	sp, r7
    4bf6:	bc80      	pop	{r7}
    4bf8:	4770      	bx	lr
    4bfa:	46c0      	nop			(mov r8, r8)
    4bfc:	40022000 	.word	0x40022000

00004c00 <FLASH_GetFlagStatus>:
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  *     @arg FLASH_FLAG_OPTERR:  FLASH Option Byte error flag     
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint16_t FLASH_FLAG)
{
    4c00:	b480      	push	{r7}
    4c02:	b082      	sub	sp, #8
    4c04:	af00      	add	r7, sp, #0
    4c06:	4603      	mov	r3, r0
    4c08:	803b      	strh	r3, [r7, #0]
  FlagStatus bitstatus = RESET;
    4c0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    4c0e:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
    4c10:	883b      	ldrh	r3, [r7, #0]
    4c12:	2b01      	cmp	r3, #1
    4c14:	d10e      	bne.n	4c34 <FLASH_GetFlagStatus+0x34>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
    4c16:	4b12      	ldr	r3, [pc, #72]	(4c60 <FLASH_GetFlagStatus+0x60>)
    4c18:	69db      	ldr	r3, [r3, #28]
    4c1a:	f003 0301 	and.w	r3, r3, #1	; 0x1
    4c1e:	b2db      	uxtb	r3, r3
    4c20:	2b00      	cmp	r3, #0
    4c22:	d003      	beq.n	4c2c <FLASH_GetFlagStatus+0x2c>
    {
      bitstatus = SET;
    4c24:	f04f 0301 	mov.w	r3, #1	; 0x1
    4c28:	607b      	str	r3, [r7, #4]
    4c2a:	e011      	b.n	4c50 <FLASH_GetFlagStatus+0x50>
    }
    else
    {
      bitstatus = RESET;
    4c2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4c30:	607b      	str	r3, [r7, #4]
    4c32:	e00d      	b.n	4c50 <FLASH_GetFlagStatus+0x50>
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
    4c34:	4b0a      	ldr	r3, [pc, #40]	(4c60 <FLASH_GetFlagStatus+0x60>)
    4c36:	68da      	ldr	r2, [r3, #12]
    4c38:	883b      	ldrh	r3, [r7, #0]
    4c3a:	ea02 0303 	and.w	r3, r2, r3
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d003      	beq.n	4c4a <FLASH_GetFlagStatus+0x4a>
    {
      bitstatus = SET;
    4c42:	f04f 0301 	mov.w	r3, #1	; 0x1
    4c46:	607b      	str	r3, [r7, #4]
    4c48:	e002      	b.n	4c50 <FLASH_GetFlagStatus+0x50>
    }
    else
    {
      bitstatus = RESET;
    4c4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    4c4e:	607b      	str	r3, [r7, #4]
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
    4c50:	687b      	ldr	r3, [r7, #4]
}
    4c52:	4618      	mov	r0, r3
    4c54:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4c58:	46bd      	mov	sp, r7
    4c5a:	bc80      	pop	{r7}
    4c5c:	4770      	bx	lr
    4c5e:	46c0      	nop			(mov r8, r8)
    4c60:	40022000 	.word	0x40022000

00004c64 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  * @retval None
  */
void FLASH_ClearFlag(uint16_t FLASH_FLAG)
{
    4c64:	b480      	push	{r7}
    4c66:	b081      	sub	sp, #4
    4c68:	af00      	add	r7, sp, #0
    4c6a:	4603      	mov	r3, r0
    4c6c:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
    4c6e:	4a04      	ldr	r2, [pc, #16]	(4c80 <FLASH_ClearFlag+0x1c>)
    4c70:	883b      	ldrh	r3, [r7, #0]
    4c72:	60d3      	str	r3, [r2, #12]
}
    4c74:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4c78:	46bd      	mov	sp, r7
    4c7a:	bc80      	pop	{r7}
    4c7c:	4770      	bx	lr
    4c7e:	46c0      	nop			(mov r8, r8)
    4c80:	40022000 	.word	0x40022000

00004c84 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetStatus(void)
{
    4c84:	b480      	push	{r7}
    4c86:	b081      	sub	sp, #4
    4c88:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
    4c8a:	f04f 0304 	mov.w	r3, #4	; 0x4
    4c8e:	603b      	str	r3, [r7, #0]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
    4c90:	4b14      	ldr	r3, [pc, #80]	(4ce4 <FLASH_GetStatus+0x60>)
    4c92:	68db      	ldr	r3, [r3, #12]
    4c94:	f003 0301 	and.w	r3, r3, #1	; 0x1
    4c98:	b2db      	uxtb	r3, r3
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d003      	beq.n	4ca6 <FLASH_GetStatus+0x22>
  {
    flashstatus = FLASH_BUSY;
    4c9e:	f04f 0301 	mov.w	r3, #1	; 0x1
    4ca2:	603b      	str	r3, [r7, #0]
    4ca4:	e016      	b.n	4cd4 <FLASH_GetStatus+0x50>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
    4ca6:	4b0f      	ldr	r3, [pc, #60]	(4ce4 <FLASH_GetStatus+0x60>)
    4ca8:	68db      	ldr	r3, [r3, #12]
    4caa:	f003 0304 	and.w	r3, r3, #4	; 0x4
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d003      	beq.n	4cba <FLASH_GetStatus+0x36>
    { 
      flashstatus = FLASH_ERROR_PG;
    4cb2:	f04f 0302 	mov.w	r3, #2	; 0x2
    4cb6:	603b      	str	r3, [r7, #0]
    4cb8:	e00c      	b.n	4cd4 <FLASH_GetStatus+0x50>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
    4cba:	4b0a      	ldr	r3, [pc, #40]	(4ce4 <FLASH_GetStatus+0x60>)
    4cbc:	68db      	ldr	r3, [r3, #12]
    4cbe:	f003 0310 	and.w	r3, r3, #16	; 0x10
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d003      	beq.n	4cce <FLASH_GetStatus+0x4a>
      {
        flashstatus = FLASH_ERROR_WRP;
    4cc6:	f04f 0303 	mov.w	r3, #3	; 0x3
    4cca:	603b      	str	r3, [r7, #0]
    4ccc:	e002      	b.n	4cd4 <FLASH_GetStatus+0x50>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
    4cce:	f04f 0304 	mov.w	r3, #4	; 0x4
    4cd2:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
    4cd4:	683b      	ldr	r3, [r7, #0]
}
    4cd6:	4618      	mov	r0, r3
    4cd8:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4cdc:	46bd      	mov	sp, r7
    4cde:	bc80      	pop	{r7}
    4ce0:	4770      	bx	lr
    4ce2:	46c0      	nop			(mov r8, r8)
    4ce4:	40022000 	.word	0x40022000

00004ce8 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH progamming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
    4ce8:	b580      	push	{r7, lr}
    4cea:	b082      	sub	sp, #8
    4cec:	af00      	add	r7, sp, #0
    4cee:	6038      	str	r0, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
    4cf0:	f04f 0304 	mov.w	r3, #4	; 0x4
    4cf4:	607b      	str	r3, [r7, #4]
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
    4cf6:	f7ff ffc5 	bl	4c84 <FLASH_GetStatus>
    4cfa:	4603      	mov	r3, r0
    4cfc:	607b      	str	r3, [r7, #4]
    4cfe:	e009      	b.n	4d14 <FLASH_WaitForLastOperation+0x2c>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    4d00:	f000 f81a 	bl	4d38 <delay>
    status = FLASH_GetStatus();
    4d04:	f7ff ffbe 	bl	4c84 <FLASH_GetStatus>
    4d08:	4603      	mov	r3, r0
    4d0a:	607b      	str	r3, [r7, #4]
    Timeout--;
    4d0c:	683b      	ldr	r3, [r7, #0]
    4d0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    4d12:	603b      	str	r3, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
    4d14:	687b      	ldr	r3, [r7, #4]
    4d16:	2b01      	cmp	r3, #1
    4d18:	d102      	bne.n	4d20 <FLASH_WaitForLastOperation+0x38>
    4d1a:	683b      	ldr	r3, [r7, #0]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d1ef      	bne.n	4d00 <FLASH_WaitForLastOperation+0x18>
  {
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }
  if(Timeout == 0x00 )
    4d20:	683b      	ldr	r3, [r7, #0]
    4d22:	2b00      	cmp	r3, #0
    4d24:	d102      	bne.n	4d2c <FLASH_WaitForLastOperation+0x44>
  {
    status = FLASH_TIMEOUT;
    4d26:	f04f 0305 	mov.w	r3, #5	; 0x5
    4d2a:	607b      	str	r3, [r7, #4]
  }
  /* Return the operation status */
  return status;
    4d2c:	687b      	ldr	r3, [r7, #4]
}
    4d2e:	4618      	mov	r0, r3
    4d30:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4d34:	46bd      	mov	sp, r7
    4d36:	bd80      	pop	{r7, pc}

00004d38 <delay>:
  * @brief  Inserts a time delay.
  * @param  None
  * @retval None
  */
static void delay(void)
{
    4d38:	b480      	push	{r7}
    4d3a:	b081      	sub	sp, #4
    4d3c:	af00      	add	r7, sp, #0
  __IO uint32_t i = 0;
    4d3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d42:	603b      	str	r3, [r7, #0]
  for(i = 0xFF; i != 0; i--)
    4d44:	f04f 03ff 	mov.w	r3, #255	; 0xff
    4d48:	603b      	str	r3, [r7, #0]
    4d4a:	e003      	b.n	4d54 <delay+0x1c>
    4d4c:	683b      	ldr	r3, [r7, #0]
    4d4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    4d52:	603b      	str	r3, [r7, #0]
    4d54:	683b      	ldr	r3, [r7, #0]
    4d56:	2b00      	cmp	r3, #0
    4d58:	d1f8      	bne.n	4d4c <delay+0x14>
  {
  }
}
    4d5a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4d5e:	46bd      	mov	sp, r7
    4d60:	bc80      	pop	{r7}
    4d62:	4770      	bx	lr

00004d64 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    4d64:	b580      	push	{r7, lr}
    4d66:	b081      	sub	sp, #4
    4d68:	af00      	add	r7, sp, #0
    4d6a:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    4d6c:	683a      	ldr	r2, [r7, #0]
    4d6e:	4b3c      	ldr	r3, [pc, #240]	(4e60 <GPIO_DeInit+0xfc>)
    4d70:	429a      	cmp	r2, r3
    4d72:	d10c      	bne.n	4d8e <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    4d74:	f04f 0004 	mov.w	r0, #4	; 0x4
    4d78:	f04f 0101 	mov.w	r1, #1	; 0x1
    4d7c:	f7ff fa86 	bl	428c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    4d80:	f04f 0004 	mov.w	r0, #4	; 0x4
    4d84:	f04f 0100 	mov.w	r1, #0	; 0x0
    4d88:	f7ff fa80 	bl	428c <RCC_APB2PeriphResetCmd>
    4d8c:	e064      	b.n	4e58 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
    4d8e:	683a      	ldr	r2, [r7, #0]
    4d90:	4b34      	ldr	r3, [pc, #208]	(4e64 <GPIO_DeInit+0x100>)
    4d92:	429a      	cmp	r2, r3
    4d94:	d10c      	bne.n	4db0 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    4d96:	f04f 0008 	mov.w	r0, #8	; 0x8
    4d9a:	f04f 0101 	mov.w	r1, #1	; 0x1
    4d9e:	f7ff fa75 	bl	428c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    4da2:	f04f 0008 	mov.w	r0, #8	; 0x8
    4da6:	f04f 0100 	mov.w	r1, #0	; 0x0
    4daa:	f7ff fa6f 	bl	428c <RCC_APB2PeriphResetCmd>
    4dae:	e053      	b.n	4e58 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
    4db0:	683a      	ldr	r2, [r7, #0]
    4db2:	4b2d      	ldr	r3, [pc, #180]	(4e68 <GPIO_DeInit+0x104>)
    4db4:	429a      	cmp	r2, r3
    4db6:	d10c      	bne.n	4dd2 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    4db8:	f04f 0010 	mov.w	r0, #16	; 0x10
    4dbc:	f04f 0101 	mov.w	r1, #1	; 0x1
    4dc0:	f7ff fa64 	bl	428c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    4dc4:	f04f 0010 	mov.w	r0, #16	; 0x10
    4dc8:	f04f 0100 	mov.w	r1, #0	; 0x0
    4dcc:	f7ff fa5e 	bl	428c <RCC_APB2PeriphResetCmd>
    4dd0:	e042      	b.n	4e58 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
    4dd2:	683a      	ldr	r2, [r7, #0]
    4dd4:	4b25      	ldr	r3, [pc, #148]	(4e6c <GPIO_DeInit+0x108>)
    4dd6:	429a      	cmp	r2, r3
    4dd8:	d10c      	bne.n	4df4 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    4dda:	f04f 0020 	mov.w	r0, #32	; 0x20
    4dde:	f04f 0101 	mov.w	r1, #1	; 0x1
    4de2:	f7ff fa53 	bl	428c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    4de6:	f04f 0020 	mov.w	r0, #32	; 0x20
    4dea:	f04f 0100 	mov.w	r1, #0	; 0x0
    4dee:	f7ff fa4d 	bl	428c <RCC_APB2PeriphResetCmd>
    4df2:	e031      	b.n	4e58 <GPIO_DeInit+0xf4>
  }    
  else if (GPIOx == GPIOE)
    4df4:	683a      	ldr	r2, [r7, #0]
    4df6:	4b1e      	ldr	r3, [pc, #120]	(4e70 <GPIO_DeInit+0x10c>)
    4df8:	429a      	cmp	r2, r3
    4dfa:	d10c      	bne.n	4e16 <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    4dfc:	f04f 0040 	mov.w	r0, #64	; 0x40
    4e00:	f04f 0101 	mov.w	r1, #1	; 0x1
    4e04:	f7ff fa42 	bl	428c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    4e08:	f04f 0040 	mov.w	r0, #64	; 0x40
    4e0c:	f04f 0100 	mov.w	r1, #0	; 0x0
    4e10:	f7ff fa3c 	bl	428c <RCC_APB2PeriphResetCmd>
    4e14:	e020      	b.n	4e58 <GPIO_DeInit+0xf4>
  } 
  else if (GPIOx == GPIOF)
    4e16:	683a      	ldr	r2, [r7, #0]
    4e18:	4b16      	ldr	r3, [pc, #88]	(4e74 <GPIO_DeInit+0x110>)
    4e1a:	429a      	cmp	r2, r3
    4e1c:	d10c      	bne.n	4e38 <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    4e1e:	f04f 0080 	mov.w	r0, #128	; 0x80
    4e22:	f04f 0101 	mov.w	r1, #1	; 0x1
    4e26:	f7ff fa31 	bl	428c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    4e2a:	f04f 0080 	mov.w	r0, #128	; 0x80
    4e2e:	f04f 0100 	mov.w	r1, #0	; 0x0
    4e32:	f7ff fa2b 	bl	428c <RCC_APB2PeriphResetCmd>
    4e36:	e00f      	b.n	4e58 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
    4e38:	683a      	ldr	r2, [r7, #0]
    4e3a:	4b0f      	ldr	r3, [pc, #60]	(4e78 <GPIO_DeInit+0x114>)
    4e3c:	429a      	cmp	r2, r3
    4e3e:	d10b      	bne.n	4e58 <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    4e40:	f44f 7080 	mov.w	r0, #256	; 0x100
    4e44:	f04f 0101 	mov.w	r1, #1	; 0x1
    4e48:	f7ff fa20 	bl	428c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    4e4c:	f44f 7080 	mov.w	r0, #256	; 0x100
    4e50:	f04f 0100 	mov.w	r1, #0	; 0x0
    4e54:	f7ff fa1a 	bl	428c <RCC_APB2PeriphResetCmd>
    }
  }
}
    4e58:	f107 0704 	add.w	r7, r7, #4	; 0x4
    4e5c:	46bd      	mov	sp, r7
    4e5e:	bd80      	pop	{r7, pc}
    4e60:	40010800 	.word	0x40010800
    4e64:	40010c00 	.word	0x40010c00
    4e68:	40011000 	.word	0x40011000
    4e6c:	40011400 	.word	0x40011400
    4e70:	40011800 	.word	0x40011800
    4e74:	40011c00 	.word	0x40011c00
    4e78:	40012000 	.word	0x40012000

00004e7c <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    4e7c:	b580      	push	{r7, lr}
    4e7e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    4e80:	f04f 0001 	mov.w	r0, #1	; 0x1
    4e84:	f04f 0101 	mov.w	r1, #1	; 0x1
    4e88:	f7ff fa00 	bl	428c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    4e8c:	f04f 0001 	mov.w	r0, #1	; 0x1
    4e90:	f04f 0100 	mov.w	r1, #0	; 0x0
    4e94:	f7ff f9fa 	bl	428c <RCC_APB2PeriphResetCmd>
}
    4e98:	46bd      	mov	sp, r7
    4e9a:	bd80      	pop	{r7, pc}

00004e9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    4e9c:	b480      	push	{r7}
    4e9e:	b088      	sub	sp, #32
    4ea0:	af00      	add	r7, sp, #0
    4ea2:	6078      	str	r0, [r7, #4]
    4ea4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    4ea6:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eaa:	60bb      	str	r3, [r7, #8]
    4eac:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eb0:	60fb      	str	r3, [r7, #12]
    4eb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eb6:	613b      	str	r3, [r7, #16]
    4eb8:	f04f 0300 	mov.w	r3, #0	; 0x0
    4ebc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    4ebe:	f04f 0300 	mov.w	r3, #0	; 0x0
    4ec2:	61bb      	str	r3, [r7, #24]
    4ec4:	f04f 0300 	mov.w	r3, #0	; 0x0
    4ec8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    4eca:	683b      	ldr	r3, [r7, #0]
    4ecc:	689b      	ldr	r3, [r3, #8]
    4ece:	f003 030f 	and.w	r3, r3, #15	; 0xf
    4ed2:	60bb      	str	r3, [r7, #8]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    4ed4:	683b      	ldr	r3, [r7, #0]
    4ed6:	689b      	ldr	r3, [r3, #8]
    4ed8:	f003 0310 	and.w	r3, r3, #16	; 0x10
    4edc:	2b00      	cmp	r3, #0
    4ede:	d005      	beq.n	4eec <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    4ee0:	683b      	ldr	r3, [r7, #0]
    4ee2:	685a      	ldr	r2, [r3, #4]
    4ee4:	68bb      	ldr	r3, [r7, #8]
    4ee6:	ea43 0302 	orr.w	r3, r3, r2
    4eea:	60bb      	str	r3, [r7, #8]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    4eec:	683b      	ldr	r3, [r7, #0]
    4eee:	881b      	ldrh	r3, [r3, #0]
    4ef0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d051      	beq.n	4f9c <GPIO_Init+0x100>
  {
    tmpreg = GPIOx->CRL;
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	681b      	ldr	r3, [r3, #0]
    4efc:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    4efe:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f02:	613b      	str	r3, [r7, #16]
    4f04:	e044      	b.n	4f90 <GPIO_Init+0xf4>
    {
      pos = ((uint32_t)0x01) << pinpos;
    4f06:	693a      	ldr	r2, [r7, #16]
    4f08:	f04f 0301 	mov.w	r3, #1	; 0x1
    4f0c:	fa03 f302 	lsl.w	r3, r3, r2
    4f10:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    4f12:	683b      	ldr	r3, [r7, #0]
    4f14:	881b      	ldrh	r3, [r3, #0]
    4f16:	461a      	mov	r2, r3
    4f18:	697b      	ldr	r3, [r7, #20]
    4f1a:	ea02 0303 	and.w	r3, r2, r3
    4f1e:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    4f20:	68fa      	ldr	r2, [r7, #12]
    4f22:	697b      	ldr	r3, [r7, #20]
    4f24:	429a      	cmp	r2, r3
    4f26:	d12f      	bne.n	4f88 <GPIO_Init+0xec>
      {
        pos = pinpos << 2;
    4f28:	693b      	ldr	r3, [r7, #16]
    4f2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4f2e:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    4f30:	697a      	ldr	r2, [r7, #20]
    4f32:	f04f 030f 	mov.w	r3, #15	; 0xf
    4f36:	fa03 f302 	lsl.w	r3, r3, r2
    4f3a:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    4f3c:	69fb      	ldr	r3, [r7, #28]
    4f3e:	ea6f 0203 	mvn.w	r2, r3
    4f42:	69bb      	ldr	r3, [r7, #24]
    4f44:	ea03 0302 	and.w	r3, r3, r2
    4f48:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    4f4a:	697a      	ldr	r2, [r7, #20]
    4f4c:	68bb      	ldr	r3, [r7, #8]
    4f4e:	fa03 f202 	lsl.w	r2, r3, r2
    4f52:	69bb      	ldr	r3, [r7, #24]
    4f54:	ea43 0302 	orr.w	r3, r3, r2
    4f58:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    4f5a:	683b      	ldr	r3, [r7, #0]
    4f5c:	689b      	ldr	r3, [r3, #8]
    4f5e:	2b28      	cmp	r3, #40
    4f60:	d107      	bne.n	4f72 <GPIO_Init+0xd6>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    4f62:	693a      	ldr	r2, [r7, #16]
    4f64:	f04f 0301 	mov.w	r3, #1	; 0x1
    4f68:	fa03 f202 	lsl.w	r2, r3, r2
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	615a      	str	r2, [r3, #20]
    4f70:	e00a      	b.n	4f88 <GPIO_Init+0xec>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    4f72:	683b      	ldr	r3, [r7, #0]
    4f74:	689b      	ldr	r3, [r3, #8]
    4f76:	2b48      	cmp	r3, #72
    4f78:	d106      	bne.n	4f88 <GPIO_Init+0xec>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    4f7a:	693a      	ldr	r2, [r7, #16]
    4f7c:	f04f 0301 	mov.w	r3, #1	; 0x1
    4f80:	fa03 f202 	lsl.w	r2, r3, r2
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    4f88:	693b      	ldr	r3, [r7, #16]
    4f8a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    4f8e:	613b      	str	r3, [r7, #16]
    4f90:	693b      	ldr	r3, [r7, #16]
    4f92:	2b07      	cmp	r3, #7
    4f94:	d9b7      	bls.n	4f06 <GPIO_Init+0x6a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    4f96:	687a      	ldr	r2, [r7, #4]
    4f98:	69bb      	ldr	r3, [r7, #24]
    4f9a:	6013      	str	r3, [r2, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    4f9c:	683b      	ldr	r3, [r7, #0]
    4f9e:	881b      	ldrh	r3, [r3, #0]
    4fa0:	2bff      	cmp	r3, #255
    4fa2:	d959      	bls.n	5058 <GPIO_Init+0x1bc>
  {
    tmpreg = GPIOx->CRH;
    4fa4:	687b      	ldr	r3, [r7, #4]
    4fa6:	685b      	ldr	r3, [r3, #4]
    4fa8:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    4faa:	f04f 0300 	mov.w	r3, #0	; 0x0
    4fae:	613b      	str	r3, [r7, #16]
    4fb0:	e04c      	b.n	504c <GPIO_Init+0x1b0>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    4fb2:	693b      	ldr	r3, [r7, #16]
    4fb4:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4fb8:	461a      	mov	r2, r3
    4fba:	f04f 0301 	mov.w	r3, #1	; 0x1
    4fbe:	fa03 f302 	lsl.w	r3, r3, r2
    4fc2:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    4fc4:	683b      	ldr	r3, [r7, #0]
    4fc6:	881b      	ldrh	r3, [r3, #0]
    4fc8:	461a      	mov	r2, r3
    4fca:	697b      	ldr	r3, [r7, #20]
    4fcc:	ea02 0303 	and.w	r3, r2, r3
    4fd0:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    4fd2:	68fa      	ldr	r2, [r7, #12]
    4fd4:	697b      	ldr	r3, [r7, #20]
    4fd6:	429a      	cmp	r2, r3
    4fd8:	d134      	bne.n	5044 <GPIO_Init+0x1a8>
      {
        pos = pinpos << 2;
    4fda:	693b      	ldr	r3, [r7, #16]
    4fdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4fe0:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    4fe2:	697a      	ldr	r2, [r7, #20]
    4fe4:	f04f 030f 	mov.w	r3, #15	; 0xf
    4fe8:	fa03 f302 	lsl.w	r3, r3, r2
    4fec:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    4fee:	69fb      	ldr	r3, [r7, #28]
    4ff0:	ea6f 0203 	mvn.w	r2, r3
    4ff4:	69bb      	ldr	r3, [r7, #24]
    4ff6:	ea03 0302 	and.w	r3, r3, r2
    4ffa:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    4ffc:	697a      	ldr	r2, [r7, #20]
    4ffe:	68bb      	ldr	r3, [r7, #8]
    5000:	fa03 f202 	lsl.w	r2, r3, r2
    5004:	69bb      	ldr	r3, [r7, #24]
    5006:	ea43 0302 	orr.w	r3, r3, r2
    500a:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    500c:	683b      	ldr	r3, [r7, #0]
    500e:	689b      	ldr	r3, [r3, #8]
    5010:	2b28      	cmp	r3, #40
    5012:	d109      	bne.n	5028 <GPIO_Init+0x18c>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    5014:	693b      	ldr	r3, [r7, #16]
    5016:	f103 0308 	add.w	r3, r3, #8	; 0x8
    501a:	461a      	mov	r2, r3
    501c:	f04f 0301 	mov.w	r3, #1	; 0x1
    5020:	fa03 f202 	lsl.w	r2, r3, r2
    5024:	687b      	ldr	r3, [r7, #4]
    5026:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    5028:	683b      	ldr	r3, [r7, #0]
    502a:	689b      	ldr	r3, [r3, #8]
    502c:	2b48      	cmp	r3, #72
    502e:	d109      	bne.n	5044 <GPIO_Init+0x1a8>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    5030:	693b      	ldr	r3, [r7, #16]
    5032:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5036:	461a      	mov	r2, r3
    5038:	f04f 0301 	mov.w	r3, #1	; 0x1
    503c:	fa03 f202 	lsl.w	r2, r3, r2
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    5044:	693b      	ldr	r3, [r7, #16]
    5046:	f103 0301 	add.w	r3, r3, #1	; 0x1
    504a:	613b      	str	r3, [r7, #16]
    504c:	693b      	ldr	r3, [r7, #16]
    504e:	2b07      	cmp	r3, #7
    5050:	d9af      	bls.n	4fb2 <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    5052:	687a      	ldr	r2, [r7, #4]
    5054:	69bb      	ldr	r3, [r7, #24]
    5056:	6053      	str	r3, [r2, #4]
  }
}
    5058:	f107 0720 	add.w	r7, r7, #32	; 0x20
    505c:	46bd      	mov	sp, r7
    505e:	bc80      	pop	{r7}
    5060:	4770      	bx	lr
    5062:	46c0      	nop			(mov r8, r8)

00005064 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    5064:	b480      	push	{r7}
    5066:	b081      	sub	sp, #4
    5068:	af00      	add	r7, sp, #0
    506a:	6038      	str	r0, [r7, #0]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    506c:	683a      	ldr	r2, [r7, #0]
    506e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5072:	8013      	strh	r3, [r2, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    5074:	683a      	ldr	r2, [r7, #0]
    5076:	f04f 0302 	mov.w	r3, #2	; 0x2
    507a:	6053      	str	r3, [r2, #4]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    507c:	683a      	ldr	r2, [r7, #0]
    507e:	f04f 0304 	mov.w	r3, #4	; 0x4
    5082:	6093      	str	r3, [r2, #8]
}
    5084:	f107 0704 	add.w	r7, r7, #4	; 0x4
    5088:	46bd      	mov	sp, r7
    508a:	bc80      	pop	{r7}
    508c:	4770      	bx	lr
    508e:	46c0      	nop			(mov r8, r8)

00005090 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    5090:	b480      	push	{r7}
    5092:	b083      	sub	sp, #12
    5094:	af00      	add	r7, sp, #0
    5096:	6078      	str	r0, [r7, #4]
    5098:	460b      	mov	r3, r1
    509a:	803b      	strh	r3, [r7, #0]
  uint8_t bitstatus = 0x00;
    509c:	f04f 0300 	mov.w	r3, #0	; 0x0
    50a0:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	689a      	ldr	r2, [r3, #8]
    50a6:	883b      	ldrh	r3, [r7, #0]
    50a8:	ea02 0303 	and.w	r3, r2, r3
    50ac:	2b00      	cmp	r3, #0
    50ae:	d003      	beq.n	50b8 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    50b0:	f04f 0301 	mov.w	r3, #1	; 0x1
    50b4:	72fb      	strb	r3, [r7, #11]
    50b6:	e002      	b.n	50be <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    50b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    50bc:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    50be:	7afb      	ldrb	r3, [r7, #11]
}
    50c0:	4618      	mov	r0, r3
    50c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    50c6:	46bd      	mov	sp, r7
    50c8:	bc80      	pop	{r7}
    50ca:	4770      	bx	lr

000050cc <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    50cc:	b480      	push	{r7}
    50ce:	b081      	sub	sp, #4
    50d0:	af00      	add	r7, sp, #0
    50d2:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    50d4:	683b      	ldr	r3, [r7, #0]
    50d6:	689b      	ldr	r3, [r3, #8]
    50d8:	b29b      	uxth	r3, r3
}
    50da:	4618      	mov	r0, r3
    50dc:	f107 0704 	add.w	r7, r7, #4	; 0x4
    50e0:	46bd      	mov	sp, r7
    50e2:	bc80      	pop	{r7}
    50e4:	4770      	bx	lr
    50e6:	46c0      	nop			(mov r8, r8)

000050e8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    50e8:	b480      	push	{r7}
    50ea:	b083      	sub	sp, #12
    50ec:	af00      	add	r7, sp, #0
    50ee:	6078      	str	r0, [r7, #4]
    50f0:	460b      	mov	r3, r1
    50f2:	803b      	strh	r3, [r7, #0]
  uint8_t bitstatus = 0x00;
    50f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    50f8:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	68da      	ldr	r2, [r3, #12]
    50fe:	883b      	ldrh	r3, [r7, #0]
    5100:	ea02 0303 	and.w	r3, r2, r3
    5104:	2b00      	cmp	r3, #0
    5106:	d003      	beq.n	5110 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    5108:	f04f 0301 	mov.w	r3, #1	; 0x1
    510c:	72fb      	strb	r3, [r7, #11]
    510e:	e002      	b.n	5116 <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    5110:	f04f 0300 	mov.w	r3, #0	; 0x0
    5114:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    5116:	7afb      	ldrb	r3, [r7, #11]
}
    5118:	4618      	mov	r0, r3
    511a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    511e:	46bd      	mov	sp, r7
    5120:	bc80      	pop	{r7}
    5122:	4770      	bx	lr

00005124 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    5124:	b480      	push	{r7}
    5126:	b081      	sub	sp, #4
    5128:	af00      	add	r7, sp, #0
    512a:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    512c:	683b      	ldr	r3, [r7, #0]
    512e:	68db      	ldr	r3, [r3, #12]
    5130:	b29b      	uxth	r3, r3
}
    5132:	4618      	mov	r0, r3
    5134:	f107 0704 	add.w	r7, r7, #4	; 0x4
    5138:	46bd      	mov	sp, r7
    513a:	bc80      	pop	{r7}
    513c:	4770      	bx	lr
    513e:	46c0      	nop			(mov r8, r8)

00005140 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    5140:	b480      	push	{r7}
    5142:	b082      	sub	sp, #8
    5144:	af00      	add	r7, sp, #0
    5146:	6078      	str	r0, [r7, #4]
    5148:	460b      	mov	r3, r1
    514a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    514c:	883a      	ldrh	r2, [r7, #0]
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	611a      	str	r2, [r3, #16]
}
    5152:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5156:	46bd      	mov	sp, r7
    5158:	bc80      	pop	{r7}
    515a:	4770      	bx	lr

0000515c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    515c:	b480      	push	{r7}
    515e:	b082      	sub	sp, #8
    5160:	af00      	add	r7, sp, #0
    5162:	6078      	str	r0, [r7, #4]
    5164:	460b      	mov	r3, r1
    5166:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    5168:	883a      	ldrh	r2, [r7, #0]
    516a:	687b      	ldr	r3, [r7, #4]
    516c:	615a      	str	r2, [r3, #20]
}
    516e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5172:	46bd      	mov	sp, r7
    5174:	bc80      	pop	{r7}
    5176:	4770      	bx	lr

00005178 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    5178:	b480      	push	{r7}
    517a:	b083      	sub	sp, #12
    517c:	af00      	add	r7, sp, #0
    517e:	60b8      	str	r0, [r7, #8]
    5180:	460b      	mov	r3, r1
    5182:	603a      	str	r2, [r7, #0]
    5184:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    5186:	683b      	ldr	r3, [r7, #0]
    5188:	2b00      	cmp	r3, #0
    518a:	d003      	beq.n	5194 <GPIO_WriteBit+0x1c>
  {
    GPIOx->BSRR = GPIO_Pin;
    518c:	88ba      	ldrh	r2, [r7, #4]
    518e:	68bb      	ldr	r3, [r7, #8]
    5190:	611a      	str	r2, [r3, #16]
    5192:	e002      	b.n	519a <GPIO_WriteBit+0x22>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    5194:	88ba      	ldrh	r2, [r7, #4]
    5196:	68bb      	ldr	r3, [r7, #8]
    5198:	615a      	str	r2, [r3, #20]
  }
}
    519a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    519e:	46bd      	mov	sp, r7
    51a0:	bc80      	pop	{r7}
    51a2:	4770      	bx	lr

000051a4 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    51a4:	b480      	push	{r7}
    51a6:	b082      	sub	sp, #8
    51a8:	af00      	add	r7, sp, #0
    51aa:	6078      	str	r0, [r7, #4]
    51ac:	460b      	mov	r3, r1
    51ae:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    51b0:	883a      	ldrh	r2, [r7, #0]
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	60da      	str	r2, [r3, #12]
}
    51b6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51ba:	46bd      	mov	sp, r7
    51bc:	bc80      	pop	{r7}
    51be:	4770      	bx	lr

000051c0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    51c0:	b480      	push	{r7}
    51c2:	b083      	sub	sp, #12
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
    51c8:	460b      	mov	r3, r1
    51ca:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0x00010000;
    51cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    51d0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    51d2:	883a      	ldrh	r2, [r7, #0]
    51d4:	68bb      	ldr	r3, [r7, #8]
    51d6:	ea43 0302 	orr.w	r3, r3, r2
    51da:	60bb      	str	r3, [r7, #8]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    51dc:	687a      	ldr	r2, [r7, #4]
    51de:	68bb      	ldr	r3, [r7, #8]
    51e0:	6193      	str	r3, [r2, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    51e2:	883a      	ldrh	r2, [r7, #0]
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    51e8:	687a      	ldr	r2, [r7, #4]
    51ea:	68bb      	ldr	r3, [r7, #8]
    51ec:	6193      	str	r3, [r2, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    51ee:	687b      	ldr	r3, [r7, #4]
    51f0:	699b      	ldr	r3, [r3, #24]
    51f2:	60bb      	str	r3, [r7, #8]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	699b      	ldr	r3, [r3, #24]
    51f8:	60bb      	str	r3, [r7, #8]
}
    51fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    51fe:	46bd      	mov	sp, r7
    5200:	bc80      	pop	{r7}
    5202:	4770      	bx	lr

00005204 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    5204:	b480      	push	{r7}
    5206:	b083      	sub	sp, #12
    5208:	af00      	add	r7, sp, #0
    520a:	4603      	mov	r3, r0
    520c:	460a      	mov	r2, r1
    520e:	713b      	strb	r3, [r7, #4]
    5210:	4613      	mov	r3, r2
    5212:	703b      	strb	r3, [r7, #0]
  uint32_t tmpreg = 0x00;
    5214:	f04f 0300 	mov.w	r3, #0	; 0x0
    5218:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    521a:	4b0e      	ldr	r3, [pc, #56]	(5254 <GPIO_EventOutputConfig+0x50>)
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	60bb      	str	r3, [r7, #8]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    5220:	68ba      	ldr	r2, [r7, #8]
    5222:	f64f 7380 	movw	r3, #65408	; 0xff80
    5226:	ea02 0303 	and.w	r3, r2, r3
    522a:	60bb      	str	r3, [r7, #8]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    522c:	793b      	ldrb	r3, [r7, #4]
    522e:	ea4f 1203 	mov.w	r2, r3, lsl #4
    5232:	68bb      	ldr	r3, [r7, #8]
    5234:	ea43 0302 	orr.w	r3, r3, r2
    5238:	60bb      	str	r3, [r7, #8]
  tmpreg |= GPIO_PinSource;
    523a:	783a      	ldrb	r2, [r7, #0]
    523c:	68bb      	ldr	r3, [r7, #8]
    523e:	ea43 0302 	orr.w	r3, r3, r2
    5242:	60bb      	str	r3, [r7, #8]
  AFIO->EVCR = tmpreg;
    5244:	4a03      	ldr	r2, [pc, #12]	(5254 <GPIO_EventOutputConfig+0x50>)
    5246:	68bb      	ldr	r3, [r7, #8]
    5248:	6013      	str	r3, [r2, #0]
}
    524a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    524e:	46bd      	mov	sp, r7
    5250:	bc80      	pop	{r7}
    5252:	4770      	bx	lr
    5254:	40010000 	.word	0x40010000

00005258 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    5258:	b480      	push	{r7}
    525a:	b081      	sub	sp, #4
    525c:	af00      	add	r7, sp, #0
    525e:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    5260:	4a03      	ldr	r2, [pc, #12]	(5270 <GPIO_EventOutputCmd+0x18>)
    5262:	683b      	ldr	r3, [r7, #0]
    5264:	6013      	str	r3, [r2, #0]
}
    5266:	f107 0704 	add.w	r7, r7, #4	; 0x4
    526a:	46bd      	mov	sp, r7
    526c:	bc80      	pop	{r7}
    526e:	4770      	bx	lr
    5270:	4220001c 	.word	0x4220001c

00005274 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    5274:	b480      	push	{r7}
    5276:	b086      	sub	sp, #24
    5278:	af00      	add	r7, sp, #0
    527a:	6078      	str	r0, [r7, #4]
    527c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    527e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5282:	60bb      	str	r3, [r7, #8]
    5284:	f04f 0300 	mov.w	r3, #0	; 0x0
    5288:	60fb      	str	r3, [r7, #12]
    528a:	f04f 0300 	mov.w	r3, #0	; 0x0
    528e:	613b      	str	r3, [r7, #16]
    5290:	f04f 0300 	mov.w	r3, #0	; 0x0
    5294:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
    5296:	4b31      	ldr	r3, [pc, #196]	(535c <GPIO_PinRemapConfig+0xe8>)
    5298:	685b      	ldr	r3, [r3, #4]
    529a:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    52a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
    52a6:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
    52a8:	687b      	ldr	r3, [r7, #4]
    52aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
    52ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    52b2:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    52b4:	687b      	ldr	r3, [r7, #4]
    52b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    52ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    52be:	d10b      	bne.n	52d8 <GPIO_PinRemapConfig+0x64>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    52c0:	693b      	ldr	r3, [r7, #16]
    52c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    52c6:	613b      	str	r3, [r7, #16]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    52c8:	4a24      	ldr	r2, [pc, #144]	(535c <GPIO_PinRemapConfig+0xe8>)
    52ca:	f8df 3090 	ldr.w	r3, [pc, #144]	; 535c <GPIO_PinRemapConfig+0xe8>
    52ce:	685b      	ldr	r3, [r3, #4]
    52d0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    52d4:	6053      	str	r3, [r2, #4]
    52d6:	e029      	b.n	532c <GPIO_PinRemapConfig+0xb8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    52de:	2b00      	cmp	r3, #0
    52e0:	d011      	beq.n	5306 <GPIO_PinRemapConfig+0x92>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    52e2:	697a      	ldr	r2, [r7, #20]
    52e4:	f04f 0303 	mov.w	r3, #3	; 0x3
    52e8:	fa03 f302 	lsl.w	r3, r3, r2
    52ec:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    52ee:	68fb      	ldr	r3, [r7, #12]
    52f0:	ea6f 0203 	mvn.w	r2, r3
    52f4:	693b      	ldr	r3, [r7, #16]
    52f6:	ea03 0302 	and.w	r3, r3, r2
    52fa:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    52fc:	693b      	ldr	r3, [r7, #16]
    52fe:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    5302:	613b      	str	r3, [r7, #16]
    5304:	e012      	b.n	532c <GPIO_PinRemapConfig+0xb8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	ea4f 5353 	mov.w	r3, r3, lsr #21
    530c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5310:	461a      	mov	r2, r3
    5312:	68bb      	ldr	r3, [r7, #8]
    5314:	fa03 f302 	lsl.w	r3, r3, r2
    5318:	ea6f 0203 	mvn.w	r2, r3
    531c:	693b      	ldr	r3, [r7, #16]
    531e:	ea03 0302 	and.w	r3, r3, r2
    5322:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    5324:	693b      	ldr	r3, [r7, #16]
    5326:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    532a:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
    532c:	683b      	ldr	r3, [r7, #0]
    532e:	2b00      	cmp	r3, #0
    5330:	d00c      	beq.n	534c <GPIO_PinRemapConfig+0xd8>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    5332:	687b      	ldr	r3, [r7, #4]
    5334:	ea4f 5353 	mov.w	r3, r3, lsr #21
    5338:	ea4f 1303 	mov.w	r3, r3, lsl #4
    533c:	461a      	mov	r2, r3
    533e:	68bb      	ldr	r3, [r7, #8]
    5340:	fa03 f202 	lsl.w	r2, r3, r2
    5344:	693b      	ldr	r3, [r7, #16]
    5346:	ea43 0302 	orr.w	r3, r3, r2
    534a:	613b      	str	r3, [r7, #16]
  }

  AFIO->MAPR = tmpreg;
    534c:	4a03      	ldr	r2, [pc, #12]	(535c <GPIO_PinRemapConfig+0xe8>)
    534e:	693b      	ldr	r3, [r7, #16]
    5350:	6053      	str	r3, [r2, #4]
}
    5352:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5356:	46bd      	mov	sp, r7
    5358:	bc80      	pop	{r7}
    535a:	4770      	bx	lr
    535c:	40010000 	.word	0x40010000

00005360 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    5360:	b480      	push	{r7}
    5362:	b083      	sub	sp, #12
    5364:	af00      	add	r7, sp, #0
    5366:	4603      	mov	r3, r0
    5368:	460a      	mov	r2, r1
    536a:	713b      	strb	r3, [r7, #4]
    536c:	4613      	mov	r3, r2
    536e:	703b      	strb	r3, [r7, #0]
  uint32_t tmp = 0x00;
    5370:	f04f 0300 	mov.w	r3, #0	; 0x0
    5374:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    5376:	783b      	ldrb	r3, [r7, #0]
    5378:	f003 0303 	and.w	r3, r3, #3	; 0x3
    537c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    5380:	f04f 030f 	mov.w	r3, #15	; 0xf
    5384:	fa03 f302 	lsl.w	r3, r3, r2
    5388:	60bb      	str	r3, [r7, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    538a:	491d      	ldr	r1, [pc, #116]	(5400 <GPIO_EXTILineConfig+0xa0>)
    538c:	783b      	ldrb	r3, [r7, #0]
    538e:	ea4f 0393 	mov.w	r3, r3, lsr #2
    5392:	b2db      	uxtb	r3, r3
    5394:	4618      	mov	r0, r3
    5396:	4a1a      	ldr	r2, [pc, #104]	(5400 <GPIO_EXTILineConfig+0xa0>)
    5398:	783b      	ldrb	r3, [r7, #0]
    539a:	ea4f 0393 	mov.w	r3, r3, lsr #2
    539e:	b2db      	uxtb	r3, r3
    53a0:	f103 0302 	add.w	r3, r3, #2	; 0x2
    53a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    53a8:	68bb      	ldr	r3, [r7, #8]
    53aa:	ea6f 0303 	mvn.w	r3, r3
    53ae:	ea02 0203 	and.w	r2, r2, r3
    53b2:	f100 0302 	add.w	r3, r0, #2	; 0x2
    53b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    53ba:	4811      	ldr	r0, [pc, #68]	(5400 <GPIO_EXTILineConfig+0xa0>)
    53bc:	783b      	ldrb	r3, [r7, #0]
    53be:	ea4f 0393 	mov.w	r3, r3, lsr #2
    53c2:	b2db      	uxtb	r3, r3
    53c4:	469c      	mov	ip, r3
    53c6:	4a0e      	ldr	r2, [pc, #56]	(5400 <GPIO_EXTILineConfig+0xa0>)
    53c8:	783b      	ldrb	r3, [r7, #0]
    53ca:	ea4f 0393 	mov.w	r3, r3, lsr #2
    53ce:	b2db      	uxtb	r3, r3
    53d0:	f103 0302 	add.w	r3, r3, #2	; 0x2
    53d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    53d8:	793a      	ldrb	r2, [r7, #4]
    53da:	783b      	ldrb	r3, [r7, #0]
    53dc:	f003 0303 	and.w	r3, r3, #3	; 0x3
    53e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    53e4:	fa02 f303 	lsl.w	r3, r2, r3
    53e8:	ea41 0203 	orr.w	r2, r1, r3
    53ec:	f10c 0302 	add.w	r3, ip, #2	; 0x2
    53f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    53f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    53f8:	46bd      	mov	sp, r7
    53fa:	bc80      	pop	{r7}
    53fc:	4770      	bx	lr
    53fe:	46c0      	nop			(mov r8, r8)
    5400:	40010000 	.word	0x40010000

00005404 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    5404:	b480      	push	{r7}
    5406:	b081      	sub	sp, #4
    5408:	af00      	add	r7, sp, #0
    540a:	6038      	str	r0, [r7, #0]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    540c:	4a03      	ldr	r2, [pc, #12]	(541c <GPIO_ETH_MediaInterfaceConfig+0x18>)
    540e:	683b      	ldr	r3, [r7, #0]
    5410:	6013      	str	r3, [r2, #0]
}
    5412:	f107 0704 	add.w	r7, r7, #4	; 0x4
    5416:	46bd      	mov	sp, r7
    5418:	bc80      	pop	{r7}
    541a:	4770      	bx	lr
    541c:	422000dc 	.word	0x422000dc

00005420 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    5420:	b580      	push	{r7, lr}
    5422:	b081      	sub	sp, #4
    5424:	af00      	add	r7, sp, #0
    5426:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    5428:	683a      	ldr	r2, [r7, #0]
    542a:	4b2b      	ldr	r3, [pc, #172]	(54d8 <USART_DeInit+0xb8>)
    542c:	429a      	cmp	r2, r3
    542e:	d10c      	bne.n	544a <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    5430:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    5434:	f04f 0101 	mov.w	r1, #1	; 0x1
    5438:	f7fe ff28 	bl	428c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    543c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    5440:	f04f 0100 	mov.w	r1, #0	; 0x0
    5444:	f7fe ff22 	bl	428c <RCC_APB2PeriphResetCmd>
    5448:	e042      	b.n	54d0 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
    544a:	683a      	ldr	r2, [r7, #0]
    544c:	4b23      	ldr	r3, [pc, #140]	(54dc <USART_DeInit+0xbc>)
    544e:	429a      	cmp	r2, r3
    5450:	d10c      	bne.n	546c <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    5452:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    5456:	f04f 0101 	mov.w	r1, #1	; 0x1
    545a:	f7fe ff37 	bl	42cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    545e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    5462:	f04f 0100 	mov.w	r1, #0	; 0x0
    5466:	f7fe ff31 	bl	42cc <RCC_APB1PeriphResetCmd>
    546a:	e031      	b.n	54d0 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
    546c:	683a      	ldr	r2, [r7, #0]
    546e:	4b1c      	ldr	r3, [pc, #112]	(54e0 <USART_DeInit+0xc0>)
    5470:	429a      	cmp	r2, r3
    5472:	d10c      	bne.n	548e <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    5474:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    5478:	f04f 0101 	mov.w	r1, #1	; 0x1
    547c:	f7fe ff26 	bl	42cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    5480:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    5484:	f04f 0100 	mov.w	r1, #0	; 0x0
    5488:	f7fe ff20 	bl	42cc <RCC_APB1PeriphResetCmd>
    548c:	e020      	b.n	54d0 <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
    548e:	683a      	ldr	r2, [r7, #0]
    5490:	4b14      	ldr	r3, [pc, #80]	(54e4 <USART_DeInit+0xc4>)
    5492:	429a      	cmp	r2, r3
    5494:	d10c      	bne.n	54b0 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    5496:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    549a:	f04f 0101 	mov.w	r1, #1	; 0x1
    549e:	f7fe ff15 	bl	42cc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    54a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    54a6:	f04f 0100 	mov.w	r1, #0	; 0x0
    54aa:	f7fe ff0f 	bl	42cc <RCC_APB1PeriphResetCmd>
    54ae:	e00f      	b.n	54d0 <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
    54b0:	683a      	ldr	r2, [r7, #0]
    54b2:	4b0d      	ldr	r3, [pc, #52]	(54e8 <USART_DeInit+0xc8>)
    54b4:	429a      	cmp	r2, r3
    54b6:	d10b      	bne.n	54d0 <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    54b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    54bc:	f04f 0101 	mov.w	r1, #1	; 0x1
    54c0:	f7fe ff04 	bl	42cc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    54c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    54c8:	f04f 0100 	mov.w	r1, #0	; 0x0
    54cc:	f7fe fefe 	bl	42cc <RCC_APB1PeriphResetCmd>
    }
  }
}
    54d0:	f107 0704 	add.w	r7, r7, #4	; 0x4
    54d4:	46bd      	mov	sp, r7
    54d6:	bd80      	pop	{r7, pc}
    54d8:	40013800 	.word	0x40013800
    54dc:	40004400 	.word	0x40004400
    54e0:	40004800 	.word	0x40004800
    54e4:	40004c00 	.word	0x40004c00
    54e8:	40005000 	.word	0x40005000

000054ec <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    54ec:	b580      	push	{r7, lr}
    54ee:	b08c      	sub	sp, #48
    54f0:	af00      	add	r7, sp, #0
    54f2:	6078      	str	r0, [r7, #4]
    54f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    54f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    54fa:	61fb      	str	r3, [r7, #28]
    54fc:	f04f 0300 	mov.w	r3, #0	; 0x0
    5500:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
    5502:	f04f 0300 	mov.w	r3, #0	; 0x0
    5506:	627b      	str	r3, [r7, #36]
  uint32_t fractionaldivider = 0x00;
    5508:	f04f 0300 	mov.w	r3, #0	; 0x0
    550c:	62bb      	str	r3, [r7, #40]
  uint32_t usartxbase = 0;
    550e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5512:	62fb      	str	r3, [r7, #44]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    5514:	687b      	ldr	r3, [r7, #4]
    5516:	62fb      	str	r3, [r7, #44]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    5518:	687b      	ldr	r3, [r7, #4]
    551a:	8a1b      	ldrh	r3, [r3, #16]
    551c:	b29b      	uxth	r3, r3
    551e:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    5520:	69fa      	ldr	r2, [r7, #28]
    5522:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    5526:	ea02 0303 	and.w	r3, r2, r3
    552a:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    552c:	683b      	ldr	r3, [r7, #0]
    552e:	88db      	ldrh	r3, [r3, #6]
    5530:	461a      	mov	r2, r3
    5532:	69fb      	ldr	r3, [r7, #28]
    5534:	ea43 0302 	orr.w	r3, r3, r2
    5538:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    553a:	69fb      	ldr	r3, [r7, #28]
    553c:	b29b      	uxth	r3, r3
    553e:	687a      	ldr	r2, [r7, #4]
    5540:	8213      	strh	r3, [r2, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    5542:	687b      	ldr	r3, [r7, #4]
    5544:	899b      	ldrh	r3, [r3, #12]
    5546:	b29b      	uxth	r3, r3
    5548:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    554a:	69fa      	ldr	r2, [r7, #28]
    554c:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    5550:	ea02 0303 	and.w	r3, r2, r3
    5554:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    5556:	683b      	ldr	r3, [r7, #0]
    5558:	889a      	ldrh	r2, [r3, #4]
    555a:	683b      	ldr	r3, [r7, #0]
    555c:	891b      	ldrh	r3, [r3, #8]
    555e:	ea42 0303 	orr.w	r3, r2, r3
    5562:	b29a      	uxth	r2, r3
    5564:	683b      	ldr	r3, [r7, #0]
    5566:	895b      	ldrh	r3, [r3, #10]
    5568:	ea42 0303 	orr.w	r3, r2, r3
    556c:	b29b      	uxth	r3, r3
    556e:	461a      	mov	r2, r3
    5570:	69fb      	ldr	r3, [r7, #28]
    5572:	ea43 0302 	orr.w	r3, r3, r2
    5576:	61fb      	str	r3, [r7, #28]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    5578:	69fb      	ldr	r3, [r7, #28]
    557a:	b29b      	uxth	r3, r3
    557c:	687a      	ldr	r2, [r7, #4]
    557e:	8193      	strh	r3, [r2, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	8a9b      	ldrh	r3, [r3, #20]
    5584:	b29b      	uxth	r3, r3
    5586:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    5588:	69fa      	ldr	r2, [r7, #28]
    558a:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    558e:	ea02 0303 	and.w	r3, r2, r3
    5592:	61fb      	str	r3, [r7, #28]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    5594:	683b      	ldr	r3, [r7, #0]
    5596:	899b      	ldrh	r3, [r3, #12]
    5598:	461a      	mov	r2, r3
    559a:	69fb      	ldr	r3, [r7, #28]
    559c:	ea43 0302 	orr.w	r3, r3, r2
    55a0:	61fb      	str	r3, [r7, #28]
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    55a2:	69fb      	ldr	r3, [r7, #28]
    55a4:	b29b      	uxth	r3, r3
    55a6:	687a      	ldr	r2, [r7, #4]
    55a8:	8293      	strh	r3, [r2, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    55aa:	f107 0308 	add.w	r3, r7, #8	; 0x8
    55ae:	4618      	mov	r0, r3
    55b0:	f7fe fd50 	bl	4054 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    55b4:	6afa      	ldr	r2, [r7, #44]
    55b6:	4b24      	ldr	r3, [pc, #144]	(5648 <USART_Init+0x15c>)
    55b8:	429a      	cmp	r2, r3
    55ba:	d102      	bne.n	55c2 <USART_Init+0xd6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    55bc:	697b      	ldr	r3, [r7, #20]
    55be:	623b      	str	r3, [r7, #32]
    55c0:	e001      	b.n	55c6 <USART_Init+0xda>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    55c2:	693b      	ldr	r3, [r7, #16]
    55c4:	623b      	str	r3, [r7, #32]
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
    55c6:	6a39      	ldr	r1, [r7, #32]
    55c8:	460b      	mov	r3, r1
    55ca:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    55ce:	ea4f 0382 	mov.w	r3, r2, lsl #2
    55d2:	ebc2 0303 	rsb	r3, r2, r3
    55d6:	eb03 0201 	add.w	r2, r3, r1
    55da:	683b      	ldr	r3, [r7, #0]
    55dc:	681b      	ldr	r3, [r3, #0]
    55de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55e2:	fbb2 f3f3 	udiv	r3, r2, r3
    55e6:	627b      	str	r3, [r7, #36]
  tmpreg = (integerdivider / 0x64) << 0x04;
    55e8:	6a7a      	ldr	r2, [r7, #36]
    55ea:	4b18      	ldr	r3, [pc, #96]	(564c <USART_Init+0x160>)
    55ec:	fba3 1302 	umull	r1, r3, r3, r2
    55f0:	ea4f 1353 	mov.w	r3, r3, lsr #5
    55f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    55f8:	61fb      	str	r3, [r7, #28]
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
    55fa:	69fb      	ldr	r3, [r7, #28]
    55fc:	ea4f 1313 	mov.w	r3, r3, lsr #4
    5600:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5604:	ea4f 0283 	mov.w	r2, r3, lsl #2
    5608:	4413      	add	r3, r2
    560a:	ea4f 0283 	mov.w	r2, r3, lsl #2
    560e:	441a      	add	r2, r3
    5610:	6a7b      	ldr	r3, [r7, #36]
    5612:	ebc2 0303 	rsb	r3, r2, r3
    5616:	62bb      	str	r3, [r7, #40]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
    5618:	6abb      	ldr	r3, [r7, #40]
    561a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    561e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    5622:	4b0a      	ldr	r3, [pc, #40]	(564c <USART_Init+0x160>)
    5624:	fba3 1302 	umull	r1, r3, r3, r2
    5628:	ea4f 1353 	mov.w	r3, r3, lsr #5
    562c:	f003 020f 	and.w	r2, r3, #15	; 0xf
    5630:	69fb      	ldr	r3, [r7, #28]
    5632:	ea43 0302 	orr.w	r3, r3, r2
    5636:	61fb      	str	r3, [r7, #28]
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    5638:	69fb      	ldr	r3, [r7, #28]
    563a:	b29b      	uxth	r3, r3
    563c:	687a      	ldr	r2, [r7, #4]
    563e:	8113      	strh	r3, [r2, #8]
}
    5640:	f107 0730 	add.w	r7, r7, #48	; 0x30
    5644:	46bd      	mov	sp, r7
    5646:	bd80      	pop	{r7, pc}
    5648:	40013800 	.word	0x40013800
    564c:	51eb851f 	.word	0x51eb851f

00005650 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    5650:	b480      	push	{r7}
    5652:	b081      	sub	sp, #4
    5654:	af00      	add	r7, sp, #0
    5656:	6038      	str	r0, [r7, #0]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    5658:	683a      	ldr	r2, [r7, #0]
    565a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    565e:	6013      	str	r3, [r2, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    5660:	683a      	ldr	r2, [r7, #0]
    5662:	f04f 0300 	mov.w	r3, #0	; 0x0
    5666:	8093      	strh	r3, [r2, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    5668:	683a      	ldr	r2, [r7, #0]
    566a:	f04f 0300 	mov.w	r3, #0	; 0x0
    566e:	80d3      	strh	r3, [r2, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    5670:	683a      	ldr	r2, [r7, #0]
    5672:	f04f 0300 	mov.w	r3, #0	; 0x0
    5676:	8113      	strh	r3, [r2, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    5678:	683a      	ldr	r2, [r7, #0]
    567a:	f04f 030c 	mov.w	r3, #12	; 0xc
    567e:	8153      	strh	r3, [r2, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    5680:	683a      	ldr	r2, [r7, #0]
    5682:	f04f 0300 	mov.w	r3, #0	; 0x0
    5686:	8193      	strh	r3, [r2, #12]
}
    5688:	f107 0704 	add.w	r7, r7, #4	; 0x4
    568c:	46bd      	mov	sp, r7
    568e:	bc80      	pop	{r7}
    5690:	4770      	bx	lr
    5692:	46c0      	nop			(mov r8, r8)

00005694 <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    5694:	b480      	push	{r7}
    5696:	b083      	sub	sp, #12
    5698:	af00      	add	r7, sp, #0
    569a:	6078      	str	r0, [r7, #4]
    569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    569e:	f04f 0300 	mov.w	r3, #0	; 0x0
    56a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	8a1b      	ldrh	r3, [r3, #16]
    56a8:	b29b      	uxth	r3, r3
    56aa:	60bb      	str	r3, [r7, #8]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    56ac:	68ba      	ldr	r2, [r7, #8]
    56ae:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    56b2:	ea02 0303 	and.w	r3, r2, r3
    56b6:	60bb      	str	r3, [r7, #8]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    56b8:	683b      	ldr	r3, [r7, #0]
    56ba:	881a      	ldrh	r2, [r3, #0]
    56bc:	683b      	ldr	r3, [r7, #0]
    56be:	885b      	ldrh	r3, [r3, #2]
    56c0:	ea42 0303 	orr.w	r3, r2, r3
    56c4:	b29a      	uxth	r2, r3
    56c6:	683b      	ldr	r3, [r7, #0]
    56c8:	889b      	ldrh	r3, [r3, #4]
    56ca:	ea42 0303 	orr.w	r3, r2, r3
    56ce:	b29a      	uxth	r2, r3
    56d0:	683b      	ldr	r3, [r7, #0]
    56d2:	88db      	ldrh	r3, [r3, #6]
    56d4:	ea42 0303 	orr.w	r3, r2, r3
    56d8:	b29b      	uxth	r3, r3
    56da:	461a      	mov	r2, r3
    56dc:	68bb      	ldr	r3, [r7, #8]
    56de:	ea43 0302 	orr.w	r3, r3, r2
    56e2:	60bb      	str	r3, [r7, #8]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    56e4:	68bb      	ldr	r3, [r7, #8]
    56e6:	b29b      	uxth	r3, r3
    56e8:	687a      	ldr	r2, [r7, #4]
    56ea:	8213      	strh	r3, [r2, #16]
}
    56ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    56f0:	46bd      	mov	sp, r7
    56f2:	bc80      	pop	{r7}
    56f4:	4770      	bx	lr
    56f6:	46c0      	nop			(mov r8, r8)

000056f8 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    56f8:	b480      	push	{r7}
    56fa:	b081      	sub	sp, #4
    56fc:	af00      	add	r7, sp, #0
    56fe:	6038      	str	r0, [r7, #0]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    5700:	683a      	ldr	r2, [r7, #0]
    5702:	f04f 0300 	mov.w	r3, #0	; 0x0
    5706:	8013      	strh	r3, [r2, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    5708:	683a      	ldr	r2, [r7, #0]
    570a:	f04f 0300 	mov.w	r3, #0	; 0x0
    570e:	8053      	strh	r3, [r2, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    5710:	683a      	ldr	r2, [r7, #0]
    5712:	f04f 0300 	mov.w	r3, #0	; 0x0
    5716:	8093      	strh	r3, [r2, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    5718:	683a      	ldr	r2, [r7, #0]
    571a:	f04f 0300 	mov.w	r3, #0	; 0x0
    571e:	80d3      	strh	r3, [r2, #6]
}
    5720:	f107 0704 	add.w	r7, r7, #4	; 0x4
    5724:	46bd      	mov	sp, r7
    5726:	bc80      	pop	{r7}
    5728:	4770      	bx	lr
    572a:	46c0      	nop			(mov r8, r8)

0000572c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    572c:	b480      	push	{r7}
    572e:	b083      	sub	sp, #12
    5730:	af00      	add	r7, sp, #0
    5732:	60b8      	str	r0, [r7, #8]
    5734:	6079      	str	r1, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	2b00      	cmp	r3, #0
    573a:	d008      	beq.n	574e <USART_Cmd+0x22>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    573c:	68bb      	ldr	r3, [r7, #8]
    573e:	899b      	ldrh	r3, [r3, #12]
    5740:	b29b      	uxth	r3, r3
    5742:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5746:	b29b      	uxth	r3, r3
    5748:	68ba      	ldr	r2, [r7, #8]
    574a:	8193      	strh	r3, [r2, #12]
    574c:	e00d      	b.n	576a <USART_Cmd+0x3e>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    574e:	68bb      	ldr	r3, [r7, #8]
    5750:	899b      	ldrh	r3, [r3, #12]
    5752:	b29b      	uxth	r3, r3
    5754:	603b      	str	r3, [r7, #0]
    5756:	f64d 73ff 	movw	r3, #57343	; 0xdfff
    575a:	6839      	ldr	r1, [r7, #0]
    575c:	ea01 0303 	and.w	r3, r1, r3
    5760:	603b      	str	r3, [r7, #0]
    5762:	68ba      	ldr	r2, [r7, #8]
    5764:	6839      	ldr	r1, [r7, #0]
    5766:	460b      	mov	r3, r1
    5768:	8193      	strh	r3, [r2, #12]
  }
}
    576a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    576e:	46bd      	mov	sp, r7
    5770:	bc80      	pop	{r7}
    5772:	4770      	bx	lr

00005774 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    5774:	b480      	push	{r7}
    5776:	b087      	sub	sp, #28
    5778:	af00      	add	r7, sp, #0
    577a:	60b8      	str	r0, [r7, #8]
    577c:	460b      	mov	r3, r1
    577e:	603a      	str	r2, [r7, #0]
    5780:	80bb      	strh	r3, [r7, #4]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    5782:	f04f 0300 	mov.w	r3, #0	; 0x0
    5786:	60fb      	str	r3, [r7, #12]
    5788:	f04f 0300 	mov.w	r3, #0	; 0x0
    578c:	613b      	str	r3, [r7, #16]
    578e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5792:	617b      	str	r3, [r7, #20]
  uint32_t usartxbase = 0x00;
    5794:	f04f 0300 	mov.w	r3, #0	; 0x0
    5798:	61bb      	str	r3, [r7, #24]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    579a:	68bb      	ldr	r3, [r7, #8]
    579c:	61bb      	str	r3, [r7, #24]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    579e:	88bb      	ldrh	r3, [r7, #4]
    57a0:	b2db      	uxtb	r3, r3
    57a2:	ea4f 1353 	mov.w	r3, r3, lsr #5
    57a6:	b2db      	uxtb	r3, r3
    57a8:	60fb      	str	r3, [r7, #12]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    57aa:	88bb      	ldrh	r3, [r7, #4]
    57ac:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    57b0:	613b      	str	r3, [r7, #16]
  itmask = (((uint32_t)0x01) << itpos);
    57b2:	693a      	ldr	r2, [r7, #16]
    57b4:	f04f 0301 	mov.w	r3, #1	; 0x1
    57b8:	fa03 f302 	lsl.w	r3, r3, r2
    57bc:	617b      	str	r3, [r7, #20]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    57be:	68fb      	ldr	r3, [r7, #12]
    57c0:	2b01      	cmp	r3, #1
    57c2:	d104      	bne.n	57ce <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
    57c4:	69bb      	ldr	r3, [r7, #24]
    57c6:	f103 030c 	add.w	r3, r3, #12	; 0xc
    57ca:	61bb      	str	r3, [r7, #24]
    57cc:	e00b      	b.n	57e6 <USART_ITConfig+0x72>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    57ce:	68fb      	ldr	r3, [r7, #12]
    57d0:	2b02      	cmp	r3, #2
    57d2:	d104      	bne.n	57de <USART_ITConfig+0x6a>
  {
    usartxbase += 0x10;
    57d4:	69bb      	ldr	r3, [r7, #24]
    57d6:	f103 0310 	add.w	r3, r3, #16	; 0x10
    57da:	61bb      	str	r3, [r7, #24]
    57dc:	e003      	b.n	57e6 <USART_ITConfig+0x72>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    57de:	69bb      	ldr	r3, [r7, #24]
    57e0:	f103 0314 	add.w	r3, r3, #20	; 0x14
    57e4:	61bb      	str	r3, [r7, #24]
  }
  if (NewState != DISABLE)
    57e6:	683b      	ldr	r3, [r7, #0]
    57e8:	2b00      	cmp	r3, #0
    57ea:	d007      	beq.n	57fc <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    57ec:	69b9      	ldr	r1, [r7, #24]
    57ee:	69bb      	ldr	r3, [r7, #24]
    57f0:	681a      	ldr	r2, [r3, #0]
    57f2:	697b      	ldr	r3, [r7, #20]
    57f4:	ea42 0303 	orr.w	r3, r2, r3
    57f8:	600b      	str	r3, [r1, #0]
    57fa:	e008      	b.n	580e <USART_ITConfig+0x9a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    57fc:	69b9      	ldr	r1, [r7, #24]
    57fe:	69bb      	ldr	r3, [r7, #24]
    5800:	681a      	ldr	r2, [r3, #0]
    5802:	697b      	ldr	r3, [r7, #20]
    5804:	ea6f 0303 	mvn.w	r3, r3
    5808:	ea02 0303 	and.w	r3, r2, r3
    580c:	600b      	str	r3, [r1, #0]
  }
}
    580e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    5812:	46bd      	mov	sp, r7
    5814:	bc80      	pop	{r7}
    5816:	4770      	bx	lr

00005818 <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    5818:	b480      	push	{r7}
    581a:	b083      	sub	sp, #12
    581c:	af00      	add	r7, sp, #0
    581e:	60b8      	str	r0, [r7, #8]
    5820:	460b      	mov	r3, r1
    5822:	603a      	str	r2, [r7, #0]
    5824:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    5826:	683b      	ldr	r3, [r7, #0]
    5828:	2b00      	cmp	r3, #0
    582a:	d009      	beq.n	5840 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    582c:	68bb      	ldr	r3, [r7, #8]
    582e:	8a9b      	ldrh	r3, [r3, #20]
    5830:	b29a      	uxth	r2, r3
    5832:	88bb      	ldrh	r3, [r7, #4]
    5834:	ea42 0303 	orr.w	r3, r2, r3
    5838:	b29b      	uxth	r3, r3
    583a:	68ba      	ldr	r2, [r7, #8]
    583c:	8293      	strh	r3, [r2, #20]
    583e:	e00b      	b.n	5858 <USART_DMACmd+0x40>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    5840:	68bb      	ldr	r3, [r7, #8]
    5842:	8a9b      	ldrh	r3, [r3, #20]
    5844:	b29a      	uxth	r2, r3
    5846:	88bb      	ldrh	r3, [r7, #4]
    5848:	ea6f 0303 	mvn.w	r3, r3
    584c:	b29b      	uxth	r3, r3
    584e:	ea02 0303 	and.w	r3, r2, r3
    5852:	b29b      	uxth	r3, r3
    5854:	68ba      	ldr	r2, [r7, #8]
    5856:	8293      	strh	r3, [r2, #20]
  }
}
    5858:	f107 070c 	add.w	r7, r7, #12	; 0xc
    585c:	46bd      	mov	sp, r7
    585e:	bc80      	pop	{r7}
    5860:	4770      	bx	lr
    5862:	46c0      	nop			(mov r8, r8)

00005864 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    5864:	b480      	push	{r7}
    5866:	b083      	sub	sp, #12
    5868:	af00      	add	r7, sp, #0
    586a:	60b8      	str	r0, [r7, #8]
    586c:	460b      	mov	r3, r1
    586e:	713b      	strb	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    5870:	68bb      	ldr	r3, [r7, #8]
    5872:	8a1b      	ldrh	r3, [r3, #16]
    5874:	b29b      	uxth	r3, r3
    5876:	603b      	str	r3, [r7, #0]
    5878:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    587c:	6839      	ldr	r1, [r7, #0]
    587e:	ea01 0303 	and.w	r3, r1, r3
    5882:	603b      	str	r3, [r7, #0]
    5884:	68ba      	ldr	r2, [r7, #8]
    5886:	6839      	ldr	r1, [r7, #0]
    5888:	460b      	mov	r3, r1
    588a:	8213      	strh	r3, [r2, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    588c:	68bb      	ldr	r3, [r7, #8]
    588e:	8a1b      	ldrh	r3, [r3, #16]
    5890:	b29a      	uxth	r2, r3
    5892:	793b      	ldrb	r3, [r7, #4]
    5894:	ea42 0303 	orr.w	r3, r2, r3
    5898:	b29b      	uxth	r3, r3
    589a:	68ba      	ldr	r2, [r7, #8]
    589c:	8213      	strh	r3, [r2, #16]
}
    589e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    58a2:	46bd      	mov	sp, r7
    58a4:	bc80      	pop	{r7}
    58a6:	4770      	bx	lr

000058a8 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    58a8:	b480      	push	{r7}
    58aa:	b083      	sub	sp, #12
    58ac:	af00      	add	r7, sp, #0
    58ae:	60b8      	str	r0, [r7, #8]
    58b0:	460b      	mov	r3, r1
    58b2:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    58b4:	68bb      	ldr	r3, [r7, #8]
    58b6:	899b      	ldrh	r3, [r3, #12]
    58b8:	b29b      	uxth	r3, r3
    58ba:	603b      	str	r3, [r7, #0]
    58bc:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
    58c0:	6839      	ldr	r1, [r7, #0]
    58c2:	ea01 0303 	and.w	r3, r1, r3
    58c6:	603b      	str	r3, [r7, #0]
    58c8:	68ba      	ldr	r2, [r7, #8]
    58ca:	6839      	ldr	r1, [r7, #0]
    58cc:	460b      	mov	r3, r1
    58ce:	8193      	strh	r3, [r2, #12]
  USARTx->CR1 |= USART_WakeUp;
    58d0:	68bb      	ldr	r3, [r7, #8]
    58d2:	899b      	ldrh	r3, [r3, #12]
    58d4:	b29a      	uxth	r2, r3
    58d6:	88bb      	ldrh	r3, [r7, #4]
    58d8:	ea42 0303 	orr.w	r3, r2, r3
    58dc:	b29b      	uxth	r3, r3
    58de:	68ba      	ldr	r2, [r7, #8]
    58e0:	8193      	strh	r3, [r2, #12]
}
    58e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    58e6:	46bd      	mov	sp, r7
    58e8:	bc80      	pop	{r7}
    58ea:	4770      	bx	lr

000058ec <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    58ec:	b480      	push	{r7}
    58ee:	b083      	sub	sp, #12
    58f0:	af00      	add	r7, sp, #0
    58f2:	60b8      	str	r0, [r7, #8]
    58f4:	6079      	str	r1, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	2b00      	cmp	r3, #0
    58fa:	d008      	beq.n	590e <USART_ReceiverWakeUpCmd+0x22>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    58fc:	68bb      	ldr	r3, [r7, #8]
    58fe:	899b      	ldrh	r3, [r3, #12]
    5900:	b29b      	uxth	r3, r3
    5902:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    5906:	b29b      	uxth	r3, r3
    5908:	68ba      	ldr	r2, [r7, #8]
    590a:	8193      	strh	r3, [r2, #12]
    590c:	e00d      	b.n	592a <USART_ReceiverWakeUpCmd+0x3e>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    590e:	68bb      	ldr	r3, [r7, #8]
    5910:	899b      	ldrh	r3, [r3, #12]
    5912:	b29b      	uxth	r3, r3
    5914:	603b      	str	r3, [r7, #0]
    5916:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    591a:	6839      	ldr	r1, [r7, #0]
    591c:	ea01 0303 	and.w	r3, r1, r3
    5920:	603b      	str	r3, [r7, #0]
    5922:	68ba      	ldr	r2, [r7, #8]
    5924:	6839      	ldr	r1, [r7, #0]
    5926:	460b      	mov	r3, r1
    5928:	8193      	strh	r3, [r2, #12]
  }
}
    592a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    592e:	46bd      	mov	sp, r7
    5930:	bc80      	pop	{r7}
    5932:	4770      	bx	lr

00005934 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    5934:	b480      	push	{r7}
    5936:	b083      	sub	sp, #12
    5938:	af00      	add	r7, sp, #0
    593a:	60b8      	str	r0, [r7, #8]
    593c:	460b      	mov	r3, r1
    593e:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    5940:	68bb      	ldr	r3, [r7, #8]
    5942:	8a1b      	ldrh	r3, [r3, #16]
    5944:	b29b      	uxth	r3, r3
    5946:	603b      	str	r3, [r7, #0]
    5948:	f64f 73df 	movw	r3, #65503	; 0xffdf
    594c:	6839      	ldr	r1, [r7, #0]
    594e:	ea01 0303 	and.w	r3, r1, r3
    5952:	603b      	str	r3, [r7, #0]
    5954:	68ba      	ldr	r2, [r7, #8]
    5956:	6839      	ldr	r1, [r7, #0]
    5958:	460b      	mov	r3, r1
    595a:	8213      	strh	r3, [r2, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    595c:	68bb      	ldr	r3, [r7, #8]
    595e:	8a1b      	ldrh	r3, [r3, #16]
    5960:	b29a      	uxth	r2, r3
    5962:	88bb      	ldrh	r3, [r7, #4]
    5964:	ea42 0303 	orr.w	r3, r2, r3
    5968:	b29b      	uxth	r3, r3
    596a:	68ba      	ldr	r2, [r7, #8]
    596c:	8213      	strh	r3, [r2, #16]
}
    596e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5972:	46bd      	mov	sp, r7
    5974:	bc80      	pop	{r7}
    5976:	4770      	bx	lr

00005978 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    5978:	b480      	push	{r7}
    597a:	b083      	sub	sp, #12
    597c:	af00      	add	r7, sp, #0
    597e:	60b8      	str	r0, [r7, #8]
    5980:	6079      	str	r1, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    5982:	687b      	ldr	r3, [r7, #4]
    5984:	2b00      	cmp	r3, #0
    5986:	d008      	beq.n	599a <USART_LINCmd+0x22>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    5988:	68bb      	ldr	r3, [r7, #8]
    598a:	8a1b      	ldrh	r3, [r3, #16]
    598c:	b29b      	uxth	r3, r3
    598e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    5992:	b29b      	uxth	r3, r3
    5994:	68ba      	ldr	r2, [r7, #8]
    5996:	8213      	strh	r3, [r2, #16]
    5998:	e00d      	b.n	59b6 <USART_LINCmd+0x3e>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    599a:	68bb      	ldr	r3, [r7, #8]
    599c:	8a1b      	ldrh	r3, [r3, #16]
    599e:	b29b      	uxth	r3, r3
    59a0:	603b      	str	r3, [r7, #0]
    59a2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
    59a6:	6839      	ldr	r1, [r7, #0]
    59a8:	ea01 0303 	and.w	r3, r1, r3
    59ac:	603b      	str	r3, [r7, #0]
    59ae:	68ba      	ldr	r2, [r7, #8]
    59b0:	6839      	ldr	r1, [r7, #0]
    59b2:	460b      	mov	r3, r1
    59b4:	8213      	strh	r3, [r2, #16]
  }
}
    59b6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    59ba:	46bd      	mov	sp, r7
    59bc:	bc80      	pop	{r7}
    59be:	4770      	bx	lr

000059c0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    59c0:	b480      	push	{r7}
    59c2:	b083      	sub	sp, #12
    59c4:	af00      	add	r7, sp, #0
    59c6:	60b8      	str	r0, [r7, #8]
    59c8:	460b      	mov	r3, r1
    59ca:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    59cc:	88b9      	ldrh	r1, [r7, #4]
    59ce:	6039      	str	r1, [r7, #0]
    59d0:	683a      	ldr	r2, [r7, #0]
    59d2:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    59d6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    59da:	603b      	str	r3, [r7, #0]
    59dc:	68ba      	ldr	r2, [r7, #8]
    59de:	6839      	ldr	r1, [r7, #0]
    59e0:	460b      	mov	r3, r1
    59e2:	8093      	strh	r3, [r2, #4]
}
    59e4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    59e8:	46bd      	mov	sp, r7
    59ea:	bc80      	pop	{r7}
    59ec:	4770      	bx	lr
    59ee:	46c0      	nop			(mov r8, r8)

000059f0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    59f0:	b480      	push	{r7}
    59f2:	b082      	sub	sp, #8
    59f4:	af00      	add	r7, sp, #0
    59f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	889b      	ldrh	r3, [r3, #4]
    59fc:	b29b      	uxth	r3, r3
    59fe:	603b      	str	r3, [r7, #0]
    5a00:	683a      	ldr	r2, [r7, #0]
    5a02:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    5a06:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    5a0a:	603b      	str	r3, [r7, #0]
    5a0c:	683b      	ldr	r3, [r7, #0]
}
    5a0e:	4618      	mov	r0, r3
    5a10:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5a14:	46bd      	mov	sp, r7
    5a16:	bc80      	pop	{r7}
    5a18:	4770      	bx	lr
    5a1a:	46c0      	nop			(mov r8, r8)

00005a1c <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    5a1c:	b480      	push	{r7}
    5a1e:	b081      	sub	sp, #4
    5a20:	af00      	add	r7, sp, #0
    5a22:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    5a24:	683b      	ldr	r3, [r7, #0]
    5a26:	899b      	ldrh	r3, [r3, #12]
    5a28:	b29b      	uxth	r3, r3
    5a2a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    5a2e:	b29b      	uxth	r3, r3
    5a30:	683a      	ldr	r2, [r7, #0]
    5a32:	8193      	strh	r3, [r2, #12]
}
    5a34:	f107 0704 	add.w	r7, r7, #4	; 0x4
    5a38:	46bd      	mov	sp, r7
    5a3a:	bc80      	pop	{r7}
    5a3c:	4770      	bx	lr
    5a3e:	46c0      	nop			(mov r8, r8)

00005a40 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    5a40:	b480      	push	{r7}
    5a42:	b082      	sub	sp, #8
    5a44:	af00      	add	r7, sp, #0
    5a46:	6078      	str	r0, [r7, #4]
    5a48:	460b      	mov	r3, r1
    5a4a:	703b      	strb	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    5a4c:	687b      	ldr	r3, [r7, #4]
    5a4e:	8b1b      	ldrh	r3, [r3, #24]
    5a50:	b29b      	uxth	r3, r3
    5a52:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    5a56:	687a      	ldr	r2, [r7, #4]
    5a58:	8313      	strh	r3, [r2, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    5a5a:	687b      	ldr	r3, [r7, #4]
    5a5c:	8b1b      	ldrh	r3, [r3, #24]
    5a5e:	b29a      	uxth	r2, r3
    5a60:	783b      	ldrb	r3, [r7, #0]
    5a62:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5a66:	b29b      	uxth	r3, r3
    5a68:	ea42 0303 	orr.w	r3, r2, r3
    5a6c:	b29b      	uxth	r3, r3
    5a6e:	687a      	ldr	r2, [r7, #4]
    5a70:	8313      	strh	r3, [r2, #24]
}
    5a72:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5a76:	46bd      	mov	sp, r7
    5a78:	bc80      	pop	{r7}
    5a7a:	4770      	bx	lr

00005a7c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    5a7c:	b480      	push	{r7}
    5a7e:	b082      	sub	sp, #8
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
    5a84:	460b      	mov	r3, r1
    5a86:	703b      	strb	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	8b1b      	ldrh	r3, [r3, #24]
    5a8c:	b29b      	uxth	r3, r3
    5a8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    5a92:	687a      	ldr	r2, [r7, #4]
    5a94:	8313      	strh	r3, [r2, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    5a96:	687b      	ldr	r3, [r7, #4]
    5a98:	8b1b      	ldrh	r3, [r3, #24]
    5a9a:	b29a      	uxth	r2, r3
    5a9c:	783b      	ldrb	r3, [r7, #0]
    5a9e:	ea42 0303 	orr.w	r3, r2, r3
    5aa2:	b29b      	uxth	r3, r3
    5aa4:	687a      	ldr	r2, [r7, #4]
    5aa6:	8313      	strh	r3, [r2, #24]
}
    5aa8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5aac:	46bd      	mov	sp, r7
    5aae:	bc80      	pop	{r7}
    5ab0:	4770      	bx	lr
    5ab2:	46c0      	nop			(mov r8, r8)

00005ab4 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    5ab4:	b480      	push	{r7}
    5ab6:	b083      	sub	sp, #12
    5ab8:	af00      	add	r7, sp, #0
    5aba:	60b8      	str	r0, [r7, #8]
    5abc:	6079      	str	r1, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	2b00      	cmp	r3, #0
    5ac2:	d008      	beq.n	5ad6 <USART_SmartCardCmd+0x22>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    5ac4:	68bb      	ldr	r3, [r7, #8]
    5ac6:	8a9b      	ldrh	r3, [r3, #20]
    5ac8:	b29b      	uxth	r3, r3
    5aca:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    5ace:	b29b      	uxth	r3, r3
    5ad0:	68ba      	ldr	r2, [r7, #8]
    5ad2:	8293      	strh	r3, [r2, #20]
    5ad4:	e00d      	b.n	5af2 <USART_SmartCardCmd+0x3e>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    5ad6:	68bb      	ldr	r3, [r7, #8]
    5ad8:	8a9b      	ldrh	r3, [r3, #20]
    5ada:	b29b      	uxth	r3, r3
    5adc:	603b      	str	r3, [r7, #0]
    5ade:	f64f 73df 	movw	r3, #65503	; 0xffdf
    5ae2:	6839      	ldr	r1, [r7, #0]
    5ae4:	ea01 0303 	and.w	r3, r1, r3
    5ae8:	603b      	str	r3, [r7, #0]
    5aea:	68ba      	ldr	r2, [r7, #8]
    5aec:	6839      	ldr	r1, [r7, #0]
    5aee:	460b      	mov	r3, r1
    5af0:	8293      	strh	r3, [r2, #20]
  }
}
    5af2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5af6:	46bd      	mov	sp, r7
    5af8:	bc80      	pop	{r7}
    5afa:	4770      	bx	lr

00005afc <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    5afc:	b480      	push	{r7}
    5afe:	b083      	sub	sp, #12
    5b00:	af00      	add	r7, sp, #0
    5b02:	60b8      	str	r0, [r7, #8]
    5b04:	6079      	str	r1, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	2b00      	cmp	r3, #0
    5b0a:	d008      	beq.n	5b1e <USART_SmartCardNACKCmd+0x22>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    5b0c:	68bb      	ldr	r3, [r7, #8]
    5b0e:	8a9b      	ldrh	r3, [r3, #20]
    5b10:	b29b      	uxth	r3, r3
    5b12:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    5b16:	b29b      	uxth	r3, r3
    5b18:	68ba      	ldr	r2, [r7, #8]
    5b1a:	8293      	strh	r3, [r2, #20]
    5b1c:	e00d      	b.n	5b3a <USART_SmartCardNACKCmd+0x3e>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    5b1e:	68bb      	ldr	r3, [r7, #8]
    5b20:	8a9b      	ldrh	r3, [r3, #20]
    5b22:	b29b      	uxth	r3, r3
    5b24:	603b      	str	r3, [r7, #0]
    5b26:	f64f 73ef 	movw	r3, #65519	; 0xffef
    5b2a:	6839      	ldr	r1, [r7, #0]
    5b2c:	ea01 0303 	and.w	r3, r1, r3
    5b30:	603b      	str	r3, [r7, #0]
    5b32:	68ba      	ldr	r2, [r7, #8]
    5b34:	6839      	ldr	r1, [r7, #0]
    5b36:	460b      	mov	r3, r1
    5b38:	8293      	strh	r3, [r2, #20]
  }
}
    5b3a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5b3e:	46bd      	mov	sp, r7
    5b40:	bc80      	pop	{r7}
    5b42:	4770      	bx	lr

00005b44 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    5b44:	b480      	push	{r7}
    5b46:	b083      	sub	sp, #12
    5b48:	af00      	add	r7, sp, #0
    5b4a:	60b8      	str	r0, [r7, #8]
    5b4c:	6079      	str	r1, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    5b4e:	687b      	ldr	r3, [r7, #4]
    5b50:	2b00      	cmp	r3, #0
    5b52:	d008      	beq.n	5b66 <USART_HalfDuplexCmd+0x22>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    5b54:	68bb      	ldr	r3, [r7, #8]
    5b56:	8a9b      	ldrh	r3, [r3, #20]
    5b58:	b29b      	uxth	r3, r3
    5b5a:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    5b5e:	b29b      	uxth	r3, r3
    5b60:	68ba      	ldr	r2, [r7, #8]
    5b62:	8293      	strh	r3, [r2, #20]
    5b64:	e00d      	b.n	5b82 <USART_HalfDuplexCmd+0x3e>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    5b66:	68bb      	ldr	r3, [r7, #8]
    5b68:	8a9b      	ldrh	r3, [r3, #20]
    5b6a:	b29b      	uxth	r3, r3
    5b6c:	603b      	str	r3, [r7, #0]
    5b6e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    5b72:	6839      	ldr	r1, [r7, #0]
    5b74:	ea01 0303 	and.w	r3, r1, r3
    5b78:	603b      	str	r3, [r7, #0]
    5b7a:	68ba      	ldr	r2, [r7, #8]
    5b7c:	6839      	ldr	r1, [r7, #0]
    5b7e:	460b      	mov	r3, r1
    5b80:	8293      	strh	r3, [r2, #20]
  }
}
    5b82:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5b86:	46bd      	mov	sp, r7
    5b88:	bc80      	pop	{r7}
    5b8a:	4770      	bx	lr

00005b8c <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    5b8c:	b480      	push	{r7}
    5b8e:	b083      	sub	sp, #12
    5b90:	af00      	add	r7, sp, #0
    5b92:	60b8      	str	r0, [r7, #8]
    5b94:	460b      	mov	r3, r1
    5b96:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    5b98:	68bb      	ldr	r3, [r7, #8]
    5b9a:	8a9b      	ldrh	r3, [r3, #20]
    5b9c:	b29b      	uxth	r3, r3
    5b9e:	603b      	str	r3, [r7, #0]
    5ba0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    5ba4:	6839      	ldr	r1, [r7, #0]
    5ba6:	ea01 0303 	and.w	r3, r1, r3
    5baa:	603b      	str	r3, [r7, #0]
    5bac:	68ba      	ldr	r2, [r7, #8]
    5bae:	6839      	ldr	r1, [r7, #0]
    5bb0:	460b      	mov	r3, r1
    5bb2:	8293      	strh	r3, [r2, #20]
  USARTx->CR3 |= USART_IrDAMode;
    5bb4:	68bb      	ldr	r3, [r7, #8]
    5bb6:	8a9b      	ldrh	r3, [r3, #20]
    5bb8:	b29a      	uxth	r2, r3
    5bba:	88bb      	ldrh	r3, [r7, #4]
    5bbc:	ea42 0303 	orr.w	r3, r2, r3
    5bc0:	b29b      	uxth	r3, r3
    5bc2:	68ba      	ldr	r2, [r7, #8]
    5bc4:	8293      	strh	r3, [r2, #20]
}
    5bc6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5bca:	46bd      	mov	sp, r7
    5bcc:	bc80      	pop	{r7}
    5bce:	4770      	bx	lr

00005bd0 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    5bd0:	b480      	push	{r7}
    5bd2:	b083      	sub	sp, #12
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	60b8      	str	r0, [r7, #8]
    5bd8:	6079      	str	r1, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d008      	beq.n	5bf2 <USART_IrDACmd+0x22>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    5be0:	68bb      	ldr	r3, [r7, #8]
    5be2:	8a9b      	ldrh	r3, [r3, #20]
    5be4:	b29b      	uxth	r3, r3
    5be6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    5bea:	b29b      	uxth	r3, r3
    5bec:	68ba      	ldr	r2, [r7, #8]
    5bee:	8293      	strh	r3, [r2, #20]
    5bf0:	e00d      	b.n	5c0e <USART_IrDACmd+0x3e>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    5bf2:	68bb      	ldr	r3, [r7, #8]
    5bf4:	8a9b      	ldrh	r3, [r3, #20]
    5bf6:	b29b      	uxth	r3, r3
    5bf8:	603b      	str	r3, [r7, #0]
    5bfa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    5bfe:	6839      	ldr	r1, [r7, #0]
    5c00:	ea01 0303 	and.w	r3, r1, r3
    5c04:	603b      	str	r3, [r7, #0]
    5c06:	68ba      	ldr	r2, [r7, #8]
    5c08:	6839      	ldr	r1, [r7, #0]
    5c0a:	460b      	mov	r3, r1
    5c0c:	8293      	strh	r3, [r2, #20]
  }
}
    5c0e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5c12:	46bd      	mov	sp, r7
    5c14:	bc80      	pop	{r7}
    5c16:	4770      	bx	lr

00005c18 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    5c18:	b480      	push	{r7}
    5c1a:	b083      	sub	sp, #12
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	6078      	str	r0, [r7, #4]
    5c20:	460b      	mov	r3, r1
    5c22:	803b      	strh	r3, [r7, #0]
  FlagStatus bitstatus = RESET;
    5c24:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c28:	60bb      	str	r3, [r7, #8]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    5c2a:	687b      	ldr	r3, [r7, #4]
    5c2c:	881b      	ldrh	r3, [r3, #0]
    5c2e:	b29a      	uxth	r2, r3
    5c30:	883b      	ldrh	r3, [r7, #0]
    5c32:	ea02 0303 	and.w	r3, r2, r3
    5c36:	b29b      	uxth	r3, r3
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d003      	beq.n	5c44 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    5c3c:	f04f 0301 	mov.w	r3, #1	; 0x1
    5c40:	60bb      	str	r3, [r7, #8]
    5c42:	e002      	b.n	5c4a <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    5c44:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c48:	60bb      	str	r3, [r7, #8]
  }
  return bitstatus;
    5c4a:	68bb      	ldr	r3, [r7, #8]
}
    5c4c:	4618      	mov	r0, r3
    5c4e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5c52:	46bd      	mov	sp, r7
    5c54:	bc80      	pop	{r7}
    5c56:	4770      	bx	lr

00005c58 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    5c58:	b480      	push	{r7}
    5c5a:	b082      	sub	sp, #8
    5c5c:	af00      	add	r7, sp, #0
    5c5e:	6078      	str	r0, [r7, #4]
    5c60:	460b      	mov	r3, r1
    5c62:	803b      	strh	r3, [r7, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    5c64:	883b      	ldrh	r3, [r7, #0]
    5c66:	ea6f 0303 	mvn.w	r3, r3
    5c6a:	b29b      	uxth	r3, r3
    5c6c:	687a      	ldr	r2, [r7, #4]
    5c6e:	8013      	strh	r3, [r2, #0]
}
    5c70:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5c74:	46bd      	mov	sp, r7
    5c76:	bc80      	pop	{r7}
    5c78:	4770      	bx	lr
    5c7a:	46c0      	nop			(mov r8, r8)

00005c7c <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    5c7c:	b480      	push	{r7}
    5c7e:	b086      	sub	sp, #24
    5c80:	af00      	add	r7, sp, #0
    5c82:	6078      	str	r0, [r7, #4]
    5c84:	460b      	mov	r3, r1
    5c86:	803b      	strh	r3, [r7, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    5c88:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c8c:	60bb      	str	r3, [r7, #8]
    5c8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c92:	60fb      	str	r3, [r7, #12]
    5c94:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c98:	613b      	str	r3, [r7, #16]
  ITStatus bitstatus = RESET;
    5c9a:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c9e:	617b      	str	r3, [r7, #20]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    5ca0:	883b      	ldrh	r3, [r7, #0]
    5ca2:	b2db      	uxtb	r3, r3
    5ca4:	ea4f 1353 	mov.w	r3, r3, lsr #5
    5ca8:	b2db      	uxtb	r3, r3
    5caa:	613b      	str	r3, [r7, #16]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    5cac:	883b      	ldrh	r3, [r7, #0]
    5cae:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    5cb2:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;
    5cb4:	68fa      	ldr	r2, [r7, #12]
    5cb6:	f04f 0301 	mov.w	r3, #1	; 0x1
    5cba:	fa03 f302 	lsl.w	r3, r3, r2
    5cbe:	60fb      	str	r3, [r7, #12]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    5cc0:	693b      	ldr	r3, [r7, #16]
    5cc2:	2b01      	cmp	r3, #1
    5cc4:	d108      	bne.n	5cd8 <USART_GetITStatus+0x5c>
  {
    itmask &= USARTx->CR1;
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	899b      	ldrh	r3, [r3, #12]
    5cca:	b29b      	uxth	r3, r3
    5ccc:	461a      	mov	r2, r3
    5cce:	68fb      	ldr	r3, [r7, #12]
    5cd0:	ea03 0302 	and.w	r3, r3, r2
    5cd4:	60fb      	str	r3, [r7, #12]
    5cd6:	e013      	b.n	5d00 <USART_GetITStatus+0x84>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    5cd8:	693b      	ldr	r3, [r7, #16]
    5cda:	2b02      	cmp	r3, #2
    5cdc:	d108      	bne.n	5cf0 <USART_GetITStatus+0x74>
  {
    itmask &= USARTx->CR2;
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	8a1b      	ldrh	r3, [r3, #16]
    5ce2:	b29b      	uxth	r3, r3
    5ce4:	461a      	mov	r2, r3
    5ce6:	68fb      	ldr	r3, [r7, #12]
    5ce8:	ea03 0302 	and.w	r3, r3, r2
    5cec:	60fb      	str	r3, [r7, #12]
    5cee:	e007      	b.n	5d00 <USART_GetITStatus+0x84>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	8a9b      	ldrh	r3, [r3, #20]
    5cf4:	b29b      	uxth	r3, r3
    5cf6:	461a      	mov	r2, r3
    5cf8:	68fb      	ldr	r3, [r7, #12]
    5cfa:	ea03 0302 	and.w	r3, r3, r2
    5cfe:	60fb      	str	r3, [r7, #12]
  }
  
  bitpos = USART_IT >> 0x08;
    5d00:	883b      	ldrh	r3, [r7, #0]
    5d02:	ea4f 2313 	mov.w	r3, r3, lsr #8
    5d06:	b29b      	uxth	r3, r3
    5d08:	60bb      	str	r3, [r7, #8]
  bitpos = (uint32_t)0x01 << bitpos;
    5d0a:	68ba      	ldr	r2, [r7, #8]
    5d0c:	f04f 0301 	mov.w	r3, #1	; 0x1
    5d10:	fa03 f302 	lsl.w	r3, r3, r2
    5d14:	60bb      	str	r3, [r7, #8]
  bitpos &= USARTx->SR;
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	881b      	ldrh	r3, [r3, #0]
    5d1a:	b29b      	uxth	r3, r3
    5d1c:	461a      	mov	r2, r3
    5d1e:	68bb      	ldr	r3, [r7, #8]
    5d20:	ea03 0302 	and.w	r3, r3, r2
    5d24:	60bb      	str	r3, [r7, #8]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    5d26:	68fb      	ldr	r3, [r7, #12]
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d006      	beq.n	5d3a <USART_GetITStatus+0xbe>
    5d2c:	68bb      	ldr	r3, [r7, #8]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d003      	beq.n	5d3a <USART_GetITStatus+0xbe>
  {
    bitstatus = SET;
    5d32:	f04f 0301 	mov.w	r3, #1	; 0x1
    5d36:	617b      	str	r3, [r7, #20]
    5d38:	e002      	b.n	5d40 <USART_GetITStatus+0xc4>
  }
  else
  {
    bitstatus = RESET;
    5d3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d3e:	617b      	str	r3, [r7, #20]
  }
  
  return bitstatus;  
    5d40:	697b      	ldr	r3, [r7, #20]
}
    5d42:	4618      	mov	r0, r3
    5d44:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5d48:	46bd      	mov	sp, r7
    5d4a:	bc80      	pop	{r7}
    5d4c:	4770      	bx	lr
    5d4e:	46c0      	nop			(mov r8, r8)

00005d50 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    5d50:	b480      	push	{r7}
    5d52:	b083      	sub	sp, #12
    5d54:	af00      	add	r7, sp, #0
    5d56:	6078      	str	r0, [r7, #4]
    5d58:	460b      	mov	r3, r1
    5d5a:	803b      	strh	r3, [r7, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
    5d5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d60:	813b      	strh	r3, [r7, #8]
    5d62:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d66:	817b      	strh	r3, [r7, #10]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    5d68:	883b      	ldrh	r3, [r7, #0]
    5d6a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    5d6e:	813b      	strh	r3, [r7, #8]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    5d70:	893a      	ldrh	r2, [r7, #8]
    5d72:	f04f 0301 	mov.w	r3, #1	; 0x1
    5d76:	fa03 f302 	lsl.w	r3, r3, r2
    5d7a:	817b      	strh	r3, [r7, #10]
  USARTx->SR = (uint16_t)~itmask;
    5d7c:	897b      	ldrh	r3, [r7, #10]
    5d7e:	ea6f 0303 	mvn.w	r3, r3
    5d82:	b29b      	uxth	r3, r3
    5d84:	687a      	ldr	r2, [r7, #4]
    5d86:	8013      	strh	r3, [r2, #0]
}
    5d88:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5d8c:	46bd      	mov	sp, r7
    5d8e:	bc80      	pop	{r7}
    5d90:	4770      	bx	lr
    5d92:	46c0      	nop			(mov r8, r8)

00005d94 <NMI_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
    5d94:	b480      	push	{r7}
    5d96:	af00      	add	r7, sp, #0
}
    5d98:	46bd      	mov	sp, r7
    5d9a:	bc80      	pop	{r7}
    5d9c:	4770      	bx	lr
    5d9e:	46c0      	nop			(mov r8, r8)

00005da0 <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
    5da0:	b480      	push	{r7}
    5da2:	af00      	add	r7, sp, #0
    5da4:	e7fe      	b.n	5da4 <HardFault_Handler+0x4>
    5da6:	46c0      	nop			(mov r8, r8)

00005da8 <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
    5da8:	b480      	push	{r7}
    5daa:	af00      	add	r7, sp, #0
    5dac:	e7fe      	b.n	5dac <MemManage_Handler+0x4>
    5dae:	46c0      	nop			(mov r8, r8)

00005db0 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
    5db0:	b480      	push	{r7}
    5db2:	af00      	add	r7, sp, #0
    5db4:	e7fe      	b.n	5db4 <BusFault_Handler+0x4>
    5db6:	46c0      	nop			(mov r8, r8)

00005db8 <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
    5db8:	b480      	push	{r7}
    5dba:	af00      	add	r7, sp, #0
    5dbc:	e7fe      	b.n	5dbc <UsageFault_Handler+0x4>
    5dbe:	46c0      	nop			(mov r8, r8)

00005dc0 <SVC_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVC_Handler(void)
{
    5dc0:	b480      	push	{r7}
    5dc2:	af00      	add	r7, sp, #0
}
    5dc4:	46bd      	mov	sp, r7
    5dc6:	bc80      	pop	{r7}
    5dc8:	4770      	bx	lr
    5dca:	46c0      	nop			(mov r8, r8)

00005dcc <DebugMon_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMon_Handler(void)
{
    5dcc:	b480      	push	{r7}
    5dce:	af00      	add	r7, sp, #0
}
    5dd0:	46bd      	mov	sp, r7
    5dd2:	bc80      	pop	{r7}
    5dd4:	4770      	bx	lr
    5dd6:	46c0      	nop			(mov r8, r8)

00005dd8 <PendSV_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSV_Handler(void)
{
    5dd8:	b480      	push	{r7}
    5dda:	af00      	add	r7, sp, #0
}
    5ddc:	46bd      	mov	sp, r7
    5dde:	bc80      	pop	{r7}
    5de0:	4770      	bx	lr
    5de2:	46c0      	nop			(mov r8, r8)

00005de4 <SysTick_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_Handler(void)
{
    5de4:	b480      	push	{r7}
    5de6:	af00      	add	r7, sp, #0
}
    5de8:	46bd      	mov	sp, r7
    5dea:	bc80      	pop	{r7}
    5dec:	4770      	bx	lr
    5dee:	46c0      	nop			(mov r8, r8)

00005df0 <USB_LP_CAN1_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	af00      	add	r7, sp, #0
  USB_Istr();
    5df4:	f7fa fea0 	bl	b38 <USB_Istr>
}
    5df8:	46bd      	mov	sp, r7
    5dfa:	bd80      	pop	{r7, pc}

00005dfc <RTC_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_xx.s).                                            */
/******************************************************************************/

void RTC_IRQHandler(void)
{
    5dfc:	b580      	push	{r7, lr}
    5dfe:	af00      	add	r7, sp, #0
  if (RTC_GetITStatus(RTC_IT_SEC) != RESET)
    5e00:	f04f 0001 	mov.w	r0, #1	; 0x1
    5e04:	f000 fb00 	bl	6408 <RTC_GetITStatus>
    5e08:	4603      	mov	r3, r0
    5e0a:	2b00      	cmp	r3, #0
    5e0c:	d020      	beq.n	5e50 <RTC_IRQHandler+0x54>
  {
    /* Clear the RTC Second interrupt */
    RTC_ClearITPendingBit(RTC_IT_SEC);
    5e0e:	f04f 0001 	mov.w	r0, #1	; 0x1
    5e12:	f000 fb25 	bl	6460 <RTC_ClearITPendingBit>

    /* Toggle LED1 */
	GPIO_WriteBit(GPIOC,GPIO_Pin_12,RTC_GetCounter() & 0x00000001);
    5e16:	f000 fa0b 	bl	6230 <RTC_GetCounter>
    5e1a:	4603      	mov	r3, r0
    5e1c:	f003 0301 	and.w	r3, r3, #1	; 0x1
    5e20:	480c      	ldr	r0, [pc, #48]	(5e54 <RTC_IRQHandler+0x58>)
    5e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5e26:	461a      	mov	r2, r3
    5e28:	f7ff f9a6 	bl	5178 <GPIO_WriteBit>

    /* Enable time update */
    TimeDisplay = 1;
    5e2c:	4a0a      	ldr	r2, [pc, #40]	(5e58 <RTC_IRQHandler+0x5c>)
    5e2e:	f04f 0301 	mov.w	r3, #1	; 0x1
    5e32:	6013      	str	r3, [r2, #0]

    /* Wait until last write operation on RTC registers has finished */
    RTC_WaitForLastTask();
    5e34:	f000 fa80 	bl	6338 <RTC_WaitForLastTask>
    /* Reset RTC Counter when Time is 23:59:59 */
    if (RTC_GetCounter() == 0x00015180)
    5e38:	f000 f9fa 	bl	6230 <RTC_GetCounter>
    5e3c:	4602      	mov	r2, r0
    5e3e:	4b07      	ldr	r3, [pc, #28]	(5e5c <RTC_IRQHandler+0x60>)
    5e40:	429a      	cmp	r2, r3
    5e42:	d105      	bne.n	5e50 <RTC_IRQHandler+0x54>
    {
      RTC_SetCounter(0x0);
    5e44:	f04f 0000 	mov.w	r0, #0	; 0x0
    5e48:	f000 fa0c 	bl	6264 <RTC_SetCounter>
      /* Wait until last write operation on RTC registers has finished */
      RTC_WaitForLastTask();
    5e4c:	f000 fa74 	bl	6338 <RTC_WaitForLastTask>
    }
  }
}
    5e50:	46bd      	mov	sp, r7
    5e52:	bd80      	pop	{r7, pc}
    5e54:	40011000 	.word	0x40011000
    5e58:	200000fc 	.word	0x200000fc
    5e5c:	00015180 	.word	0x00015180

00005e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
    5e60:	b580      	push	{r7, lr}
    5e62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    5e64:	4a14      	ldr	r2, [pc, #80]	(5eb8 <SystemInit+0x58>)
    5e66:	4b14      	ldr	r3, [pc, #80]	(5eb8 <SystemInit+0x58>)
    5e68:	681b      	ldr	r3, [r3, #0]
    5e6a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    5e6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    5e70:	4911      	ldr	r1, [pc, #68]	(5eb8 <SystemInit+0x58>)
    5e72:	4b11      	ldr	r3, [pc, #68]	(5eb8 <SystemInit+0x58>)
    5e74:	685a      	ldr	r2, [r3, #4]
    5e76:	4b11      	ldr	r3, [pc, #68]	(5ebc <SystemInit+0x5c>)
    5e78:	ea02 0303 	and.w	r3, r2, r3
    5e7c:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    5e7e:	4a0e      	ldr	r2, [pc, #56]	(5eb8 <SystemInit+0x58>)
    5e80:	4b0d      	ldr	r3, [pc, #52]	(5eb8 <SystemInit+0x58>)
    5e82:	681b      	ldr	r3, [r3, #0]
    5e84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    5e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5e8c:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    5e8e:	4a0a      	ldr	r2, [pc, #40]	(5eb8 <SystemInit+0x58>)
    5e90:	4b09      	ldr	r3, [pc, #36]	(5eb8 <SystemInit+0x58>)
    5e92:	681b      	ldr	r3, [r3, #0]
    5e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    5e98:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    5e9a:	4a07      	ldr	r2, [pc, #28]	(5eb8 <SystemInit+0x58>)
    5e9c:	4b06      	ldr	r3, [pc, #24]	(5eb8 <SystemInit+0x58>)
    5e9e:	685b      	ldr	r3, [r3, #4]
    5ea0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    5ea4:	6053      	str	r3, [r2, #4]

#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    5ea6:	4a04      	ldr	r2, [pc, #16]	(5eb8 <SystemInit+0x58>)
    5ea8:	f44f 031f 	mov.w	r3, #10420224	; 0x9f0000
    5eac:	6093      	str	r3, [r2, #8]
  RCC->CFGR2 = 0x00000000;
#endif /* STM32F10X_CL */
    
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
    5eae:	f000 f807 	bl	5ec0 <SetSysClock>

}
    5eb2:	46bd      	mov	sp, r7
    5eb4:	bd80      	pop	{r7, pc}
    5eb6:	46c0      	nop			(mov r8, r8)
    5eb8:	40021000 	.word	0x40021000
    5ebc:	f8ff0000 	.word	0xf8ff0000

00005ec0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
    5ec4:	f000 f802 	bl	5ecc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
    5ec8:	46bd      	mov	sp, r7
    5eca:	bd80      	pop	{r7, pc}

00005ecc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
    5ecc:	b480      	push	{r7}
    5ece:	b082      	sub	sp, #8
    5ed0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    5ed2:	f04f 0300 	mov.w	r3, #0	; 0x0
    5ed6:	607b      	str	r3, [r7, #4]
    5ed8:	f04f 0300 	mov.w	r3, #0	; 0x0
    5edc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    5ede:	4a3c      	ldr	r2, [pc, #240]	(5fd0 <SetSysClockTo72+0x104>)
    5ee0:	4b3b      	ldr	r3, [pc, #236]	(5fd0 <SetSysClockTo72+0x104>)
    5ee2:	681b      	ldr	r3, [r3, #0]
    5ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5ee8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    5eea:	4b39      	ldr	r3, [pc, #228]	(5fd0 <SetSysClockTo72+0x104>)
    5eec:	681b      	ldr	r3, [r3, #0]
    5eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    5ef2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5efa:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
    5efc:	683b      	ldr	r3, [r7, #0]
    5efe:	2b00      	cmp	r3, #0
    5f00:	d103      	bne.n	5f0a <SetSysClockTo72+0x3e>
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    5f08:	d1ef      	bne.n	5eea <SetSysClockTo72+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    5f0a:	4b31      	ldr	r3, [pc, #196]	(5fd0 <SetSysClockTo72+0x104>)
    5f0c:	681b      	ldr	r3, [r3, #0]
    5f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    5f12:	2b00      	cmp	r3, #0
    5f14:	d003      	beq.n	5f1e <SetSysClockTo72+0x52>
  {
    HSEStatus = (uint32_t)0x01;
    5f16:	f04f 0301 	mov.w	r3, #1	; 0x1
    5f1a:	603b      	str	r3, [r7, #0]
    5f1c:	e002      	b.n	5f24 <SetSysClockTo72+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
    5f1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f22:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
    5f24:	683b      	ldr	r3, [r7, #0]
    5f26:	2b01      	cmp	r3, #1
    5f28:	d14b      	bne.n	5fc2 <SetSysClockTo72+0xf6>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
    5f2a:	f8df 20a8 	ldr.w	r2, [pc, #168]	; 5fd4 <SetSysClockTo72+0x108>
    5f2e:	4b29      	ldr	r3, [pc, #164]	(5fd4 <SetSysClockTo72+0x108>)
    5f30:	681b      	ldr	r3, [r3, #0]
    5f32:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    5f36:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    5f38:	4a26      	ldr	r2, [pc, #152]	(5fd4 <SetSysClockTo72+0x108>)
    5f3a:	4b26      	ldr	r3, [pc, #152]	(5fd4 <SetSysClockTo72+0x108>)
    5f3c:	681b      	ldr	r3, [r3, #0]
    5f3e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    5f42:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
    5f44:	4a23      	ldr	r2, [pc, #140]	(5fd4 <SetSysClockTo72+0x108>)
    5f46:	4b23      	ldr	r3, [pc, #140]	(5fd4 <SetSysClockTo72+0x108>)
    5f48:	681b      	ldr	r3, [r3, #0]
    5f4a:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    5f4e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    5f50:	4a1f      	ldr	r2, [pc, #124]	(5fd0 <SetSysClockTo72+0x104>)
    5f52:	4b1f      	ldr	r3, [pc, #124]	(5fd0 <SetSysClockTo72+0x104>)
    5f54:	685b      	ldr	r3, [r3, #4]
    5f56:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
    5f58:	4a1d      	ldr	r2, [pc, #116]	(5fd0 <SetSysClockTo72+0x104>)
    5f5a:	4b1d      	ldr	r3, [pc, #116]	(5fd0 <SetSysClockTo72+0x104>)
    5f5c:	685b      	ldr	r3, [r3, #4]
    5f5e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK/2 */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
    5f60:	4a1b      	ldr	r2, [pc, #108]	(5fd0 <SetSysClockTo72+0x104>)
    5f62:	4b1b      	ldr	r3, [pc, #108]	(5fd0 <SetSysClockTo72+0x104>)
    5f64:	685b      	ldr	r3, [r3, #4]
    5f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    5f6a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
    5f6c:	4a18      	ldr	r2, [pc, #96]	(5fd0 <SetSysClockTo72+0x104>)
    5f6e:	4b18      	ldr	r3, [pc, #96]	(5fd0 <SetSysClockTo72+0x104>)
    5f70:	685b      	ldr	r3, [r3, #4]
    5f72:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    5f76:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
    5f78:	4a15      	ldr	r2, [pc, #84]	(5fd0 <SetSysClockTo72+0x104>)
    5f7a:	4b15      	ldr	r3, [pc, #84]	(5fd0 <SetSysClockTo72+0x104>)
    5f7c:	685b      	ldr	r3, [r3, #4]
    5f7e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
    5f82:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
    5f84:	4a12      	ldr	r2, [pc, #72]	(5fd0 <SetSysClockTo72+0x104>)
    5f86:	4b12      	ldr	r3, [pc, #72]	(5fd0 <SetSysClockTo72+0x104>)
    5f88:	681b      	ldr	r3, [r3, #0]
    5f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5f8e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    5f90:	4b0f      	ldr	r3, [pc, #60]	(5fd0 <SetSysClockTo72+0x104>)
    5f92:	681b      	ldr	r3, [r3, #0]
    5f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d0f9      	beq.n	5f90 <SetSysClockTo72+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    5f9c:	4a0c      	ldr	r2, [pc, #48]	(5fd0 <SetSysClockTo72+0x104>)
    5f9e:	4b0c      	ldr	r3, [pc, #48]	(5fd0 <SetSysClockTo72+0x104>)
    5fa0:	685b      	ldr	r3, [r3, #4]
    5fa2:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    5fa6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
    5fa8:	4a09      	ldr	r2, [pc, #36]	(5fd0 <SetSysClockTo72+0x104>)
    5faa:	4b09      	ldr	r3, [pc, #36]	(5fd0 <SetSysClockTo72+0x104>)
    5fac:	685b      	ldr	r3, [r3, #4]
    5fae:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    5fb2:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
    5fb4:	4b06      	ldr	r3, [pc, #24]	(5fd0 <SetSysClockTo72+0x104>)
    5fb6:	685b      	ldr	r3, [r3, #4]
    5fb8:	f003 030c 	and.w	r3, r3, #12	; 0xc
    5fbc:	2b08      	cmp	r3, #8
    5fbe:	d1f9      	bne.n	5fb4 <SetSysClockTo72+0xe8>
    5fc0:	e000      	b.n	5fc4 <SetSysClockTo72+0xf8>
    5fc2:	e7fe      	b.n	5fc2 <SetSysClockTo72+0xf6>
         configuration. User can add here some code to deal with this error */    

    /* Go to infinite loop */
    while (1)
    {
    }
    5fc4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5fc8:	46bd      	mov	sp, r7
    5fca:	bc80      	pop	{r7}
    5fcc:	4770      	bx	lr
    5fce:	46c0      	nop			(mov r8, r8)
    5fd0:	40021000 	.word	0x40021000
    5fd4:	40022000 	.word	0x40022000

00005fd8 <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	af00      	add	r7, sp, #0
  RCC_BackupResetCmd(ENABLE);
    5fdc:	f04f 0001 	mov.w	r0, #1	; 0x1
    5fe0:	f7fe f994 	bl	430c <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
    5fe4:	f04f 0000 	mov.w	r0, #0	; 0x0
    5fe8:	f7fe f990 	bl	430c <RCC_BackupResetCmd>
}
    5fec:	46bd      	mov	sp, r7
    5fee:	bd80      	pop	{r7, pc}

00005ff0 <BKP_TamperPinLevelConfig>:
  *     @arg BKP_TamperPinLevel_High: Tamper pin active on high level
  *     @arg BKP_TamperPinLevel_Low: Tamper pin active on low level
  * @retval None
  */
void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
{
    5ff0:	b480      	push	{r7}
    5ff2:	b081      	sub	sp, #4
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	4603      	mov	r3, r0
    5ff8:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
  *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
    5ffa:	4a04      	ldr	r2, [pc, #16]	(600c <BKP_TamperPinLevelConfig+0x1c>)
    5ffc:	883b      	ldrh	r3, [r7, #0]
    5ffe:	6013      	str	r3, [r2, #0]
}
    6000:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6004:	46bd      	mov	sp, r7
    6006:	bc80      	pop	{r7}
    6008:	4770      	bx	lr
    600a:	46c0      	nop			(mov r8, r8)
    600c:	420d8604 	.word	0x420d8604

00006010 <BKP_TamperPinCmd>:
  * @param  NewState: new state of the Tamper Pin activation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void BKP_TamperPinCmd(FunctionalState NewState)
{
    6010:	b480      	push	{r7}
    6012:	b081      	sub	sp, #4
    6014:	af00      	add	r7, sp, #0
    6016:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
    6018:	4a03      	ldr	r2, [pc, #12]	(6028 <BKP_TamperPinCmd+0x18>)
    601a:	683b      	ldr	r3, [r7, #0]
    601c:	6013      	str	r3, [r2, #0]
}
    601e:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6022:	46bd      	mov	sp, r7
    6024:	bc80      	pop	{r7}
    6026:	4770      	bx	lr
    6028:	420d8600 	.word	0x420d8600

0000602c <BKP_ITConfig>:
  * @param  NewState: new state of the Tamper Pin Interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void BKP_ITConfig(FunctionalState NewState)
{
    602c:	b480      	push	{r7}
    602e:	b081      	sub	sp, #4
    6030:	af00      	add	r7, sp, #0
    6032:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
    6034:	4a03      	ldr	r2, [pc, #12]	(6044 <BKP_ITConfig+0x18>)
    6036:	683b      	ldr	r3, [r7, #0]
    6038:	6013      	str	r3, [r2, #0]
}
    603a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    603e:	46bd      	mov	sp, r7
    6040:	bc80      	pop	{r7}
    6042:	4770      	bx	lr
    6044:	420d8688 	.word	0x420d8688

00006048 <BKP_RTCOutputConfig>:
  *     @arg BKP_RTCOutputSource_Second: output the RTC Second pulse signal on
  *                                      the Tamper pin.  
  * @retval None
  */
void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
{
    6048:	b480      	push	{r7}
    604a:	b082      	sub	sp, #8
    604c:	af00      	add	r7, sp, #0
    604e:	4603      	mov	r3, r0
    6050:	803b      	strh	r3, [r7, #0]
  uint16_t tmpreg = 0;
    6052:	f04f 0300 	mov.w	r3, #0	; 0x0
    6056:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
  tmpreg = BKP->RTCCR;
    6058:	4b09      	ldr	r3, [pc, #36]	(6080 <BKP_RTCOutputConfig+0x38>)
    605a:	8d9b      	ldrh	r3, [r3, #44]
    605c:	80fb      	strh	r3, [r7, #6]
  /* Clear CCO, ASOE and ASOS bits */
  tmpreg &= RTCCR_Mask;
    605e:	88fb      	ldrh	r3, [r7, #6]
    6060:	f423 7360 	bic.w	r3, r3, #896	; 0x380
    6064:	80fb      	strh	r3, [r7, #6]
  
  /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
  tmpreg |= BKP_RTCOutputSource;
    6066:	88fa      	ldrh	r2, [r7, #6]
    6068:	883b      	ldrh	r3, [r7, #0]
    606a:	ea42 0303 	orr.w	r3, r2, r3
    606e:	80fb      	strh	r3, [r7, #6]
  /* Store the new value */
  BKP->RTCCR = tmpreg;
    6070:	4a03      	ldr	r2, [pc, #12]	(6080 <BKP_RTCOutputConfig+0x38>)
    6072:	88fb      	ldrh	r3, [r7, #6]
    6074:	8593      	strh	r3, [r2, #44]
}
    6076:	f107 0708 	add.w	r7, r7, #8	; 0x8
    607a:	46bd      	mov	sp, r7
    607c:	bc80      	pop	{r7}
    607e:	4770      	bx	lr
    6080:	40006c00 	.word	0x40006c00

00006084 <BKP_SetRTCCalibrationValue>:
  * @param  CalibrationValue: specifies the RTC Clock Calibration value.
  *   This parameter must be a number between 0 and 0x7F.
  * @retval None
  */
void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
{
    6084:	b480      	push	{r7}
    6086:	b082      	sub	sp, #8
    6088:	af00      	add	r7, sp, #0
    608a:	4603      	mov	r3, r0
    608c:	703b      	strb	r3, [r7, #0]
  uint16_t tmpreg = 0;
    608e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6092:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
  tmpreg = BKP->RTCCR;
    6094:	4b09      	ldr	r3, [pc, #36]	(60bc <BKP_SetRTCCalibrationValue+0x38>)
    6096:	8d9b      	ldrh	r3, [r3, #44]
    6098:	80fb      	strh	r3, [r7, #6]
  /* Clear CAL[6:0] bits */
  tmpreg &= RTCCR_CAL_Mask;
    609a:	88fb      	ldrh	r3, [r7, #6]
    609c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    60a0:	80fb      	strh	r3, [r7, #6]
  /* Set CAL[6:0] bits according to CalibrationValue value */
  tmpreg |= CalibrationValue;
    60a2:	783a      	ldrb	r2, [r7, #0]
    60a4:	88fb      	ldrh	r3, [r7, #6]
    60a6:	ea42 0303 	orr.w	r3, r2, r3
    60aa:	80fb      	strh	r3, [r7, #6]
  /* Store the new value */
  BKP->RTCCR = tmpreg;
    60ac:	4a03      	ldr	r2, [pc, #12]	(60bc <BKP_SetRTCCalibrationValue+0x38>)
    60ae:	88fb      	ldrh	r3, [r7, #6]
    60b0:	8593      	strh	r3, [r2, #44]
}
    60b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    60b6:	46bd      	mov	sp, r7
    60b8:	bc80      	pop	{r7}
    60ba:	4770      	bx	lr
    60bc:	40006c00 	.word	0x40006c00

000060c0 <BKP_WriteBackupRegister>:
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
    60c0:	b480      	push	{r7}
    60c2:	b083      	sub	sp, #12
    60c4:	af00      	add	r7, sp, #0
    60c6:	4603      	mov	r3, r0
    60c8:	460a      	mov	r2, r1
    60ca:	80bb      	strh	r3, [r7, #4]
    60cc:	4613      	mov	r3, r2
    60ce:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    60d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    60d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
    60d6:	4b07      	ldr	r3, [pc, #28]	(60f4 <BKP_WriteBackupRegister+0x34>)
    60d8:	60bb      	str	r3, [r7, #8]
  tmp += BKP_DR;
    60da:	88ba      	ldrh	r2, [r7, #4]
    60dc:	68bb      	ldr	r3, [r7, #8]
    60de:	4413      	add	r3, r2
    60e0:	60bb      	str	r3, [r7, #8]

  *(__IO uint32_t *) tmp = Data;
    60e2:	68bb      	ldr	r3, [r7, #8]
    60e4:	461a      	mov	r2, r3
    60e6:	883b      	ldrh	r3, [r7, #0]
    60e8:	6013      	str	r3, [r2, #0]
}
    60ea:	f107 070c 	add.w	r7, r7, #12	; 0xc
    60ee:	46bd      	mov	sp, r7
    60f0:	bc80      	pop	{r7}
    60f2:	4770      	bx	lr
    60f4:	40006c00 	.word	0x40006c00

000060f8 <BKP_ReadBackupRegister>:
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
    60f8:	b480      	push	{r7}
    60fa:	b082      	sub	sp, #8
    60fc:	af00      	add	r7, sp, #0
    60fe:	4603      	mov	r3, r0
    6100:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    6102:	f04f 0300 	mov.w	r3, #0	; 0x0
    6106:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
    6108:	4b07      	ldr	r3, [pc, #28]	(6128 <BKP_ReadBackupRegister+0x30>)
    610a:	607b      	str	r3, [r7, #4]
  tmp += BKP_DR;
    610c:	883a      	ldrh	r2, [r7, #0]
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	4413      	add	r3, r2
    6112:	607b      	str	r3, [r7, #4]

  return (*(__IO uint16_t *) tmp);
    6114:	687b      	ldr	r3, [r7, #4]
    6116:	881b      	ldrh	r3, [r3, #0]
    6118:	b29b      	uxth	r3, r3
}
    611a:	4618      	mov	r0, r3
    611c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6120:	46bd      	mov	sp, r7
    6122:	bc80      	pop	{r7}
    6124:	4770      	bx	lr
    6126:	46c0      	nop			(mov r8, r8)
    6128:	40006c00 	.word	0x40006c00

0000612c <BKP_GetFlagStatus>:
  * @brief  Checks whether the Tamper Pin Event flag is set or not.
  * @param  None
  * @retval The new state of the Tamper Pin Event flag (SET or RESET).
  */
FlagStatus BKP_GetFlagStatus(void)
{
    612c:	b480      	push	{r7}
    612e:	af00      	add	r7, sp, #0
  return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
    6130:	4b02      	ldr	r3, [pc, #8]	(613c <BKP_GetFlagStatus+0x10>)
    6132:	681b      	ldr	r3, [r3, #0]
}
    6134:	4618      	mov	r0, r3
    6136:	46bd      	mov	sp, r7
    6138:	bc80      	pop	{r7}
    613a:	4770      	bx	lr
    613c:	420d86a0 	.word	0x420d86a0

00006140 <BKP_ClearFlag>:
  * @brief  Clears Tamper Pin Event pending flag.
  * @param  None
  * @retval None
  */
void BKP_ClearFlag(void)
{
    6140:	b480      	push	{r7}
    6142:	af00      	add	r7, sp, #0
  /* Set CTE bit to clear Tamper Pin Event flag */
  BKP->CSR |= CSR_CTE_Set;
    6144:	4a05      	ldr	r2, [pc, #20]	(615c <BKP_ClearFlag+0x1c>)
    6146:	4b05      	ldr	r3, [pc, #20]	(615c <BKP_ClearFlag+0x1c>)
    6148:	8e9b      	ldrh	r3, [r3, #52]
    614a:	b29b      	uxth	r3, r3
    614c:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    6150:	b29b      	uxth	r3, r3
    6152:	8693      	strh	r3, [r2, #52]
}
    6154:	46bd      	mov	sp, r7
    6156:	bc80      	pop	{r7}
    6158:	4770      	bx	lr
    615a:	46c0      	nop			(mov r8, r8)
    615c:	40006c00 	.word	0x40006c00

00006160 <BKP_GetITStatus>:
  * @brief  Checks whether the Tamper Pin Interrupt has occurred or not.
  * @param  None
  * @retval The new state of the Tamper Pin Interrupt (SET or RESET).
  */
ITStatus BKP_GetITStatus(void)
{
    6160:	b480      	push	{r7}
    6162:	af00      	add	r7, sp, #0
  return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
    6164:	4b02      	ldr	r3, [pc, #8]	(6170 <BKP_GetITStatus+0x10>)
    6166:	681b      	ldr	r3, [r3, #0]
}
    6168:	4618      	mov	r0, r3
    616a:	46bd      	mov	sp, r7
    616c:	bc80      	pop	{r7}
    616e:	4770      	bx	lr
    6170:	420d86a4 	.word	0x420d86a4

00006174 <BKP_ClearITPendingBit>:
  * @brief  Clears Tamper Pin Interrupt pending bit.
  * @param  None
  * @retval None
  */
void BKP_ClearITPendingBit(void)
{
    6174:	b480      	push	{r7}
    6176:	af00      	add	r7, sp, #0
  /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
  BKP->CSR |= CSR_CTI_Set;
    6178:	4a05      	ldr	r2, [pc, #20]	(6190 <BKP_ClearITPendingBit+0x1c>)
    617a:	4b05      	ldr	r3, [pc, #20]	(6190 <BKP_ClearITPendingBit+0x1c>)
    617c:	8e9b      	ldrh	r3, [r3, #52]
    617e:	b29b      	uxth	r3, r3
    6180:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    6184:	b29b      	uxth	r3, r3
    6186:	8693      	strh	r3, [r2, #52]
}
    6188:	46bd      	mov	sp, r7
    618a:	bc80      	pop	{r7}
    618c:	4770      	bx	lr
    618e:	46c0      	nop			(mov r8, r8)
    6190:	40006c00 	.word	0x40006c00

00006194 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
    6194:	b480      	push	{r7}
    6196:	b082      	sub	sp, #8
    6198:	af00      	add	r7, sp, #0
    619a:	4603      	mov	r3, r0
    619c:	6039      	str	r1, [r7, #0]
    619e:	80bb      	strh	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    61a0:	683b      	ldr	r3, [r7, #0]
    61a2:	2b00      	cmp	r3, #0
    61a4:	d009      	beq.n	61ba <RTC_ITConfig+0x26>
  {
    RTC->CRH |= RTC_IT;
    61a6:	490d      	ldr	r1, [pc, #52]	(61dc <RTC_ITConfig+0x48>)
    61a8:	4b0c      	ldr	r3, [pc, #48]	(61dc <RTC_ITConfig+0x48>)
    61aa:	881b      	ldrh	r3, [r3, #0]
    61ac:	b29a      	uxth	r2, r3
    61ae:	88bb      	ldrh	r3, [r7, #4]
    61b0:	ea42 0303 	orr.w	r3, r2, r3
    61b4:	b29b      	uxth	r3, r3
    61b6:	800b      	strh	r3, [r1, #0]
    61b8:	e00b      	b.n	61d2 <RTC_ITConfig+0x3e>
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
    61ba:	4908      	ldr	r1, [pc, #32]	(61dc <RTC_ITConfig+0x48>)
    61bc:	4b07      	ldr	r3, [pc, #28]	(61dc <RTC_ITConfig+0x48>)
    61be:	881b      	ldrh	r3, [r3, #0]
    61c0:	b29a      	uxth	r2, r3
    61c2:	88bb      	ldrh	r3, [r7, #4]
    61c4:	ea6f 0303 	mvn.w	r3, r3
    61c8:	b29b      	uxth	r3, r3
    61ca:	ea02 0303 	and.w	r3, r2, r3
    61ce:	b29b      	uxth	r3, r3
    61d0:	800b      	strh	r3, [r1, #0]
  }
}
    61d2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    61d6:	46bd      	mov	sp, r7
    61d8:	bc80      	pop	{r7}
    61da:	4770      	bx	lr
    61dc:	40002800 	.word	0x40002800

000061e0 <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
    61e0:	b480      	push	{r7}
    61e2:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= CRL_CNF_Set;
    61e4:	4a05      	ldr	r2, [pc, #20]	(61fc <RTC_EnterConfigMode+0x1c>)
    61e6:	4b05      	ldr	r3, [pc, #20]	(61fc <RTC_EnterConfigMode+0x1c>)
    61e8:	889b      	ldrh	r3, [r3, #4]
    61ea:	b29b      	uxth	r3, r3
    61ec:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    61f0:	b29b      	uxth	r3, r3
    61f2:	8093      	strh	r3, [r2, #4]
}
    61f4:	46bd      	mov	sp, r7
    61f6:	bc80      	pop	{r7}
    61f8:	4770      	bx	lr
    61fa:	46c0      	nop			(mov r8, r8)
    61fc:	40002800 	.word	0x40002800

00006200 <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
    6200:	b480      	push	{r7}
    6202:	b081      	sub	sp, #4
    6204:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= CRL_CNF_Reset;
    6206:	4a09      	ldr	r2, [pc, #36]	(622c <RTC_ExitConfigMode+0x2c>)
    6208:	4b08      	ldr	r3, [pc, #32]	(622c <RTC_ExitConfigMode+0x2c>)
    620a:	889b      	ldrh	r3, [r3, #4]
    620c:	b29b      	uxth	r3, r3
    620e:	603b      	str	r3, [r7, #0]
    6210:	f64f 73ef 	movw	r3, #65519	; 0xffef
    6214:	6839      	ldr	r1, [r7, #0]
    6216:	ea01 0303 	and.w	r3, r1, r3
    621a:	603b      	str	r3, [r7, #0]
    621c:	6839      	ldr	r1, [r7, #0]
    621e:	460b      	mov	r3, r1
    6220:	8093      	strh	r3, [r2, #4]
}
    6222:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6226:	46bd      	mov	sp, r7
    6228:	bc80      	pop	{r7}
    622a:	4770      	bx	lr
    622c:	40002800 	.word	0x40002800

00006230 <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
    6230:	b480      	push	{r7}
    6232:	b081      	sub	sp, #4
    6234:	af00      	add	r7, sp, #0
  uint16_t tmp = 0;
    6236:	f04f 0300 	mov.w	r3, #0	; 0x0
    623a:	807b      	strh	r3, [r7, #2]
  tmp = RTC->CNTL;
    623c:	4b08      	ldr	r3, [pc, #32]	(6260 <RTC_GetCounter+0x30>)
    623e:	8b9b      	ldrh	r3, [r3, #28]
    6240:	807b      	strh	r3, [r7, #2]
  return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    6242:	4b07      	ldr	r3, [pc, #28]	(6260 <RTC_GetCounter+0x30>)
    6244:	8b1b      	ldrh	r3, [r3, #24]
    6246:	b29b      	uxth	r3, r3
    6248:	ea4f 4203 	mov.w	r2, r3, lsl #16
    624c:	887b      	ldrh	r3, [r7, #2]
    624e:	ea42 0303 	orr.w	r3, r2, r3
}
    6252:	4618      	mov	r0, r3
    6254:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6258:	46bd      	mov	sp, r7
    625a:	bc80      	pop	{r7}
    625c:	4770      	bx	lr
    625e:	46c0      	nop			(mov r8, r8)
    6260:	40002800 	.word	0x40002800

00006264 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
    6264:	b580      	push	{r7, lr}
    6266:	b081      	sub	sp, #4
    6268:	af00      	add	r7, sp, #0
    626a:	6038      	str	r0, [r7, #0]
  RTC_EnterConfigMode();
    626c:	f7ff ffb8 	bl	61e0 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
    6270:	4a07      	ldr	r2, [pc, #28]	(6290 <RTC_SetCounter+0x2c>)
    6272:	683b      	ldr	r3, [r7, #0]
    6274:	ea4f 4313 	mov.w	r3, r3, lsr #16
    6278:	b29b      	uxth	r3, r3
    627a:	8313      	strh	r3, [r2, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_Mask);
    627c:	4a04      	ldr	r2, [pc, #16]	(6290 <RTC_SetCounter+0x2c>)
    627e:	683b      	ldr	r3, [r7, #0]
    6280:	b29b      	uxth	r3, r3
    6282:	8393      	strh	r3, [r2, #28]
  RTC_ExitConfigMode();
    6284:	f7ff ffbc 	bl	6200 <RTC_ExitConfigMode>
}
    6288:	f107 0704 	add.w	r7, r7, #4	; 0x4
    628c:	46bd      	mov	sp, r7
    628e:	bd80      	pop	{r7, pc}
    6290:	40002800 	.word	0x40002800

00006294 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
    6294:	b580      	push	{r7, lr}
    6296:	b081      	sub	sp, #4
    6298:	af00      	add	r7, sp, #0
    629a:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
    629c:	f7ff ffa0 	bl	61e0 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_Mask) >> 16;
    62a0:	4a08      	ldr	r2, [pc, #32]	(62c4 <RTC_SetPrescaler+0x30>)
    62a2:	683b      	ldr	r3, [r7, #0]
    62a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    62a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
    62ac:	b29b      	uxth	r3, r3
    62ae:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_Mask);
    62b0:	4a04      	ldr	r2, [pc, #16]	(62c4 <RTC_SetPrescaler+0x30>)
    62b2:	683b      	ldr	r3, [r7, #0]
    62b4:	b29b      	uxth	r3, r3
    62b6:	8193      	strh	r3, [r2, #12]
  RTC_ExitConfigMode();
    62b8:	f7ff ffa2 	bl	6200 <RTC_ExitConfigMode>
}
    62bc:	f107 0704 	add.w	r7, r7, #4	; 0x4
    62c0:	46bd      	mov	sp, r7
    62c2:	bd80      	pop	{r7, pc}
    62c4:	40002800 	.word	0x40002800

000062c8 <RTC_SetAlarm>:
  * @brief  Sets the RTC alarm value.
  * @param  AlarmValue: RTC alarm new value.
  * @retval None
  */
void RTC_SetAlarm(uint32_t AlarmValue)
{  
    62c8:	b580      	push	{r7, lr}
    62ca:	b081      	sub	sp, #4
    62cc:	af00      	add	r7, sp, #0
    62ce:	6038      	str	r0, [r7, #0]
  RTC_EnterConfigMode();
    62d0:	f7ff ff86 	bl	61e0 <RTC_EnterConfigMode>
  /* Set the ALARM MSB word */
  RTC->ALRH = AlarmValue >> 16;
    62d4:	4a07      	ldr	r2, [pc, #28]	(62f4 <RTC_SetAlarm+0x2c>)
    62d6:	683b      	ldr	r3, [r7, #0]
    62d8:	ea4f 4313 	mov.w	r3, r3, lsr #16
    62dc:	b29b      	uxth	r3, r3
    62de:	8413      	strh	r3, [r2, #32]
  /* Set the ALARM LSB word */
  RTC->ALRL = (AlarmValue & RTC_LSB_Mask);
    62e0:	4a04      	ldr	r2, [pc, #16]	(62f4 <RTC_SetAlarm+0x2c>)
    62e2:	683b      	ldr	r3, [r7, #0]
    62e4:	b29b      	uxth	r3, r3
    62e6:	8493      	strh	r3, [r2, #36]
  RTC_ExitConfigMode();
    62e8:	f7ff ff8a 	bl	6200 <RTC_ExitConfigMode>
}
    62ec:	f107 0704 	add.w	r7, r7, #4	; 0x4
    62f0:	46bd      	mov	sp, r7
    62f2:	bd80      	pop	{r7, pc}
    62f4:	40002800 	.word	0x40002800

000062f8 <RTC_GetDivider>:
  * @brief  Gets the RTC divider value.
  * @param  None
  * @retval RTC Divider value.
  */
uint32_t RTC_GetDivider(void)
{
    62f8:	b480      	push	{r7}
    62fa:	b081      	sub	sp, #4
    62fc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0x00;
    62fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    6302:	603b      	str	r3, [r7, #0]
  tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    6304:	4b0b      	ldr	r3, [pc, #44]	(6334 <RTC_GetDivider+0x3c>)
    6306:	8a1b      	ldrh	r3, [r3, #16]
    6308:	b29b      	uxth	r3, r3
    630a:	f003 030f 	and.w	r3, r3, #15	; 0xf
    630e:	ea4f 4303 	mov.w	r3, r3, lsl #16
    6312:	603b      	str	r3, [r7, #0]
  tmp |= RTC->DIVL;
    6314:	4b07      	ldr	r3, [pc, #28]	(6334 <RTC_GetDivider+0x3c>)
    6316:	8a9b      	ldrh	r3, [r3, #20]
    6318:	b29b      	uxth	r3, r3
    631a:	461a      	mov	r2, r3
    631c:	683b      	ldr	r3, [r7, #0]
    631e:	ea43 0302 	orr.w	r3, r3, r2
    6322:	603b      	str	r3, [r7, #0]
  return tmp;
    6324:	683b      	ldr	r3, [r7, #0]
}
    6326:	4618      	mov	r0, r3
    6328:	f107 0704 	add.w	r7, r7, #4	; 0x4
    632c:	46bd      	mov	sp, r7
    632e:	bc80      	pop	{r7}
    6330:	4770      	bx	lr
    6332:	46c0      	nop			(mov r8, r8)
    6334:	40002800 	.word	0x40002800

00006338 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
    6338:	b480      	push	{r7}
    633a:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    633c:	4b04      	ldr	r3, [pc, #16]	(6350 <RTC_WaitForLastTask+0x18>)
    633e:	889b      	ldrh	r3, [r3, #4]
    6340:	b29b      	uxth	r3, r3
    6342:	f003 0320 	and.w	r3, r3, #32	; 0x20
    6346:	2b00      	cmp	r3, #0
    6348:	d0f8      	beq.n	633c <RTC_WaitForLastTask+0x4>
  {
  }
}
    634a:	46bd      	mov	sp, r7
    634c:	bc80      	pop	{r7}
    634e:	4770      	bx	lr
    6350:	40002800 	.word	0x40002800

00006354 <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
    6354:	b480      	push	{r7}
    6356:	b081      	sub	sp, #4
    6358:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    635a:	4a0d      	ldr	r2, [pc, #52]	(6390 <RTC_WaitForSynchro+0x3c>)
    635c:	4b0c      	ldr	r3, [pc, #48]	(6390 <RTC_WaitForSynchro+0x3c>)
    635e:	889b      	ldrh	r3, [r3, #4]
    6360:	b29b      	uxth	r3, r3
    6362:	603b      	str	r3, [r7, #0]
    6364:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    6368:	6839      	ldr	r1, [r7, #0]
    636a:	ea01 0303 	and.w	r3, r1, r3
    636e:	603b      	str	r3, [r7, #0]
    6370:	6839      	ldr	r1, [r7, #0]
    6372:	460b      	mov	r3, r1
    6374:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    6376:	4b06      	ldr	r3, [pc, #24]	(6390 <RTC_WaitForSynchro+0x3c>)
    6378:	889b      	ldrh	r3, [r3, #4]
    637a:	b29b      	uxth	r3, r3
    637c:	f003 0308 	and.w	r3, r3, #8	; 0x8
    6380:	2b00      	cmp	r3, #0
    6382:	d0f8      	beq.n	6376 <RTC_WaitForSynchro+0x22>
  {
  }
}
    6384:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6388:	46bd      	mov	sp, r7
    638a:	bc80      	pop	{r7}
    638c:	4770      	bx	lr
    638e:	46c0      	nop			(mov r8, r8)
    6390:	40002800 	.word	0x40002800

00006394 <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
    6394:	b480      	push	{r7}
    6396:	b082      	sub	sp, #8
    6398:	af00      	add	r7, sp, #0
    639a:	4603      	mov	r3, r0
    639c:	803b      	strh	r3, [r7, #0]
  FlagStatus bitstatus = RESET;
    639e:	f04f 0300 	mov.w	r3, #0	; 0x0
    63a2:	607b      	str	r3, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    63a4:	4b0b      	ldr	r3, [pc, #44]	(63d4 <RTC_GetFlagStatus+0x40>)
    63a6:	889b      	ldrh	r3, [r3, #4]
    63a8:	b29a      	uxth	r2, r3
    63aa:	883b      	ldrh	r3, [r7, #0]
    63ac:	ea02 0303 	and.w	r3, r2, r3
    63b0:	b29b      	uxth	r3, r3
    63b2:	2b00      	cmp	r3, #0
    63b4:	d003      	beq.n	63be <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    63b6:	f04f 0301 	mov.w	r3, #1	; 0x1
    63ba:	607b      	str	r3, [r7, #4]
    63bc:	e002      	b.n	63c4 <RTC_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    63be:	f04f 0300 	mov.w	r3, #0	; 0x0
    63c2:	607b      	str	r3, [r7, #4]
  }
  return bitstatus;
    63c4:	687b      	ldr	r3, [r7, #4]
}
    63c6:	4618      	mov	r0, r3
    63c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    63cc:	46bd      	mov	sp, r7
    63ce:	bc80      	pop	{r7}
    63d0:	4770      	bx	lr
    63d2:	46c0      	nop			(mov r8, r8)
    63d4:	40002800 	.word	0x40002800

000063d8 <RTC_ClearFlag>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval None
  */
void RTC_ClearFlag(uint16_t RTC_FLAG)
{
    63d8:	b480      	push	{r7}
    63da:	b081      	sub	sp, #4
    63dc:	af00      	add	r7, sp, #0
    63de:	4603      	mov	r3, r0
    63e0:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    
  /* Clear the coressponding RTC flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG;
    63e2:	4908      	ldr	r1, [pc, #32]	(6404 <RTC_ClearFlag+0x2c>)
    63e4:	4b07      	ldr	r3, [pc, #28]	(6404 <RTC_ClearFlag+0x2c>)
    63e6:	889b      	ldrh	r3, [r3, #4]
    63e8:	b29a      	uxth	r2, r3
    63ea:	883b      	ldrh	r3, [r7, #0]
    63ec:	ea6f 0303 	mvn.w	r3, r3
    63f0:	b29b      	uxth	r3, r3
    63f2:	ea02 0303 	and.w	r3, r2, r3
    63f6:	b29b      	uxth	r3, r3
    63f8:	808b      	strh	r3, [r1, #4]
}
    63fa:	f107 0704 	add.w	r7, r7, #4	; 0x4
    63fe:	46bd      	mov	sp, r7
    6400:	bc80      	pop	{r7}
    6402:	4770      	bx	lr
    6404:	40002800 	.word	0x40002800

00006408 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
    6408:	b480      	push	{r7}
    640a:	b082      	sub	sp, #8
    640c:	af00      	add	r7, sp, #0
    640e:	4603      	mov	r3, r0
    6410:	803b      	strh	r3, [r7, #0]
  ITStatus bitstatus = RESET;
    6412:	f04f 0300 	mov.w	r3, #0	; 0x0
    6416:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    6418:	4b10      	ldr	r3, [pc, #64]	(645c <RTC_GetITStatus+0x54>)
    641a:	889b      	ldrh	r3, [r3, #4]
    641c:	b29a      	uxth	r2, r3
    641e:	883b      	ldrh	r3, [r7, #0]
    6420:	ea02 0303 	and.w	r3, r2, r3
    6424:	b29b      	uxth	r3, r3
    6426:	607b      	str	r3, [r7, #4]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    6428:	4b0c      	ldr	r3, [pc, #48]	(645c <RTC_GetITStatus+0x54>)
    642a:	881b      	ldrh	r3, [r3, #0]
    642c:	b29a      	uxth	r2, r3
    642e:	883b      	ldrh	r3, [r7, #0]
    6430:	ea02 0303 	and.w	r3, r2, r3
    6434:	b29b      	uxth	r3, r3
    6436:	2b00      	cmp	r3, #0
    6438:	d006      	beq.n	6448 <RTC_GetITStatus+0x40>
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	2b00      	cmp	r3, #0
    643e:	d003      	beq.n	6448 <RTC_GetITStatus+0x40>
  {
    bitstatus = SET;
    6440:	f04f 0301 	mov.w	r3, #1	; 0x1
    6444:	607b      	str	r3, [r7, #4]
    6446:	e002      	b.n	644e <RTC_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
    6448:	f04f 0300 	mov.w	r3, #0	; 0x0
    644c:	607b      	str	r3, [r7, #4]
  }
  return bitstatus;
    644e:	687b      	ldr	r3, [r7, #4]
}
    6450:	4618      	mov	r0, r3
    6452:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6456:	46bd      	mov	sp, r7
    6458:	bc80      	pop	{r7}
    645a:	4770      	bx	lr
    645c:	40002800 	.word	0x40002800

00006460 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
    6460:	b480      	push	{r7}
    6462:	b081      	sub	sp, #4
    6464:	af00      	add	r7, sp, #0
    6466:	4603      	mov	r3, r0
    6468:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the coressponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
    646a:	4908      	ldr	r1, [pc, #32]	(648c <RTC_ClearITPendingBit+0x2c>)
    646c:	4b07      	ldr	r3, [pc, #28]	(648c <RTC_ClearITPendingBit+0x2c>)
    646e:	889b      	ldrh	r3, [r3, #4]
    6470:	b29a      	uxth	r2, r3
    6472:	883b      	ldrh	r3, [r7, #0]
    6474:	ea6f 0303 	mvn.w	r3, r3
    6478:	b29b      	uxth	r3, r3
    647a:	ea02 0303 	and.w	r3, r2, r3
    647e:	b29b      	uxth	r3, r3
    6480:	808b      	strh	r3, [r1, #4]
}
    6482:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6486:	46bd      	mov	sp, r7
    6488:	bc80      	pop	{r7}
    648a:	4770      	bx	lr
    648c:	40002800 	.word	0x40002800

00006490 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
    6490:	b580      	push	{r7, lr}
    6492:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
    6494:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    6498:	f04f 0101 	mov.w	r1, #1	; 0x1
    649c:	f7fd ff16 	bl	42cc <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
    64a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    64a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    64a8:	f7fd ff10 	bl	42cc <RCC_APB1PeriphResetCmd>
}
    64ac:	46bd      	mov	sp, r7
    64ae:	bd80      	pop	{r7, pc}

000064b0 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
    64b0:	b480      	push	{r7}
    64b2:	b081      	sub	sp, #4
    64b4:	af00      	add	r7, sp, #0
    64b6:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
    64b8:	4a03      	ldr	r2, [pc, #12]	(64c8 <PWR_BackupAccessCmd+0x18>)
    64ba:	683b      	ldr	r3, [r7, #0]
    64bc:	6013      	str	r3, [r2, #0]
}
    64be:	f107 0704 	add.w	r7, r7, #4	; 0x4
    64c2:	46bd      	mov	sp, r7
    64c4:	bc80      	pop	{r7}
    64c6:	4770      	bx	lr
    64c8:	420e0020 	.word	0x420e0020

000064cc <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
    64cc:	b480      	push	{r7}
    64ce:	b081      	sub	sp, #4
    64d0:	af00      	add	r7, sp, #0
    64d2:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
    64d4:	4a03      	ldr	r2, [pc, #12]	(64e4 <PWR_PVDCmd+0x18>)
    64d6:	683b      	ldr	r3, [r7, #0]
    64d8:	6013      	str	r3, [r2, #0]
}
    64da:	f107 0704 	add.w	r7, r7, #4	; 0x4
    64de:	46bd      	mov	sp, r7
    64e0:	bc80      	pop	{r7}
    64e2:	4770      	bx	lr
    64e4:	420e0010 	.word	0x420e0010

000064e8 <PWR_PVDLevelConfig>:
  *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
  *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
    64e8:	b480      	push	{r7}
    64ea:	b082      	sub	sp, #8
    64ec:	af00      	add	r7, sp, #0
    64ee:	6038      	str	r0, [r7, #0]
  uint32_t tmpreg = 0;
    64f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    64f4:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  tmpreg = PWR->CR;
    64f6:	4b0a      	ldr	r3, [pc, #40]	(6520 <PWR_PVDLevelConfig+0x38>)
    64f8:	681b      	ldr	r3, [r3, #0]
    64fa:	607b      	str	r3, [r7, #4]
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    6502:	607b      	str	r3, [r7, #4]
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
    6504:	687a      	ldr	r2, [r7, #4]
    6506:	683b      	ldr	r3, [r7, #0]
    6508:	ea42 0303 	orr.w	r3, r2, r3
    650c:	607b      	str	r3, [r7, #4]
  /* Store the new value */
  PWR->CR = tmpreg;
    650e:	4a04      	ldr	r2, [pc, #16]	(6520 <PWR_PVDLevelConfig+0x38>)
    6510:	687b      	ldr	r3, [r7, #4]
    6512:	6013      	str	r3, [r2, #0]
}
    6514:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6518:	46bd      	mov	sp, r7
    651a:	bc80      	pop	{r7}
    651c:	4770      	bx	lr
    651e:	46c0      	nop			(mov r8, r8)
    6520:	40007000 	.word	0x40007000

00006524 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
    6524:	b480      	push	{r7}
    6526:	b081      	sub	sp, #4
    6528:	af00      	add	r7, sp, #0
    652a:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
    652c:	4a03      	ldr	r2, [pc, #12]	(653c <PWR_WakeUpPinCmd+0x18>)
    652e:	683b      	ldr	r3, [r7, #0]
    6530:	6013      	str	r3, [r2, #0]
}
    6532:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6536:	46bd      	mov	sp, r7
    6538:	bc80      	pop	{r7}
    653a:	4770      	bx	lr
    653c:	420e00a0 	.word	0x420e00a0

00006540 <PWR_EnterSTOPMode>:
  *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
    6540:	b580      	push	{r7, lr}
    6542:	b083      	sub	sp, #12
    6544:	af00      	add	r7, sp, #0
    6546:	6078      	str	r0, [r7, #4]
    6548:	460b      	mov	r3, r1
    654a:	703b      	strb	r3, [r7, #0]
  uint32_t tmpreg = 0;
    654c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6550:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
    6552:	4b10      	ldr	r3, [pc, #64]	(6594 <PWR_EnterSTOPMode+0x54>)
    6554:	681b      	ldr	r3, [r3, #0]
    6556:	60bb      	str	r3, [r7, #8]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
    6558:	68bb      	ldr	r3, [r7, #8]
    655a:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    655e:	60bb      	str	r3, [r7, #8]
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
    6560:	68ba      	ldr	r2, [r7, #8]
    6562:	687b      	ldr	r3, [r7, #4]
    6564:	ea42 0303 	orr.w	r3, r2, r3
    6568:	60bb      	str	r3, [r7, #8]
  /* Store the new value */
  PWR->CR = tmpreg;
    656a:	4a0a      	ldr	r2, [pc, #40]	(6594 <PWR_EnterSTOPMode+0x54>)
    656c:	68bb      	ldr	r3, [r7, #8]
    656e:	6013      	str	r3, [r2, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
    6570:	4a09      	ldr	r2, [pc, #36]	(6598 <PWR_EnterSTOPMode+0x58>)
    6572:	4b09      	ldr	r3, [pc, #36]	(6598 <PWR_EnterSTOPMode+0x58>)
    6574:	681b      	ldr	r3, [r3, #0]
    6576:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    657a:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
    657c:	783b      	ldrb	r3, [r7, #0]
    657e:	2b01      	cmp	r3, #1
    6580:	d102      	bne.n	6588 <PWR_EnterSTOPMode+0x48>
  {   
    /* Request Wait For Interrupt */
    __WFI();
    6582:	f000 f80b 	bl	659c <__WFI>
    6586:	e001      	b.n	658c <PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
    6588:	f000 f80e 	bl	65a8 <__WFE>
  }
}
    658c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    6590:	46bd      	mov	sp, r7
    6592:	bd80      	pop	{r7, pc}
    6594:	40007000 	.word	0x40007000
    6598:	e000ed10 	.word	0xe000ed10

0000659c <__WFI>:

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
    659c:	b480      	push	{r7}
    659e:	af00      	add	r7, sp, #0
    65a0:	bf30      	wfi
    65a2:	46bd      	mov	sp, r7
    65a4:	bc80      	pop	{r7}
    65a6:	4770      	bx	lr

000065a8 <__WFE>:
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
    65a8:	b480      	push	{r7}
    65aa:	af00      	add	r7, sp, #0
    65ac:	bf20      	wfe
    65ae:	46bd      	mov	sp, r7
    65b0:	bc80      	pop	{r7}
    65b2:	4770      	bx	lr

000065b4 <PWR_EnterSTANDBYMode>:
  * @brief  Enters STANDBY mode.
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
    65b4:	b580      	push	{r7, lr}
    65b6:	af00      	add	r7, sp, #0
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
    65b8:	4a0a      	ldr	r2, [pc, #40]	(65e4 <PWR_EnterSTANDBYMode+0x30>)
    65ba:	4b0a      	ldr	r3, [pc, #40]	(65e4 <PWR_EnterSTANDBYMode+0x30>)
    65bc:	681b      	ldr	r3, [r3, #0]
    65be:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    65c2:	6013      	str	r3, [r2, #0]
  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
    65c4:	4a07      	ldr	r2, [pc, #28]	(65e4 <PWR_EnterSTANDBYMode+0x30>)
    65c6:	4b07      	ldr	r3, [pc, #28]	(65e4 <PWR_EnterSTANDBYMode+0x30>)
    65c8:	681b      	ldr	r3, [r3, #0]
    65ca:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    65ce:	6013      	str	r3, [r2, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
    65d0:	4a05      	ldr	r2, [pc, #20]	(65e8 <PWR_EnterSTANDBYMode+0x34>)
    65d2:	4b05      	ldr	r3, [pc, #20]	(65e8 <PWR_EnterSTANDBYMode+0x34>)
    65d4:	681b      	ldr	r3, [r3, #0]
    65d6:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    65da:	6013      	str	r3, [r2, #0]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
    65dc:	f7ff ffde 	bl	659c <__WFI>
}
    65e0:	46bd      	mov	sp, r7
    65e2:	bd80      	pop	{r7, pc}
    65e4:	40007000 	.word	0x40007000
    65e8:	e000ed10 	.word	0xe000ed10

000065ec <PWR_GetFlagStatus>:
  *     @arg PWR_FLAG_SB: StandBy flag
  *     @arg PWR_FLAG_PVDO: PVD Output
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
    65ec:	b480      	push	{r7}
    65ee:	b082      	sub	sp, #8
    65f0:	af00      	add	r7, sp, #0
    65f2:	6038      	str	r0, [r7, #0]
  FlagStatus bitstatus = RESET;
    65f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    65f8:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
    65fa:	4b0a      	ldr	r3, [pc, #40]	(6624 <PWR_GetFlagStatus+0x38>)
    65fc:	685a      	ldr	r2, [r3, #4]
    65fe:	683b      	ldr	r3, [r7, #0]
    6600:	ea02 0303 	and.w	r3, r2, r3
    6604:	2b00      	cmp	r3, #0
    6606:	d003      	beq.n	6610 <PWR_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    6608:	f04f 0301 	mov.w	r3, #1	; 0x1
    660c:	607b      	str	r3, [r7, #4]
    660e:	e002      	b.n	6616 <PWR_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    6610:	f04f 0300 	mov.w	r3, #0	; 0x0
    6614:	607b      	str	r3, [r7, #4]
  }
  /* Return the flag status */
  return bitstatus;
    6616:	687b      	ldr	r3, [r7, #4]
}
    6618:	4618      	mov	r0, r3
    661a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    661e:	46bd      	mov	sp, r7
    6620:	bc80      	pop	{r7}
    6622:	4770      	bx	lr
    6624:	40007000 	.word	0x40007000

00006628 <PWR_ClearFlag>:
  *     @arg PWR_FLAG_WU: Wake Up flag
  *     @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
    6628:	b480      	push	{r7}
    662a:	b081      	sub	sp, #4
    662c:	af00      	add	r7, sp, #0
    662e:	6038      	str	r0, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
    6630:	4906      	ldr	r1, [pc, #24]	(664c <PWR_ClearFlag+0x24>)
    6632:	4b06      	ldr	r3, [pc, #24]	(664c <PWR_ClearFlag+0x24>)
    6634:	681a      	ldr	r2, [r3, #0]
    6636:	683b      	ldr	r3, [r7, #0]
    6638:	ea4f 0383 	mov.w	r3, r3, lsl #2
    663c:	ea42 0303 	orr.w	r3, r2, r3
    6640:	600b      	str	r3, [r1, #0]
}
    6642:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6646:	46bd      	mov	sp, r7
    6648:	bc80      	pop	{r7}
    664a:	4770      	bx	lr
    664c:	40007000 	.word	0x40007000

00006650 <printchar>:
 define. If the function should be called something else,
 replace outbyte(c) by your own function call.
 */
#define putchar(c) outbyte(c)

static void printchar(char **str, int c) {
    6650:	b480      	push	{r7}
    6652:	b082      	sub	sp, #8
    6654:	af00      	add	r7, sp, #0
    6656:	6078      	str	r0, [r7, #4]
    6658:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);
	if (str) {
    665a:	687b      	ldr	r3, [r7, #4]
    665c:	2b00      	cmp	r3, #0
    665e:	d00a      	beq.n	6676 <printchar+0x26>
		**str = c;
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	681a      	ldr	r2, [r3, #0]
    6664:	683b      	ldr	r3, [r7, #0]
    6666:	b2db      	uxtb	r3, r3
    6668:	7013      	strb	r3, [r2, #0]
		++(*str);
    666a:	687b      	ldr	r3, [r7, #4]
    666c:	681b      	ldr	r3, [r3, #0]
    666e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	601a      	str	r2, [r3, #0]
	} else {
		// (void) putchar(c);
	}
}
    6676:	f107 0708 	add.w	r7, r7, #8	; 0x8
    667a:	46bd      	mov	sp, r7
    667c:	bc80      	pop	{r7}
    667e:	4770      	bx	lr

00006680 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad) {
    6680:	b580      	push	{r7, lr}
    6682:	b088      	sub	sp, #32
    6684:	af00      	add	r7, sp, #0
    6686:	61f8      	str	r0, [r7, #28]
    6688:	61b9      	str	r1, [r7, #24]
    668a:	617a      	str	r2, [r7, #20]
    668c:	613b      	str	r3, [r7, #16]
	register int pc = 0, padchar = ' ';
    668e:	f04f 0200 	mov.w	r2, #0	; 0x0
    6692:	603a      	str	r2, [r7, #0]
    6694:	f04f 0320 	mov.w	r3, #32	; 0x20
    6698:	607b      	str	r3, [r7, #4]

	if (width > 0) {
    669a:	697b      	ldr	r3, [r7, #20]
    669c:	2b00      	cmp	r3, #0
    669e:	dd26      	ble.n	66ee <prints+0x6e>
		register int len = 0;
    66a0:	f04f 0200 	mov.w	r2, #0	; 0x0
    66a4:	60ba      	str	r2, [r7, #8]
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr)
    66a6:	69bb      	ldr	r3, [r7, #24]
    66a8:	60fb      	str	r3, [r7, #12]
    66aa:	e007      	b.n	66bc <prints+0x3c>
			++len;
    66ac:	68ba      	ldr	r2, [r7, #8]
    66ae:	f102 0201 	add.w	r2, r2, #1	; 0x1
    66b2:	60ba      	str	r2, [r7, #8]
	register int pc = 0, padchar = ' ';

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr)
    66b4:	68fb      	ldr	r3, [r7, #12]
    66b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    66ba:	60fb      	str	r3, [r7, #12]
    66bc:	68fa      	ldr	r2, [r7, #12]
    66be:	7813      	ldrb	r3, [r2, #0]
    66c0:	2b00      	cmp	r3, #0
    66c2:	d1f3      	bne.n	66ac <prints+0x2c>
			++len;
		if (len >= width)
    66c4:	697b      	ldr	r3, [r7, #20]
    66c6:	68ba      	ldr	r2, [r7, #8]
    66c8:	429a      	cmp	r2, r3
    66ca:	db03      	blt.n	66d4 <prints+0x54>
			width = 0;
    66cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    66d0:	617b      	str	r3, [r7, #20]
    66d2:	e004      	b.n	66de <prints+0x5e>
		else
			width -= len;
    66d4:	697b      	ldr	r3, [r7, #20]
    66d6:	68ba      	ldr	r2, [r7, #8]
    66d8:	ebc2 0303 	rsb	r3, r2, r3
    66dc:	617b      	str	r3, [r7, #20]
		if (pad & PAD_ZERO)
    66de:	693b      	ldr	r3, [r7, #16]
    66e0:	f003 0302 	and.w	r3, r3, #2	; 0x2
    66e4:	2b00      	cmp	r3, #0
    66e6:	d002      	beq.n	66ee <prints+0x6e>
			padchar = '0';
    66e8:	f04f 0330 	mov.w	r3, #48	; 0x30
    66ec:	607b      	str	r3, [r7, #4]
	}
	if (!(pad & PAD_RIGHT)) {
    66ee:	693b      	ldr	r3, [r7, #16]
    66f0:	f003 0301 	and.w	r3, r3, #1	; 0x1
    66f4:	2b00      	cmp	r3, #0
    66f6:	d11e      	bne.n	6736 <prints+0xb6>
    66f8:	e00b      	b.n	6712 <prints+0x92>
		for (; width > 0; --width) {
			printchar(out, padchar);
    66fa:	69f8      	ldr	r0, [r7, #28]
    66fc:	6879      	ldr	r1, [r7, #4]
    66fe:	f7ff ffa7 	bl	6650 <printchar>
			++pc;
    6702:	683a      	ldr	r2, [r7, #0]
    6704:	f102 0201 	add.w	r2, r2, #1	; 0x1
    6708:	603a      	str	r2, [r7, #0]
			width -= len;
		if (pad & PAD_ZERO)
			padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for (; width > 0; --width) {
    670a:	697b      	ldr	r3, [r7, #20]
    670c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    6710:	617b      	str	r3, [r7, #20]
    6712:	697b      	ldr	r3, [r7, #20]
    6714:	2b00      	cmp	r3, #0
    6716:	dcf0      	bgt.n	66fa <prints+0x7a>
    6718:	e00d      	b.n	6736 <prints+0xb6>
			printchar(out, padchar);
			++pc;
		}
	}
	for (; *string; ++string) {
		printchar(out, *string);
    671a:	69bb      	ldr	r3, [r7, #24]
    671c:	781b      	ldrb	r3, [r3, #0]
    671e:	69f8      	ldr	r0, [r7, #28]
    6720:	4619      	mov	r1, r3
    6722:	f7ff ff95 	bl	6650 <printchar>
		++pc;
    6726:	683b      	ldr	r3, [r7, #0]
    6728:	f103 0301 	add.w	r3, r3, #1	; 0x1
    672c:	603b      	str	r3, [r7, #0]
		for (; width > 0; --width) {
			printchar(out, padchar);
			++pc;
		}
	}
	for (; *string; ++string) {
    672e:	69bb      	ldr	r3, [r7, #24]
    6730:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6734:	61bb      	str	r3, [r7, #24]
    6736:	69bb      	ldr	r3, [r7, #24]
    6738:	781b      	ldrb	r3, [r3, #0]
    673a:	2b00      	cmp	r3, #0
    673c:	d1ed      	bne.n	671a <prints+0x9a>
    673e:	e00b      	b.n	6758 <prints+0xd8>
		printchar(out, *string);
		++pc;
	}
	for (; width > 0; --width) {
		printchar(out, padchar);
    6740:	69f8      	ldr	r0, [r7, #28]
    6742:	6879      	ldr	r1, [r7, #4]
    6744:	f7ff ff84 	bl	6650 <printchar>
		++pc;
    6748:	683a      	ldr	r2, [r7, #0]
    674a:	f102 0201 	add.w	r2, r2, #1	; 0x1
    674e:	603a      	str	r2, [r7, #0]
	}
	for (; *string; ++string) {
		printchar(out, *string);
		++pc;
	}
	for (; width > 0; --width) {
    6750:	697b      	ldr	r3, [r7, #20]
    6752:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    6756:	617b      	str	r3, [r7, #20]
    6758:	697b      	ldr	r3, [r7, #20]
    675a:	2b00      	cmp	r3, #0
    675c:	dcf0      	bgt.n	6740 <prints+0xc0>
		printchar(out, padchar);
		++pc;
	}

	return pc;
    675e:	683b      	ldr	r3, [r7, #0]
}
    6760:	4618      	mov	r0, r3
    6762:	f107 0720 	add.w	r7, r7, #32	; 0x20
    6766:	46bd      	mov	sp, r7
    6768:	bd80      	pop	{r7, pc}
    676a:	46c0      	nop			(mov r8, r8)

0000676c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad,
		int letbase) {
    676c:	b580      	push	{r7, lr}
    676e:	b08d      	sub	sp, #52
    6770:	af00      	add	r7, sp, #0
    6772:	6278      	str	r0, [r7, #36]
    6774:	6239      	str	r1, [r7, #32]
    6776:	61fa      	str	r2, [r7, #28]
    6778:	61bb      	str	r3, [r7, #24]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
    677a:	f04f 0100 	mov.w	r1, #0	; 0x0
    677e:	60f9      	str	r1, [r7, #12]
    6780:	f04f 0200 	mov.w	r2, #0	; 0x0
    6784:	613a      	str	r2, [r7, #16]
	register unsigned int u = i;
    6786:	6a3b      	ldr	r3, [r7, #32]
    6788:	617b      	str	r3, [r7, #20]

	if (i == 0) {
    678a:	6a3b      	ldr	r3, [r7, #32]
    678c:	2b00      	cmp	r3, #0
    678e:	d112      	bne.n	67b6 <printi+0x4a>
		print_buf[0] = '0';
    6790:	f04f 0330 	mov.w	r3, #48	; 0x30
    6794:	f887 3028 	strb.w	r3, [r7, #40]
		print_buf[1] = '\0';
    6798:	f04f 0300 	mov.w	r3, #0	; 0x0
    679c:	f887 3029 	strb.w	r3, [r7, #41]
		return prints(out, print_buf, width, pad);
    67a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
    67a4:	6a78      	ldr	r0, [r7, #36]
    67a6:	4619      	mov	r1, r3
    67a8:	6bfa      	ldr	r2, [r7, #60]
    67aa:	6c3b      	ldr	r3, [r7, #64]
    67ac:	f7ff ff68 	bl	6680 <prints>
    67b0:	4603      	mov	r3, r0
    67b2:	603b      	str	r3, [r7, #0]
    67b4:	e06a      	b.n	688c <printi+0x120>
	}

	if (sg && b == 10 && i < 0) {
    67b6:	69bb      	ldr	r3, [r7, #24]
    67b8:	2b00      	cmp	r3, #0
    67ba:	d00c      	beq.n	67d6 <printi+0x6a>
    67bc:	69fb      	ldr	r3, [r7, #28]
    67be:	2b0a      	cmp	r3, #10
    67c0:	d109      	bne.n	67d6 <printi+0x6a>
    67c2:	6a3b      	ldr	r3, [r7, #32]
    67c4:	2b00      	cmp	r3, #0
    67c6:	da06      	bge.n	67d6 <printi+0x6a>
		neg = 1;
    67c8:	f04f 0101 	mov.w	r1, #1	; 0x1
    67cc:	60f9      	str	r1, [r7, #12]
		u = -i;
    67ce:	6a3b      	ldr	r3, [r7, #32]
    67d0:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
    67d4:	617b      	str	r3, [r7, #20]
	}

	s = print_buf + PRINT_BUF_LEN - 1;
    67d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
    67da:	f103 030b 	add.w	r3, r3, #11	; 0xb
    67de:	607b      	str	r3, [r7, #4]
	*s = '\0';
    67e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    67e4:	687a      	ldr	r2, [r7, #4]
    67e6:	7013      	strb	r3, [r2, #0]
    67e8:	e022      	b.n	6830 <printi+0xc4>

	while (u) {
		t = u % b;
    67ea:	69fa      	ldr	r2, [r7, #28]
    67ec:	6979      	ldr	r1, [r7, #20]
    67ee:	fbb1 f3f2 	udiv	r3, r1, r2
    67f2:	fb02 f303 	mul.w	r3, r2, r3
    67f6:	697a      	ldr	r2, [r7, #20]
    67f8:	ebc3 0302 	rsb	r3, r3, r2
    67fc:	60bb      	str	r3, [r7, #8]
		if (t >= 10)
    67fe:	68bb      	ldr	r3, [r7, #8]
    6800:	2b09      	cmp	r3, #9
    6802:	dd05      	ble.n	6810 <printi+0xa4>
			t += letbase - '0' - 10;
    6804:	6c7b      	ldr	r3, [r7, #68]
    6806:	f1a3 033a 	sub.w	r3, r3, #58	; 0x3a
    680a:	68b9      	ldr	r1, [r7, #8]
    680c:	4419      	add	r1, r3
    680e:	60b9      	str	r1, [r7, #8]
		*--s = t + '0';
    6810:	687a      	ldr	r2, [r7, #4]
    6812:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    6816:	607a      	str	r2, [r7, #4]
    6818:	68b9      	ldr	r1, [r7, #8]
    681a:	b2cb      	uxtb	r3, r1
    681c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    6820:	b2db      	uxtb	r3, r3
    6822:	687a      	ldr	r2, [r7, #4]
    6824:	7013      	strb	r3, [r2, #0]
		u /= b;
    6826:	69fb      	ldr	r3, [r7, #28]
    6828:	6979      	ldr	r1, [r7, #20]
    682a:	fbb1 f1f3 	udiv	r1, r1, r3
    682e:	6179      	str	r1, [r7, #20]
	}

	s = print_buf + PRINT_BUF_LEN - 1;
	*s = '\0';

	while (u) {
    6830:	697a      	ldr	r2, [r7, #20]
    6832:	2a00      	cmp	r2, #0
    6834:	d1d9      	bne.n	67ea <printi+0x7e>
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
    6836:	68fb      	ldr	r3, [r7, #12]
    6838:	2b00      	cmp	r3, #0
    683a:	d01d      	beq.n	6878 <printi+0x10c>
		if (width && (pad & PAD_ZERO)) {
    683c:	6bfb      	ldr	r3, [r7, #60]
    683e:	2b00      	cmp	r3, #0
    6840:	d012      	beq.n	6868 <printi+0xfc>
    6842:	6c3b      	ldr	r3, [r7, #64]
    6844:	f003 0302 	and.w	r3, r3, #2	; 0x2
    6848:	2b00      	cmp	r3, #0
    684a:	d00d      	beq.n	6868 <printi+0xfc>
			printchar(out, '-');
    684c:	6a78      	ldr	r0, [r7, #36]
    684e:	f04f 012d 	mov.w	r1, #45	; 0x2d
    6852:	f7ff fefd 	bl	6650 <printchar>
			++pc;
    6856:	6939      	ldr	r1, [r7, #16]
    6858:	f101 0101 	add.w	r1, r1, #1	; 0x1
    685c:	6139      	str	r1, [r7, #16]
			--width;
    685e:	6bfb      	ldr	r3, [r7, #60]
    6860:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    6864:	63fb      	str	r3, [r7, #60]
    6866:	e007      	b.n	6878 <printi+0x10c>
		} else {
			*--s = '-';
    6868:	687a      	ldr	r2, [r7, #4]
    686a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    686e:	607a      	str	r2, [r7, #4]
    6870:	f04f 032d 	mov.w	r3, #45	; 0x2d
    6874:	6879      	ldr	r1, [r7, #4]
    6876:	700b      	strb	r3, [r1, #0]
		}
	}

	return pc + prints(out, s, width, pad);
    6878:	6a78      	ldr	r0, [r7, #36]
    687a:	6879      	ldr	r1, [r7, #4]
    687c:	6bfa      	ldr	r2, [r7, #60]
    687e:	6c3b      	ldr	r3, [r7, #64]
    6880:	f7ff fefe 	bl	6680 <prints>
    6884:	4603      	mov	r3, r0
    6886:	693a      	ldr	r2, [r7, #16]
    6888:	4413      	add	r3, r2
    688a:	603b      	str	r3, [r7, #0]
    688c:	683b      	ldr	r3, [r7, #0]
}
    688e:	4618      	mov	r0, r3
    6890:	f107 0734 	add.w	r7, r7, #52	; 0x34
    6894:	46bd      	mov	sp, r7
    6896:	bd80      	pop	{r7, pc}

00006898 <print>:

static int print(char **out, int *varg) {
    6898:	b580      	push	{r7, lr}
    689a:	b08c      	sub	sp, #48
    689c:	af03      	add	r7, sp, #12
    689e:	61f8      	str	r0, [r7, #28]
    68a0:	61b9      	str	r1, [r7, #24]
	register int width, pad;
	register int pc = 0;
    68a2:	f04f 0200 	mov.w	r2, #0	; 0x0
    68a6:	60fa      	str	r2, [r7, #12]
	register char *format = (char *) (*varg++);
    68a8:	69bb      	ldr	r3, [r7, #24]
    68aa:	681b      	ldr	r3, [r3, #0]
    68ac:	613b      	str	r3, [r7, #16]
    68ae:	69bb      	ldr	r3, [r7, #24]
    68b0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    68b4:	61bb      	str	r3, [r7, #24]
    68b6:	e10c      	b.n	6ad2 <print+0x23a>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
    68b8:	693a      	ldr	r2, [r7, #16]
    68ba:	7813      	ldrb	r3, [r2, #0]
    68bc:	2b25      	cmp	r3, #37
    68be:	f040 80fa 	bne.w	6ab6 <print+0x21e>
			++format;
    68c2:	693b      	ldr	r3, [r7, #16]
    68c4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    68c8:	613b      	str	r3, [r7, #16]
			width = pad = 0;
    68ca:	f04f 0200 	mov.w	r2, #0	; 0x0
    68ce:	60ba      	str	r2, [r7, #8]
    68d0:	68bb      	ldr	r3, [r7, #8]
    68d2:	607b      	str	r3, [r7, #4]
			if (*format == '\0')
    68d4:	693a      	ldr	r2, [r7, #16]
    68d6:	7813      	ldrb	r3, [r2, #0]
    68d8:	2b00      	cmp	r3, #0
    68da:	f000 80ff 	beq.w	6adc <print+0x244>
				break;
			if (*format == '%')
    68de:	693a      	ldr	r2, [r7, #16]
    68e0:	7813      	ldrb	r3, [r2, #0]
    68e2:	2b25      	cmp	r3, #37
    68e4:	f000 80e7 	beq.w	6ab6 <print+0x21e>
				goto out;
			if (*format == '-') {
    68e8:	693a      	ldr	r2, [r7, #16]
    68ea:	7813      	ldrb	r3, [r2, #0]
    68ec:	2b2d      	cmp	r3, #45
    68ee:	d10f      	bne.n	6910 <print+0x78>
				++format;
    68f0:	693b      	ldr	r3, [r7, #16]
    68f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    68f6:	613b      	str	r3, [r7, #16]
				pad = PAD_RIGHT;
    68f8:	f04f 0201 	mov.w	r2, #1	; 0x1
    68fc:	60ba      	str	r2, [r7, #8]
    68fe:	e007      	b.n	6910 <print+0x78>
			}
			while (*format == '0') {
				++format;
    6900:	693b      	ldr	r3, [r7, #16]
    6902:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6906:	613b      	str	r3, [r7, #16]
				pad |= PAD_ZERO;
    6908:	68ba      	ldr	r2, [r7, #8]
    690a:	f042 0202 	orr.w	r2, r2, #2	; 0x2
    690e:	60ba      	str	r2, [r7, #8]
				goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
    6910:	693a      	ldr	r2, [r7, #16]
    6912:	7813      	ldrb	r3, [r2, #0]
    6914:	2b30      	cmp	r3, #48
    6916:	d0f3      	beq.n	6900 <print+0x68>
    6918:	e011      	b.n	693e <print+0xa6>
				++format;
				pad |= PAD_ZERO;
			}
			for (; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	ea4f 0243 	mov.w	r2, r3, lsl #1
    6920:	ea4f 0382 	mov.w	r3, r2, lsl #2
    6924:	4413      	add	r3, r2
    6926:	607b      	str	r3, [r7, #4]
				width += *format - '0';
    6928:	693a      	ldr	r2, [r7, #16]
    692a:	7813      	ldrb	r3, [r2, #0]
    692c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    6930:	687a      	ldr	r2, [r7, #4]
    6932:	441a      	add	r2, r3
    6934:	607a      	str	r2, [r7, #4]
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for (; *format >= '0' && *format <= '9'; ++format) {
    6936:	693b      	ldr	r3, [r7, #16]
    6938:	f103 0301 	add.w	r3, r3, #1	; 0x1
    693c:	613b      	str	r3, [r7, #16]
    693e:	693a      	ldr	r2, [r7, #16]
    6940:	7813      	ldrb	r3, [r2, #0]
    6942:	2b2f      	cmp	r3, #47
    6944:	d903      	bls.n	694e <print+0xb6>
    6946:	693a      	ldr	r2, [r7, #16]
    6948:	7813      	ldrb	r3, [r2, #0]
    694a:	2b39      	cmp	r3, #57
    694c:	d9e5      	bls.n	691a <print+0x82>
				width *= 10;
				width += *format - '0';
			}
			if (*format == 's') {
    694e:	693a      	ldr	r2, [r7, #16]
    6950:	7813      	ldrb	r3, [r2, #0]
    6952:	2b73      	cmp	r3, #115
    6954:	d119      	bne.n	698a <print+0xf2>
				register char *s = *((char **) varg++);
    6956:	69bb      	ldr	r3, [r7, #24]
    6958:	681b      	ldr	r3, [r3, #0]
    695a:	617b      	str	r3, [r7, #20]
    695c:	69bb      	ldr	r3, [r7, #24]
    695e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6962:	61bb      	str	r3, [r7, #24]
				pc += prints(out, s ? s : "(null)", width, pad);
    6964:	697b      	ldr	r3, [r7, #20]
    6966:	2b00      	cmp	r3, #0
    6968:	d002      	beq.n	6970 <print+0xd8>
    696a:	697a      	ldr	r2, [r7, #20]
    696c:	603a      	str	r2, [r7, #0]
    696e:	e001      	b.n	6974 <print+0xdc>
    6970:	4b61      	ldr	r3, [pc, #388]	(6af8 <print+0x260>)
    6972:	603b      	str	r3, [r7, #0]
    6974:	69f8      	ldr	r0, [r7, #28]
    6976:	6839      	ldr	r1, [r7, #0]
    6978:	687a      	ldr	r2, [r7, #4]
    697a:	68bb      	ldr	r3, [r7, #8]
    697c:	f7ff fe80 	bl	6680 <prints>
    6980:	4603      	mov	r3, r0
    6982:	68fa      	ldr	r2, [r7, #12]
    6984:	441a      	add	r2, r3
    6986:	60fa      	str	r2, [r7, #12]
    6988:	e09f      	b.n	6aca <print+0x232>
				continue;
			}
			if (*format == 'd') {
    698a:	693a      	ldr	r2, [r7, #16]
    698c:	7813      	ldrb	r3, [r2, #0]
    698e:	2b64      	cmp	r3, #100
    6990:	d119      	bne.n	69c6 <print+0x12e>
				pc += printi(out, *varg++, 10, 1, width, pad, 'a');
    6992:	69bb      	ldr	r3, [r7, #24]
    6994:	681a      	ldr	r2, [r3, #0]
    6996:	69bb      	ldr	r3, [r7, #24]
    6998:	f103 0304 	add.w	r3, r3, #4	; 0x4
    699c:	61bb      	str	r3, [r7, #24]
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	9300      	str	r3, [sp, #0]
    69a2:	68bb      	ldr	r3, [r7, #8]
    69a4:	9301      	str	r3, [sp, #4]
    69a6:	f04f 0361 	mov.w	r3, #97	; 0x61
    69aa:	9302      	str	r3, [sp, #8]
    69ac:	69f8      	ldr	r0, [r7, #28]
    69ae:	4611      	mov	r1, r2
    69b0:	f04f 020a 	mov.w	r2, #10	; 0xa
    69b4:	f04f 0301 	mov.w	r3, #1	; 0x1
    69b8:	f7ff fed8 	bl	676c <printi>
    69bc:	4603      	mov	r3, r0
    69be:	68fa      	ldr	r2, [r7, #12]
    69c0:	441a      	add	r2, r3
    69c2:	60fa      	str	r2, [r7, #12]
    69c4:	e081      	b.n	6aca <print+0x232>
				continue;
			}
			if (*format == 'x') {
    69c6:	693a      	ldr	r2, [r7, #16]
    69c8:	7813      	ldrb	r3, [r2, #0]
    69ca:	2b78      	cmp	r3, #120
    69cc:	d119      	bne.n	6a02 <print+0x16a>
				pc += printi(out, *varg++, 16, 0, width, pad, 'a');
    69ce:	69bb      	ldr	r3, [r7, #24]
    69d0:	681a      	ldr	r2, [r3, #0]
    69d2:	69bb      	ldr	r3, [r7, #24]
    69d4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    69d8:	61bb      	str	r3, [r7, #24]
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	9300      	str	r3, [sp, #0]
    69de:	68bb      	ldr	r3, [r7, #8]
    69e0:	9301      	str	r3, [sp, #4]
    69e2:	f04f 0361 	mov.w	r3, #97	; 0x61
    69e6:	9302      	str	r3, [sp, #8]
    69e8:	69f8      	ldr	r0, [r7, #28]
    69ea:	4611      	mov	r1, r2
    69ec:	f04f 0210 	mov.w	r2, #16	; 0x10
    69f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    69f4:	f7ff feba 	bl	676c <printi>
    69f8:	4603      	mov	r3, r0
    69fa:	68fa      	ldr	r2, [r7, #12]
    69fc:	441a      	add	r2, r3
    69fe:	60fa      	str	r2, [r7, #12]
    6a00:	e063      	b.n	6aca <print+0x232>
				continue;
			}
			if (*format == 'X') {
    6a02:	693a      	ldr	r2, [r7, #16]
    6a04:	7813      	ldrb	r3, [r2, #0]
    6a06:	2b58      	cmp	r3, #88
    6a08:	d119      	bne.n	6a3e <print+0x1a6>
				pc += printi(out, *varg++, 16, 0, width, pad, 'A');
    6a0a:	69bb      	ldr	r3, [r7, #24]
    6a0c:	681a      	ldr	r2, [r3, #0]
    6a0e:	69bb      	ldr	r3, [r7, #24]
    6a10:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6a14:	61bb      	str	r3, [r7, #24]
    6a16:	687b      	ldr	r3, [r7, #4]
    6a18:	9300      	str	r3, [sp, #0]
    6a1a:	68bb      	ldr	r3, [r7, #8]
    6a1c:	9301      	str	r3, [sp, #4]
    6a1e:	f04f 0341 	mov.w	r3, #65	; 0x41
    6a22:	9302      	str	r3, [sp, #8]
    6a24:	69f8      	ldr	r0, [r7, #28]
    6a26:	4611      	mov	r1, r2
    6a28:	f04f 0210 	mov.w	r2, #16	; 0x10
    6a2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6a30:	f7ff fe9c 	bl	676c <printi>
    6a34:	4603      	mov	r3, r0
    6a36:	68fa      	ldr	r2, [r7, #12]
    6a38:	441a      	add	r2, r3
    6a3a:	60fa      	str	r2, [r7, #12]
    6a3c:	e045      	b.n	6aca <print+0x232>
				continue;
			}
			if (*format == 'u') {
    6a3e:	693a      	ldr	r2, [r7, #16]
    6a40:	7813      	ldrb	r3, [r2, #0]
    6a42:	2b75      	cmp	r3, #117
    6a44:	d119      	bne.n	6a7a <print+0x1e2>
				pc += printi(out, *varg++, 10, 0, width, pad, 'a');
    6a46:	69bb      	ldr	r3, [r7, #24]
    6a48:	681a      	ldr	r2, [r3, #0]
    6a4a:	69bb      	ldr	r3, [r7, #24]
    6a4c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6a50:	61bb      	str	r3, [r7, #24]
    6a52:	687b      	ldr	r3, [r7, #4]
    6a54:	9300      	str	r3, [sp, #0]
    6a56:	68bb      	ldr	r3, [r7, #8]
    6a58:	9301      	str	r3, [sp, #4]
    6a5a:	f04f 0361 	mov.w	r3, #97	; 0x61
    6a5e:	9302      	str	r3, [sp, #8]
    6a60:	69f8      	ldr	r0, [r7, #28]
    6a62:	4611      	mov	r1, r2
    6a64:	f04f 020a 	mov.w	r2, #10	; 0xa
    6a68:	f04f 0300 	mov.w	r3, #0	; 0x0
    6a6c:	f7ff fe7e 	bl	676c <printi>
    6a70:	4603      	mov	r3, r0
    6a72:	68fa      	ldr	r2, [r7, #12]
    6a74:	441a      	add	r2, r3
    6a76:	60fa      	str	r2, [r7, #12]
    6a78:	e027      	b.n	6aca <print+0x232>
				continue;
			}
			if (*format == 'c') {
    6a7a:	693a      	ldr	r2, [r7, #16]
    6a7c:	7813      	ldrb	r3, [r2, #0]
    6a7e:	2b63      	cmp	r3, #99
    6a80:	d123      	bne.n	6aca <print+0x232>
				/* char are converted to int then pushed on the stack */
				scr[0] = *varg++;
    6a82:	69bb      	ldr	r3, [r7, #24]
    6a84:	681b      	ldr	r3, [r3, #0]
    6a86:	b2db      	uxtb	r3, r3
    6a88:	f887 3022 	strb.w	r3, [r7, #34]
    6a8c:	69bb      	ldr	r3, [r7, #24]
    6a8e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6a92:	61bb      	str	r3, [r7, #24]
				scr[1] = '\0';
    6a94:	f04f 0300 	mov.w	r3, #0	; 0x0
    6a98:	f887 3023 	strb.w	r3, [r7, #35]
				pc += prints(out, scr, width, pad);
    6a9c:	f107 0322 	add.w	r3, r7, #34	; 0x22
    6aa0:	69f8      	ldr	r0, [r7, #28]
    6aa2:	4619      	mov	r1, r3
    6aa4:	687a      	ldr	r2, [r7, #4]
    6aa6:	68bb      	ldr	r3, [r7, #8]
    6aa8:	f7ff fdea 	bl	6680 <prints>
    6aac:	4603      	mov	r3, r0
    6aae:	68fa      	ldr	r2, [r7, #12]
    6ab0:	441a      	add	r2, r3
    6ab2:	60fa      	str	r2, [r7, #12]
    6ab4:	e009      	b.n	6aca <print+0x232>
				continue;
			}
		} else {
			out: printchar(out, *format);
    6ab6:	693a      	ldr	r2, [r7, #16]
    6ab8:	7813      	ldrb	r3, [r2, #0]
    6aba:	69f8      	ldr	r0, [r7, #28]
    6abc:	4619      	mov	r1, r3
    6abe:	f7ff fdc7 	bl	6650 <printchar>
			++pc;
    6ac2:	68fb      	ldr	r3, [r7, #12]
    6ac4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6ac8:	60fb      	str	r3, [r7, #12]
	register int width, pad;
	register int pc = 0;
	register char *format = (char *) (*varg++);
	char scr[2];

	for (; *format != 0; ++format) {
    6aca:	693a      	ldr	r2, [r7, #16]
    6acc:	f102 0201 	add.w	r2, r2, #1	; 0x1
    6ad0:	613a      	str	r2, [r7, #16]
    6ad2:	693a      	ldr	r2, [r7, #16]
    6ad4:	7813      	ldrb	r3, [r2, #0]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	f47f aeee 	bne.w	68b8 <print+0x20>
		} else {
			out: printchar(out, *format);
			++pc;
		}
	}
	if (out)
    6adc:	69fb      	ldr	r3, [r7, #28]
    6ade:	2b00      	cmp	r3, #0
    6ae0:	d004      	beq.n	6aec <print+0x254>
		**out = '\0';
    6ae2:	69fb      	ldr	r3, [r7, #28]
    6ae4:	681a      	ldr	r2, [r3, #0]
    6ae6:	f04f 0300 	mov.w	r3, #0	; 0x0
    6aea:	7013      	strb	r3, [r2, #0]
	return pc;
    6aec:	68fb      	ldr	r3, [r7, #12]
}
    6aee:	4618      	mov	r0, r3
    6af0:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6af4:	46bd      	mov	sp, r7
    6af6:	bd80      	pop	{r7, pc}
    6af8:	00006c70 	.word	0x00006c70

00006afc <sprintf>:
//	return print(0, varg);
//
//}

int sprintf(char *out, const char *format, ...) {
	register int *varg = (int *) (&format);
    6afc:	b40e      	push	{r1, r2, r3}
    6afe:	b580      	push	{r7, lr}
    6b00:	b081      	sub	sp, #4
    6b02:	af00      	add	r7, sp, #0
    6b04:	6038      	str	r0, [r7, #0]
    6b06:	f107 020c 	add.w	r2, r7, #12	; 0xc
	return print(&out, varg);
    6b0a:	463b      	mov	r3, r7
    6b0c:	4618      	mov	r0, r3
    6b0e:	4611      	mov	r1, r2
    6b10:	f7ff fec2 	bl	6898 <print>
    6b14:	4603      	mov	r3, r0
}
    6b16:	4618      	mov	r0, r3
    6b18:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6b1c:	46bd      	mov	sp, r7
    6b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    6b22:	b003      	add	sp, #12
    6b24:	4770      	bx	lr
    6b26:	46c0      	nop			(mov r8, r8)
    6b28:	6954      	ldr	r4, [r2, #20]
    6b2a:	656d      	str	r5, [r5, #84]
    6b2c:	203a      	movs	r0, #58
    6b2e:	3025      	adds	r0, #37
    6b30:	6432      	str	r2, [r6, #64]
    6b32:	253a      	movs	r5, #58
    6b34:	3230      	adds	r2, #48
    6b36:	3a64      	subs	r2, #100
    6b38:	3025      	adds	r0, #37
    6b3a:	6432      	str	r2, [r6, #64]
    6b3c:	000d      	lsls	r5, r1, #0
    6b3e:	0000      	lsls	r0, r0, #0
    6b40:	0a0d      	lsrs	r5, r1, #8
    6b42:	200a      	movs	r0, #10
    6b44:	6f50      	ldr	r0, [r2, #116]
    6b46:	6577      	str	r7, [r6, #84]
    6b48:	2072      	movs	r0, #114
    6b4a:	6e4f      	ldr	r7, [r1, #100]
    6b4c:	5220      	strh	r0, [r4, r0]
    6b4e:	7365      	strb	r5, [r4, #13]
    6b50:	7465      	strb	r5, [r4, #17]
    6b52:	6f20      	ldr	r0, [r4, #112]
    6b54:	6363      	str	r3, [r4, #52]
    6b56:	7275      	strb	r5, [r6, #9]
    6b58:	6572      	str	r2, [r6, #84]
    6b5a:	2e64      	cmp	r6, #100
    6b5c:	2e2e      	cmp	r6, #46
    6b5e:	002e      	lsls	r6, r5, #0
    6b60:	0a0d      	lsrs	r5, r1, #8
    6b62:	200a      	movs	r0, #10
    6b64:	7845      	ldrb	r5, [r0, #1]
    6b66:	6574      	str	r4, [r6, #84]
    6b68:	6e72      	ldr	r2, [r6, #100]
    6b6a:	6c61      	ldr	r1, [r4, #68]
    6b6c:	5220      	strh	r0, [r4, r0]
    6b6e:	7365      	strb	r5, [r4, #13]
    6b70:	7465      	strb	r5, [r4, #17]
    6b72:	6f20      	ldr	r0, [r4, #112]
    6b74:	6363      	str	r3, [r4, #52]
    6b76:	7275      	strb	r5, [r6, #9]
    6b78:	6572      	str	r2, [r6, #84]
    6b7a:	2e64      	cmp	r6, #100
    6b7c:	2e2e      	cmp	r6, #46
    6b7e:	002e      	lsls	r6, r5, #0
    6b80:	0a0d      	lsrs	r5, r1, #8
    6b82:	4e20      	ldr	r6, [pc, #128]	(6c04 <Virtual_Com_Port_StringVendor+0xb>)
    6b84:	206f      	movs	r0, #111
    6b86:	656e      	str	r6, [r5, #84]
    6b88:	6465      	str	r5, [r4, #68]
    6b8a:	7420      	strb	r0, [r4, #16]
    6b8c:	206f      	movs	r0, #111
    6b8e:	6f63      	ldr	r3, [r4, #116]
    6b90:	666e      	str	r6, [r5, #100]
    6b92:	6769      	str	r1, [r5, #116]
    6b94:	7275      	strb	r5, [r6, #9]
    6b96:	2065      	movs	r0, #101
    6b98:	5452      	strb	r2, [r2, r1]
    6b9a:	2e43      	cmp	r6, #67
    6b9c:	2e2e      	cmp	r6, #46
    6b9e:	002e      	lsls	r6, r5, #0

00006ba0 <Virtual_Com_Port_DeviceDescriptor>:
    6ba0:	0112 0200 0002 4000 0483 5740 0200 0201     .......@..@W....
    6bb0:	0103                                        ..

00006bb2 <Virtual_Com_Port_ConfigDescriptor>:
    6bb2:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
    6bc2:	0001 2405 1000 0501 0124 0100 2404 0202     ...$....$....$..
    6bd2:	2405 0006 0701 8205 0803 ff00 0409 0001     .$..............
    6be2:	0a02 0000 0700 0305 4002 0000 0507 0281     .........@......
    6bf2:	0040 0400                                        @..

00006bf5 <Virtual_Com_Port_StringLangID>:
    6bf5:	0304 0409                                   ....

00006bf9 <Virtual_Com_Port_StringVendor>:
    6bf9:	032e 0053 0068 0075 0063 006b 0063 004d     ..S.h.u.c.k.c.M.
    6c09:	0069 0063 0072 006f 0065 006c 0065 0063     i.c.r.o.e.l.e.c.
    6c19:	0074 0072 006f 006e 0069 0063 0073          t.r.o.n.i.c.s.

00006c27 <Virtual_Com_Port_StringProduct>:
    6c27:	0332 0045 0063 006f 006c 0075 0078 0020     2.E.c.o.l.u.x. .
    6c37:	0031 0031 0031 0035 0020 0056 0043 004f     1.1.1.5. .V.C.O.
    6c47:	004d 0020 0050 006f 0072 0074 0020 0020     M. .P.o.r.t. . .
    6c57:	0020 0000 0000                                    ....

00006c5c <SystemFrequency>:
    6c5c:	a200 044a                                   ..J.

00006c60 <SystemFrequency_SysClk>:
    6c60:	a200 044a                                   ..J.

00006c64 <SystemFrequency_AHBClk>:
    6c64:	a200 044a                                   ..J.

00006c68 <SystemFrequency_APB1Clk>:
    6c68:	5100 0225                                   .Q%.

00006c6c <SystemFrequency_APB2Clk>:
    6c6c:	a200 044a 6e28 6c75 296c 0000               ..J.(null)..
